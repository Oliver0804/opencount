
OpenCount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003550  08003550  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003550  08003550  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003550  08003550  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  080035c8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080035c8  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091aa  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002112  00000000  00000000  00029242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113a5  00000000  00000000  0002c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b989  00000000  00000000  0003d725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000637ae  00000000  00000000  000490ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ac85c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002040  00000000  00000000  000ac8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033bc 	.word	0x080033bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033bc 	.word	0x080033bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <GetPage>:
#include "FLASH_PAGE.h"
#include "string.h"
#include "stdio.h"

static uint32_t GetPage(uint32_t Address)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e01c      	b.n	800028c <GetPage+0x48>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <GetPage+0x5c>)
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	001a      	movs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4293      	cmp	r3, r2
 8000262:	d210      	bcs.n	8000286 <GetPage+0x42>
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	0292      	lsls	r2, r2, #10
 800026a:	4694      	mov	ip, r2
 800026c:	4463      	add	r3, ip
 800026e:	029b      	lsls	r3, r3, #10
 8000270:	001a      	movs	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4293      	cmp	r3, r2
 8000276:	d306      	bcc.n	8000286 <GetPage+0x42>
	  {
		  return (0x08000000 + 1024*indx);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	0292      	lsls	r2, r2, #10
 800027e:	4694      	mov	ip, r2
 8000280:	4463      	add	r3, ip
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	e007      	b.n	8000296 <GetPage+0x52>
  for (int indx=0; indx<128; indx++)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b7f      	cmp	r3, #127	; 0x7f
 8000290:	dddf      	ble.n	8000252 <GetPage+0xe>
	  }
  }

  return -1;
 8000292:	2301      	movs	r3, #1
 8000294:	425b      	negs	r3, r3
}
 8000296:	0018      	movs	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	b004      	add	sp, #16
 800029c:	bd80      	pop	{r7, pc}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	00020001 	.word	0x00020001

080002a4 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t * DATA_32)
{
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen((char *)DATA_32)/4) + ((strlen((char *)DATA_32) % 4) != 0);
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ff27 	bl	8000108 <strlen>
 80002ba:	0003      	movs	r3, r0
 80002bc:	089e      	lsrs	r6, r3, #2
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	0018      	movs	r0, r3
 80002c2:	f7ff ff21 	bl	8000108 <strlen>
 80002c6:	0003      	movs	r3, r0
 80002c8:	2203      	movs	r2, #3
 80002ca:	4013      	ands	r3, r2
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	4193      	sbcs	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	18f3      	adds	r3, r6, r3
 80002d4:	61bb      	str	r3, [r7, #24]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80002d6:	f000 fdc5 	bl	8000e64 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	0018      	movs	r0, r3
 80002de:	f7ff ffb1 	bl	8000244 <GetPage>
 80002e2:	0003      	movs	r3, r0
 80002e4:	617b      	str	r3, [r7, #20]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	001a      	movs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	189b      	adds	r3, r3, r2
 80002f0:	613b      	str	r3, [r7, #16]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	0018      	movs	r0, r3
 80002f6:	f7ff ffa5 	bl	8000244 <GetPage>
 80002fa:	0003      	movs	r3, r0
 80002fc:	60fb      	str	r3, [r7, #12]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002fe:	4b20      	ldr	r3, [pc, #128]	; (8000380 <Flash_Write_Data+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <Flash_Write_Data+0xdc>)
 8000306:	697a      	ldr	r2, [r7, #20]
 8000308:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	0a9b      	lsrs	r3, r3, #10
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <Flash_Write_Data+0xdc>)
 8000316:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000318:	2308      	movs	r3, #8
 800031a:	18fa      	adds	r2, r7, r3
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <Flash_Write_Data+0xdc>)
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fe69 	bl	8000ff8 <HAL_FLASHEx_Erase>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d01e      	beq.n	8000368 <Flash_Write_Data+0xc4>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800032a:	f000 fdcf 	bl	8000ecc <HAL_FLASH_GetError>
 800032e:	0003      	movs	r3, r0
 8000330:	e021      	b.n	8000376 <Flash_Write_Data+0xd2>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	18d3      	adds	r3, r2, r3
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	001c      	movs	r4, r3
 800033e:	2300      	movs	r3, #0
 8000340:	001d      	movs	r5, r3
 8000342:	6879      	ldr	r1, [r7, #4]
 8000344:	0022      	movs	r2, r4
 8000346:	002b      	movs	r3, r5
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fcf5 	bl	8000d38 <HAL_FLASH_Program>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d106      	bne.n	8000360 <Flash_Write_Data+0xbc>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3304      	adds	r3, #4
 8000356:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	3301      	adds	r3, #1
 800035c:	61fb      	str	r3, [r7, #28]
 800035e:	e003      	b.n	8000368 <Flash_Write_Data+0xc4>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000360:	f000 fdb4 	bl	8000ecc <HAL_FLASH_GetError>
 8000364:	0003      	movs	r3, r0
 8000366:	e006      	b.n	8000376 <Flash_Write_Data+0xd2>
	   while (sofar<numberofwords)
 8000368:	69fa      	ldr	r2, [r7, #28]
 800036a:	69bb      	ldr	r3, [r7, #24]
 800036c:	429a      	cmp	r2, r3
 800036e:	dbe0      	blt.n	8000332 <Flash_Write_Data+0x8e>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000370:	f000 fd9e 	bl	8000eb0 <HAL_FLASH_Lock>

	   return 0;
 8000374:	2300      	movs	r3, #0
}
 8000376:	0018      	movs	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	b009      	add	sp, #36	; 0x24
 800037c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	2000008c 	.word	0x2000008c

08000384 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	d103      	bne.n	80003a6 <Flash_Read_Data+0x22>
		{
			*DATA_32 = '\0';
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
			break;
 80003a4:	e006      	b.n	80003b4 <Flash_Read_Data+0x30>
		}
		StartPageAddress += 4;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3304      	adds	r3, #4
 80003aa:	607b      	str	r3, [r7, #4]
		DATA_32++;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 80003b2:	e7ec      	b.n	800038e <Flash_Read_Data+0xa>
	}
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bd80      	pop	{r7, pc}

080003bc <Convert_To_Str>:

void Convert_To_Str (uint32_t *data, char *str)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)data)/4) + ((strlen((char *)data) % 4) != 0)) *4;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	0018      	movs	r0, r3
 80003ca:	f7ff fe9d 	bl	8000108 <strlen>
 80003ce:	0003      	movs	r3, r0
 80003d0:	089c      	lsrs	r4, r3, #2
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	0018      	movs	r0, r3
 80003d6:	f7ff fe97 	bl	8000108 <strlen>
 80003da:	0003      	movs	r3, r0
 80003dc:	2203      	movs	r2, #3
 80003de:	4013      	ands	r3, r2
 80003e0:	1e5a      	subs	r2, r3, #1
 80003e2:	4193      	sbcs	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	18e3      	adds	r3, r4, r3
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e01c      	b.n	800042c <Convert_To_Str+0x70>
	{
		str[i] = data[i/4]>>(8*(i%4));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	da00      	bge.n	80003fa <Convert_To_Str+0x3e>
 80003f8:	3303      	adds	r3, #3
 80003fa:	109b      	asrs	r3, r3, #2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	18d3      	adds	r3, r2, r3
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	490e      	ldr	r1, [pc, #56]	; (8000440 <Convert_To_Str+0x84>)
 8000408:	400b      	ands	r3, r1
 800040a:	d504      	bpl.n	8000416 <Convert_To_Str+0x5a>
 800040c:	3b01      	subs	r3, #1
 800040e:	2104      	movs	r1, #4
 8000410:	4249      	negs	r1, r1
 8000412:	430b      	orrs	r3, r1
 8000414:	3301      	adds	r3, #1
 8000416:	00db      	lsls	r3, r3, #3
 8000418:	40da      	lsrs	r2, r3
 800041a:	0011      	movs	r1, r2
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3301      	adds	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbde      	blt.n	80003f2 <Convert_To_Str+0x36>
	}
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b005      	add	sp, #20
 800043c:	bd90      	pop	{r4, r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	80000003 	.word	0x80000003

08000444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	0018      	movs	r0, r3
 800044e:	2314      	movs	r3, #20
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f002 faea 	bl	8002a2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_GPIO_Init+0x8c>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <MX_GPIO_Init+0x8c>)
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	0289      	lsls	r1, r1, #10
 8000462:	430a      	orrs	r2, r1
 8000464:	615a      	str	r2, [r3, #20]
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_GPIO_Init+0x8c>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	029b      	lsls	r3, r3, #10
 800046e:	4013      	ands	r3, r2
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	2170      	movs	r1, #112	; 0x70
 800047c:	0018      	movs	r0, r3
 800047e:	f000 ffcf 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2208      	movs	r2, #8
 8000486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	1d3a      	adds	r2, r7, #4
 8000496:	2390      	movs	r3, #144	; 0x90
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fe57 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2270      	movs	r2, #112	; 0x70
 80004a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2201      	movs	r2, #1
 80004ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	1d3a      	adds	r2, r7, #4
 80004bc:	2390      	movs	r3, #144	; 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fe44 	bl	8001150 <HAL_GPIO_Init>

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b006      	add	sp, #24
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000

080004d4 <WriteSet>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void WriteSet(int opencount) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	//sprintf(*tempString,"%s%s%s%s%s",dataInt1,dataInt2,dataInt3,dataInt4,dataInt5);
	sprintf(tempString, "%4d", opencount);
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4907      	ldr	r1, [pc, #28]	; (80004fc <WriteSet+0x28>)
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <WriteSet+0x2c>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 faaa 	bl	8002a3c <siprintf>
	Flash_Write_Data(0x08007C00, tempString);
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <WriteSet+0x2c>)
 80004ea:	4a06      	ldr	r2, [pc, #24]	; (8000504 <WriteSet+0x30>)
 80004ec:	0019      	movs	r1, r3
 80004ee:	0010      	movs	r0, r2
 80004f0:	f7ff fed8 	bl	80002a4 <Flash_Write_Data>
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	080033e0 	.word	0x080033e0
 8000500:	200000e0 	.word	0x200000e0
 8000504:	08007c00 	.word	0x08007c00

08000508 <KeepSet>:
void KeepSet() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	WriteSet(count);
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <KeepSet+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff ffdf 	bl	80004d4 <WriteSet>
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000098 	.word	0x20000098

08000520 <ReadSet>:
void ReadSet() {
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x08007C00, Rx_Data);
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <ReadSet+0xa4>)
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <ReadSet+0xa8>)
 800052a:	0019      	movs	r1, r3
 800052c:	0010      	movs	r0, r2
 800052e:	f7ff ff29 	bl	8000384 <Flash_Read_Data>
	Convert_To_Str(Rx_Data, string);
 8000532:	4a26      	ldr	r2, [pc, #152]	; (80005cc <ReadSet+0xac>)
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <ReadSet+0xa4>)
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff3f 	bl	80003bc <Convert_To_Str>
	int xx[1] = { 0 };
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
	int xflag = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
	for (int x = 0; x < 1; x = x + 4) {
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	e02f      	b.n	80005ac <ReadSet+0x8c>
		char temp[5];
		temp[0] = string[x];
 800054c:	4a1f      	ldr	r2, [pc, #124]	; (80005cc <ReadSet+0xac>)
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	18d3      	adds	r3, r2, r3
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	701a      	strb	r2, [r3, #0]
		temp[1] = string[x + 1];
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	3301      	adds	r3, #1
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <ReadSet+0xac>)
 800055e:	5cd2      	ldrb	r2, [r2, r3]
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	705a      	strb	r2, [r3, #1]
		temp[2] = string[x + 2];
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	3302      	adds	r3, #2
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <ReadSet+0xac>)
 800056a:	5cd2      	ldrb	r2, [r2, r3]
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	709a      	strb	r2, [r3, #2]
		temp[3] = string[x + 3];
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	3303      	adds	r3, #3
 8000574:	4a15      	ldr	r2, [pc, #84]	; (80005cc <ReadSet+0xac>)
 8000576:	5cd2      	ldrb	r2, [r2, r3]
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	70da      	strb	r2, [r3, #3]
		temp[4] = '\0';
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	711a      	strb	r2, [r3, #4]

		xx[xflag++] = atoi(temp);
 8000582:	697c      	ldr	r4, [r7, #20]
 8000584:	1c63      	adds	r3, r4, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fa1e 	bl	80029cc <atoi>
 8000590:	0002      	movs	r2, r0
 8000592:	00a3      	lsls	r3, r4, #2
 8000594:	2118      	movs	r1, #24
 8000596:	468c      	mov	ip, r1
 8000598:	44bc      	add	ip, r7
 800059a:	4463      	add	r3, ip
 800059c:	3b0c      	subs	r3, #12
 800059e:	601a      	str	r2, [r3, #0]
		HAL_Delay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 faf1 	bl	8000b88 <HAL_Delay>
	for (int x = 0; x < 1; x = x + 4) {
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	3304      	adds	r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	ddcc      	ble.n	800054c <ReadSet+0x2c>
	}
	count = xx[0];
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	001a      	movs	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <ReadSet+0xb0>)
 80005b8:	601a      	str	r2, [r3, #0]

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b007      	add	sp, #28
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	200000d0 	.word	0x200000d0
 80005c8:	08007c00 	.word	0x08007c00
 80005cc:	200000b0 	.word	0x200000b0
 80005d0:	20000098 	.word	0x20000098

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fa72 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f86e 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ff30 	bl	8000444 <MX_GPIO_Init>
  MX_RTC_Init();
 80005e4:	f000 f8d0 	bl	8000788 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 f9c2 	bl	8000970 <MX_USART1_UART_Init>
  /*
   *
   */
  //count=0;
  //KeepSet();
  ReadSet();
 80005ec:	f7ff ff98 	bl	8000520 <ReadSet>
  count++;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <main+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <main+0xd4>)
 80005f8:	601a      	str	r2, [r3, #0]
  KeepSet();
 80005fa:	f7ff ff85 	bl	8000508 <KeepSet>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(timecount>=86400){//一天秒數
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <main+0xd8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <main+0xdc>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d90c      	bls.n	8000622 <main+0x4e>
		  timecount=0;
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <main+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
		  ReadSet();
 800060e:	f7ff ff87 	bl	8000520 <ReadSet>
		  count++;
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <main+0xd4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <main+0xd4>)
 800061a:	601a      	str	r2, [r3, #0]
		  KeepSet();
 800061c:	f7ff ff74 	bl	8000508 <KeepSet>
 8000620:	e00f      	b.n	8000642 <main+0x6e>
	  }else{
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2110      	movs	r1, #16
 8000628:	0018      	movs	r0, r3
 800062a:	f000 ff16 	bl	800145a <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800062e:	23fa      	movs	r3, #250	; 0xfa
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	0018      	movs	r0, r3
 8000634:	f000 faa8 	bl	8000b88 <HAL_Delay>
		  timecount++;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <main+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	1c5a      	adds	r2, r3, #1
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0xd8>)
 8000640:	601a      	str	r2, [r3, #0]
	  }
	  if(count>=(365*3)){//三年次數
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <main+0xe0>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d9d8      	bls.n	80005fe <main+0x2a>
		  if(buzzcount>=20){//20S Sound 200ms
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <main+0xe4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b13      	cmp	r3, #19
 8000652:	d922      	bls.n	800069a <main+0xc6>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fedf 	bl	8001420 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8000662:	2390      	movs	r3, #144	; 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2200      	movs	r2, #0
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fed8 	bl	8001420 <HAL_GPIO_WritePin>
			  HAL_Delay(200);
 8000670:	20c8      	movs	r0, #200	; 0xc8
 8000672:	f000 fa89 	bl	8000b88 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000676:	2390      	movs	r3, #144	; 0x90
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fece 	bl	8001420 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8000684:	2390      	movs	r3, #144	; 0x90
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2201      	movs	r2, #1
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fec7 	bl	8001420 <HAL_GPIO_WritePin>
			  buzzcount=0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <main+0xe4>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	e7b1      	b.n	80005fe <main+0x2a>
		  }else{
			  buzzcount++;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <main+0xe4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <main+0xe4>)
 80006a2:	601a      	str	r2, [r3, #0]
	  if(timecount>=86400){//一天秒數
 80006a4:	e7ab      	b.n	80005fe <main+0x2a>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000098 	.word	0x20000098
 80006ac:	2000009c 	.word	0x2000009c
 80006b0:	0001517f 	.word	0x0001517f
 80006b4:	00000446 	.word	0x00000446
 80006b8:	200000a0 	.word	0x200000a0

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b095      	sub	sp, #84	; 0x54
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2420      	movs	r4, #32
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2330      	movs	r3, #48	; 0x30
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f002 f9ad 	bl	8002a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	2310      	movs	r3, #16
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	2310      	movs	r3, #16
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f002 f9a5 	bl	8002a2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e2:	003b      	movs	r3, r7
 80006e4:	0018      	movs	r0, r3
 80006e6:	2310      	movs	r3, #16
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f002 f99e 	bl	8002a2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006f0:	0021      	movs	r1, r4
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	220a      	movs	r2, #10
 80006f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2201      	movs	r2, #1
 80006fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2210      	movs	r2, #16
 8000702:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2201      	movs	r2, #1
 8000708:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	187b      	adds	r3, r7, r1
 8000712:	0018      	movs	r0, r3
 8000714:	f000 febc 	bl	8001490 <HAL_RCC_OscConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800071c:	f000 f82e 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	2110      	movs	r1, #16
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f001 f9c0 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000748:	f000 f818 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 800074c:	003b      	movs	r3, r7
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SystemClock_Config+0xbc>)
 8000750:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000752:	003b      	movs	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000758:	003b      	movs	r3, r7
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000760:	003b      	movs	r3, r7
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fb00 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800076c:	f000 f806 	bl	800077c <Error_Handler>
  }
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b015      	add	sp, #84	; 0x54
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	00010001 	.word	0x00010001

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 f948 	bl	8002a2c <memset>
  RTC_DateTypeDef sDate = {0};
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_RTC_Init+0xbc>)
 80007a4:	4a28      	ldr	r2, [pc, #160]	; (8000848 <MX_RTC_Init+0xc0>)
 80007a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_RTC_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <MX_RTC_Init+0xbc>)
 80007b0:	227f      	movs	r2, #127	; 0x7f
 80007b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_RTC_Init+0xbc>)
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_RTC_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_RTC_Init+0xbc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_RTC_Init+0xbc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_RTC_Init+0xbc>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fb98 	bl	8001f04 <HAL_RTC_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80007d8:	f7ff ffd0 	bl	800077c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007fa:	1d39      	adds	r1, r7, #4
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_RTC_Init+0xbc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fc13 	bl	800202c <HAL_RTC_SetTime>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800080a:	f7ff ffb7 	bl	800077c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800080e:	003b      	movs	r3, r7
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000814:	003b      	movs	r3, r7
 8000816:	2201      	movs	r2, #1
 8000818:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800081a:	003b      	movs	r3, r7
 800081c:	2201      	movs	r2, #1
 800081e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000826:	0039      	movs	r1, r7
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_RTC_Init+0xbc>)
 800082a:	2201      	movs	r2, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fcb9 	bl	80021a4 <HAL_RTC_SetDate>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000836:	f7ff ffa1 	bl	800077c <Error_Handler>
  }

}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b006      	add	sp, #24
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000100 	.word	0x20000100
 8000848:	40002800 	.word	0x40002800

0800084c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_RTC_MspInit+0x28>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_RTC_MspInit+0x2c>)
 8000860:	6a1a      	ldr	r2, [r3, #32]
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_RTC_MspInit+0x2c>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0209      	lsls	r1, r1, #8
 8000868:	430a      	orrs	r2, r1
 800086a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40002800 	.word	0x40002800
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	699a      	ldr	r2, [r3, #24]
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	430a      	orrs	r2, r1
 80008a6:	61da      	str	r2, [r3, #28]
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_MspInit+0x44>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f930 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f002 f856 	bl	80029d8 <__errno>
 800092c:	0003      	movs	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	2301      	movs	r3, #1
 8000934:	425b      	negs	r3, r3
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	18d2      	adds	r2, r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b006      	add	sp, #24
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20001000 	.word	0x20001000
 8000958:	00000400 	.word	0x00000400
 800095c:	200000a4 	.word	0x200000a4
 8000960:	200001d8 	.word	0x200001d8

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_USART1_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 800097c:	22e1      	movs	r2, #225	; 0xe1
 800097e:	0252      	lsls	r2, r2, #9
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_USART1_UART_Init+0x58>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fd11 	bl	80023dc <HAL_UART_Init>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f7ff fedd 	bl	800077c <Error_Handler>
  }

}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000120 	.word	0x20000120
 80009cc:	40013800 	.word	0x40013800

080009d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2414      	movs	r4, #20
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f002 f822 	bl	8002a2c <memset>
  if(uartHandle->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_UART_MspInit+0x94>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d133      	bne.n	8000a5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f4:	699a      	ldr	r2, [r3, #24]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	01c9      	lsls	r1, r1, #7
 80009fc:	430a      	orrs	r2, r1
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a02:	699a      	ldr	r2, [r3, #24]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	01db      	lsls	r3, r3, #7
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0289      	lsls	r1, r1, #10
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	029b      	lsls	r3, r3, #10
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	22c0      	movs	r2, #192	; 0xc0
 8000a2e:	00d2      	lsls	r2, r2, #3
 8000a30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2202      	movs	r2, #2
 8000a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2203      	movs	r2, #3
 8000a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	187a      	adds	r2, r7, r1
 8000a4e:	2390      	movs	r3, #144	; 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fb7b 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	; 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000

08000a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a96:	f7ff ff65 	bl	8000964 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a9a:	f001 ffa3 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9e:	f7ff fd99 	bl	80005d4 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ab0:	08003558 	.word	0x08003558
  ldr r2, =_sbss
 8000ab4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ab8:	200001d8 	.word	0x200001d8

08000abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_Init+0x24>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_Init+0x24>)
 8000aca:	2110      	movs	r1, #16
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f809 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fed1 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x5c>)
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_InitTick+0x60>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	0019      	movs	r1, r3
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	0098      	lsls	r0, r3, #2
 8000afe:	f7ff fb15 	bl	800012c <__udivsi3>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0019      	movs	r1, r3
 8000b06:	0020      	movs	r0, r4
 8000b08:	f7ff fb10 	bl	800012c <__udivsi3>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f905 	bl	8000d1e <HAL_SYSTICK_Config>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e00f      	b.n	8000b3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d80b      	bhi.n	8000b3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2301      	movs	r3, #1
 8000b26:	425b      	negs	r3, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f8e2 	bl	8000cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_InitTick+0x64>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b003      	add	sp, #12
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_IncTick+0x20>)
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	200001a4 	.word	0x200001a4

08000b74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	200001a4 	.word	0x200001a4

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	0003      	movs	r3, r0
 8000b96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b7f      	cmp	r3, #127	; 0x7f
 8000be4:	d828      	bhi.n	8000c38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	589b      	ldr	r3, [r3, r2]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c36:	e031      	b.n	8000c9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0019      	movs	r1, r3
 8000c40:	230f      	movs	r3, #15
 8000c42:	400b      	ands	r3, r1
 8000c44:	3b08      	subs	r3, #8
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3306      	adds	r3, #6
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	0011      	movs	r1, r2
 8000c58:	2203      	movs	r2, #3
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	21ff      	movs	r1, #255	; 0xff
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	401a      	ands	r2, r3
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0018      	movs	r0, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	4003      	ands	r3, r0
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001c      	movs	r4, r3
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	430a      	orrs	r2, r1
 8000c92:	3306      	adds	r3, #6
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	18c3      	adds	r3, r0, r3
 8000c98:	3304      	adds	r3, #4
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	045b      	lsls	r3, r3, #17
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d301      	bcc.n	8000cc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e010      	b.n	8000ce6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SysTick_Config+0x44>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	425b      	negs	r3, r3
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff ff7c 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x44>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	210f      	movs	r1, #15
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ffbf 	bl	8000cac <SysTick_Config>
 8000d2e:	0003      	movs	r3, r0
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	603a      	str	r2, [r7, #0]
 8000d44:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d46:	2317      	movs	r3, #23
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000d4e:	2316      	movs	r3, #22
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000d56:	2315      	movs	r3, #21
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <HAL_FLASH_Program+0x120>)
 8000d60:	7e1b      	ldrb	r3, [r3, #24]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_FLASH_Program+0x32>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e072      	b.n	8000e50 <HAL_FLASH_Program+0x118>
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_FLASH_Program+0x120>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d70:	2317      	movs	r3, #23
 8000d72:	18fe      	adds	r6, r7, r3
 8000d74:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <HAL_FLASH_Program+0x124>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f8ce 	bl	8000f18 <FLASH_WaitForLastOperation>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000d80:	2317      	movs	r3, #23
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d15c      	bne.n	8000e44 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d104      	bne.n	8000d9a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d90:	2315      	movs	r3, #21
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e00b      	b.n	8000db2 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d104      	bne.n	8000daa <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000da0:	2315      	movs	r3, #21
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2202      	movs	r2, #2
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e003      	b.n	8000db2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000daa:	2315      	movs	r3, #21
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2204      	movs	r2, #4
 8000db0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000db2:	2316      	movs	r3, #22
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e039      	b.n	8000e30 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000dbc:	2116      	movs	r1, #22
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	005a      	lsls	r2, r3, #1
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	18d0      	adds	r0, r2, r3
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	001a      	movs	r2, r3
 8000dd0:	3a20      	subs	r2, #32
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	db03      	blt.n	8000dde <HAL_FLASH_Program+0xa6>
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	40d1      	lsrs	r1, r2
 8000dda:	000c      	movs	r4, r1
 8000ddc:	e008      	b.n	8000df0 <HAL_FLASH_Program+0xb8>
 8000dde:	2220      	movs	r2, #32
 8000de0:	1ad2      	subs	r2, r2, r3
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	6839      	ldr	r1, [r7, #0]
 8000dea:	40d9      	lsrs	r1, r3
 8000dec:	000c      	movs	r4, r1
 8000dee:	4314      	orrs	r4, r2
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	40da      	lsrs	r2, r3
 8000df4:	0015      	movs	r5, r2
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	0019      	movs	r1, r3
 8000dfa:	f000 f871 	bl	8000ee0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dfe:	2317      	movs	r3, #23
 8000e00:	18fe      	adds	r6, r7, r3
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_FLASH_Program+0x124>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 f887 	bl	8000f18 <FLASH_WaitForLastOperation>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_FLASH_Program+0x128>)
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_FLASH_Program+0x128>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	438a      	bics	r2, r1
 8000e18:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000e1a:	2317      	movs	r3, #23
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10e      	bne.n	8000e42 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000e24:	2116      	movs	r1, #22
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	3201      	adds	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	2316      	movs	r3, #22
 8000e32:	18fa      	adds	r2, r7, r3
 8000e34:	2315      	movs	r3, #21
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3bd      	bcc.n	8000dbc <HAL_FLASH_Program+0x84>
 8000e40:	e000      	b.n	8000e44 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000e42:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_FLASH_Program+0x120>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	761a      	strb	r2, [r3, #24]

  return status;
 8000e4a:	2317      	movs	r3, #23
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b007      	add	sp, #28
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	200001a8 	.word	0x200001a8
 8000e5c:	0000c350 	.word	0x0000c350
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_FLASH_Unlock+0x40>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	4013      	ands	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_FLASH_Unlock+0x40>)
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_FLASH_Unlock+0x44>)
 8000e7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_FLASH_Unlock+0x40>)
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_FLASH_Unlock+0x48>)
 8000e84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_FLASH_Unlock+0x40>)
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d002      	beq.n	8000e96 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40022000 	.word	0x40022000
 8000ea8:	45670123 	.word	0x45670123
 8000eac:	cdef89ab 	.word	0xcdef89ab

08000eb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_FLASH_Lock+0x18>)
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_FLASH_Lock+0x18>)
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <HAL_FLASH_GetError+0x10>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200001a8 	.word	0x200001a8

08000ee0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	000a      	movs	r2, r1
 8000eea:	1cbb      	adds	r3, r7, #2
 8000eec:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <FLASH_Program_HalfWord+0x30>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <FLASH_Program_HalfWord+0x34>)
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <FLASH_Program_HalfWord+0x34>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	1cba      	adds	r2, r7, #2
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	801a      	strh	r2, [r3, #0]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001a8 	.word	0x200001a8
 8000f14:	40022000 	.word	0x40022000

08000f18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff fe28 	bl	8000b74 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f28:	e00f      	b.n	8000f4a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	d00c      	beq.n	8000f4a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <FLASH_WaitForLastOperation+0x2e>
 8000f36:	f7ff fe1d 	bl	8000b74 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d201      	bcs.n	8000f4a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e01f      	b.n	8000f8a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <FLASH_WaitForLastOperation+0x7c>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d0e9      	beq.n	8000f2a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <FLASH_WaitForLastOperation+0x7c>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b20      	cmp	r3, #32
 8000f60:	d102      	bne.n	8000f68 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <FLASH_WaitForLastOperation+0x7c>)
 8000f64:	2220      	movs	r2, #32
 8000f66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <FLASH_WaitForLastOperation+0x7c>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d005      	beq.n	8000f80 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <FLASH_WaitForLastOperation+0x7c>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d103      	bne.n	8000f88 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f80:	f000 f80a 	bl	8000f98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	40022000 	.word	0x40022000

08000f98 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <FLASH_SetErrorCode+0x58>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b10      	cmp	r3, #16
 8000fac:	d109      	bne.n	8000fc2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <FLASH_SetErrorCode+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <FLASH_SetErrorCode+0x5c>)
 8000fb8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <FLASH_SetErrorCode+0x58>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d109      	bne.n	8000fe2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <FLASH_SetErrorCode+0x5c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <FLASH_SetErrorCode+0x5c>)
 8000fd8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fe2:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <FLASH_SetErrorCode+0x58>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	60da      	str	r2, [r3, #12]
}  
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	200001a8 	.word	0x200001a8

08000ff8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001002:	230f      	movs	r3, #15
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <HAL_FLASHEx_Erase+0xe0>)
 8001010:	7e1b      	ldrb	r3, [r3, #24]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_FLASHEx_Erase+0x22>
 8001016:	2302      	movs	r3, #2
 8001018:	e05a      	b.n	80010d0 <HAL_FLASHEx_Erase+0xd8>
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_FLASHEx_Erase+0xe0>)
 800101c:	2201      	movs	r2, #1
 800101e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d116      	bne.n	8001056 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <HAL_FLASHEx_Erase+0xe4>)
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff ff74 	bl	8000f18 <FLASH_WaitForLastOperation>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d147      	bne.n	80010c4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001034:	f000 f856 	bl	80010e4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001038:	230f      	movs	r3, #15
 800103a:	18fc      	adds	r4, r7, r3
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_FLASHEx_Erase+0xe4>)
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff6a 	bl	8000f18 <FLASH_WaitForLastOperation>
 8001044:	0003      	movs	r3, r0
 8001046:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_FLASHEx_Erase+0xe8>)
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_FLASHEx_Erase+0xe8>)
 800104e:	2104      	movs	r1, #4
 8001050:	438a      	bics	r2, r1
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	e036      	b.n	80010c4 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_FLASHEx_Erase+0xe4>)
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <FLASH_WaitForLastOperation>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d130      	bne.n	80010c4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	4252      	negs	r2, r2
 8001068:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	e01f      	b.n	80010b2 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	0018      	movs	r0, r3
 8001076:	f000 f84d 	bl	8001114 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800107a:	250f      	movs	r5, #15
 800107c:	197c      	adds	r4, r7, r5
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_FLASHEx_Erase+0xe4>)
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ff49 	bl	8000f18 <FLASH_WaitForLastOperation>
 8001086:	0003      	movs	r3, r0
 8001088:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_FLASHEx_Erase+0xe8>)
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_FLASHEx_Erase+0xe8>)
 8001090:	2102      	movs	r1, #2
 8001092:	438a      	bics	r2, r1
 8001094:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001096:	197b      	adds	r3, r7, r5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]
            break;
 80010a4:	e00e      	b.n	80010c4 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	00d2      	lsls	r2, r2, #3
 80010ac:	4694      	mov	ip, r2
 80010ae:	4463      	add	r3, ip
 80010b0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	029a      	lsls	r2, r3, #10
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3d6      	bcc.n	8001072 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_FLASHEx_Erase+0xe0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]

  return status;
 80010ca:	230f      	movs	r3, #15
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	781b      	ldrb	r3, [r3, #0]
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	200001a8 	.word	0x200001a8
 80010dc:	0000c350 	.word	0x0000c350
 80010e0:	40022000 	.word	0x40022000

080010e4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <FLASH_MassErase+0x28>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <FLASH_MassErase+0x2c>)
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <FLASH_MassErase+0x2c>)
 80010f4:	2104      	movs	r1, #4
 80010f6:	430a      	orrs	r2, r1
 80010f8:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <FLASH_MassErase+0x2c>)
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <FLASH_MassErase+0x2c>)
 8001100:	2140      	movs	r1, #64	; 0x40
 8001102:	430a      	orrs	r2, r1
 8001104:	611a      	str	r2, [r3, #16]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001a8 	.word	0x200001a8
 8001110:	40022000 	.word	0x40022000

08001114 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <FLASH_PageErase+0x34>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <FLASH_PageErase+0x38>)
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <FLASH_PageErase+0x38>)
 8001128:	2102      	movs	r1, #2
 800112a:	430a      	orrs	r2, r1
 800112c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <FLASH_PageErase+0x38>)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <FLASH_PageErase+0x38>)
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <FLASH_PageErase+0x38>)
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	430a      	orrs	r2, r1
 800113e:	611a      	str	r2, [r3, #16]
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001a8 	.word	0x200001a8
 800114c:	40022000 	.word	0x40022000

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e149      	b.n	80013f4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x28>
 8001176:	e13a      	b.n	80013ee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d00b      	beq.n	8001198 <HAL_GPIO_Init+0x48>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d007      	beq.n	8001198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118c:	2b11      	cmp	r3, #17
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	43da      	mvns	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	2201      	movs	r2, #1
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	43da      	mvns	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	0013      	movs	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0xea>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b12      	cmp	r3, #18
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2207      	movs	r2, #7
 800124c:	4013      	ands	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2107      	movs	r1, #7
 8001266:	400b      	ands	r3, r1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	401a      	ands	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	055b      	lsls	r3, r3, #21
 80012be:	4013      	ands	r3, r2
 80012c0:	d100      	bne.n	80012c4 <HAL_GPIO_Init+0x174>
 80012c2:	e094      	b.n	80013ee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b51      	ldr	r3, [pc, #324]	; (800140c <HAL_GPIO_Init+0x2bc>)
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_GPIO_Init+0x2bc>)
 80012ca:	2101      	movs	r1, #1
 80012cc:	430a      	orrs	r2, r1
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <HAL_GPIO_Init+0x2bc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x2c0>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	589b      	ldr	r3, [r3, r2]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	2390      	movs	r3, #144	; 0x90
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	429a      	cmp	r2, r3
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x1d6>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a41      	ldr	r2, [pc, #260]	; (8001414 <HAL_GPIO_Init+0x2c4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x1d2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a40      	ldr	r2, [pc, #256]	; (8001418 <HAL_GPIO_Init+0x2c8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x1ce>
 800131a:	2302      	movs	r3, #2
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x1d8>
 800131e:	2305      	movs	r3, #5
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x1d8>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x1d8>
 8001326:	2300      	movs	r3, #0
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	2103      	movs	r1, #3
 800132c:	400a      	ands	r2, r1
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x2c0>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <HAL_GPIO_Init+0x2cc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	4013      	ands	r3, r2
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <HAL_GPIO_Init+0x2cc>)
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <HAL_GPIO_Init+0x2cc>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	4013      	ands	r3, r2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_GPIO_Init+0x2cc>)
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_GPIO_Init+0x2cc>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	035b      	lsls	r3, r3, #13
 80013b2:	4013      	ands	r3, r2
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	039b      	lsls	r3, r3, #14
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	40da      	lsrs	r2, r3
 80013fc:	1e13      	subs	r3, r2, #0
 80013fe:	d000      	beq.n	8001402 <HAL_GPIO_Init+0x2b2>
 8001400:	e6ae      	b.n	8001160 <HAL_GPIO_Init+0x10>
  } 
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b006      	add	sp, #24
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	0008      	movs	r0, r1
 800142a:	0011      	movs	r1, r2
 800142c:	1cbb      	adds	r3, r7, #2
 800142e:	1c02      	adds	r2, r0, #0
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	1c7b      	adds	r3, r7, #1
 8001434:	1c0a      	adds	r2, r1, #0
 8001436:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001438:	1c7b      	adds	r3, r7, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001440:	1cbb      	adds	r3, r7, #2
 8001442:	881a      	ldrh	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	1cbb      	adds	r3, r7, #2
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	000a      	movs	r2, r1
 8001464:	1cbb      	adds	r3, r7, #2
 8001466:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146e:	1cbb      	adds	r3, r7, #2
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4013      	ands	r3, r2
 8001476:	041a      	lsls	r2, r3, #16
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	1cb9      	adds	r1, r7, #2
 800147e:	8809      	ldrh	r1, [r1, #0]
 8001480:	400b      	ands	r3, r1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e301      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x1e>
 80014ac:	e08d      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ae:	4bc3      	ldr	r3, [pc, #780]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	220c      	movs	r2, #12
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d00e      	beq.n	80014d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ba:	4bc0      	ldr	r3, [pc, #768]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x64>
 80014c6:	4bbd      	ldr	r3, [pc, #756]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	401a      	ands	r2, r3
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10d      	bne.n	80014f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4bb8      	ldr	r3, [pc, #736]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x56>
 80014e4:	e070      	b.n	80015c8 <HAL_RCC_OscConfig+0x138>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d000      	beq.n	80014f0 <HAL_RCC_OscConfig+0x60>
 80014ee:	e06b      	b.n	80015c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e2d8      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x7c>
 80014fc:	4baf      	ldr	r3, [pc, #700]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4bae      	ldr	r3, [pc, #696]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	0249      	lsls	r1, r1, #9
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e02f      	b.n	800156c <HAL_RCC_OscConfig+0xdc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10c      	bne.n	800152e <HAL_RCC_OscConfig+0x9e>
 8001514:	4ba9      	ldr	r3, [pc, #676]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800151a:	49a9      	ldr	r1, [pc, #676]	; (80017c0 <HAL_RCC_OscConfig+0x330>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	4ba6      	ldr	r3, [pc, #664]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4ba5      	ldr	r3, [pc, #660]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001526:	49a7      	ldr	r1, [pc, #668]	; (80017c4 <HAL_RCC_OscConfig+0x334>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e01e      	b.n	800156c <HAL_RCC_OscConfig+0xdc>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10e      	bne.n	8001554 <HAL_RCC_OscConfig+0xc4>
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	02c9      	lsls	r1, r1, #11
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b9c      	ldr	r3, [pc, #624]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0249      	lsls	r1, r1, #9
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xdc>
 8001554:	4b99      	ldr	r3, [pc, #612]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b98      	ldr	r3, [pc, #608]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800155a:	4999      	ldr	r1, [pc, #612]	; (80017c0 <HAL_RCC_OscConfig+0x330>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4b96      	ldr	r3, [pc, #600]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b95      	ldr	r3, [pc, #596]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001566:	4997      	ldr	r1, [pc, #604]	; (80017c4 <HAL_RCC_OscConfig+0x334>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d014      	beq.n	800159e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fafe 	bl	8000b74 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157e:	f7ff faf9 	bl	8000b74 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e28a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001590:	4b8a      	ldr	r3, [pc, #552]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0xee>
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fae9 	bl	8000b74 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fae4 	bl	8000b74 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e275      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b80      	ldr	r3, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	029b      	lsls	r3, r3, #10
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x118>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d100      	bne.n	80015d6 <HAL_RCC_OscConfig+0x146>
 80015d4:	e069      	b.n	80016aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015d6:	4b79      	ldr	r3, [pc, #484]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	220c      	movs	r2, #12
 80015dc:	4013      	ands	r3, r2
 80015de:	d00b      	beq.n	80015f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	220c      	movs	r2, #12
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d11c      	bne.n	8001626 <HAL_RCC_OscConfig+0x196>
 80015ec:	4b73      	ldr	r3, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4013      	ands	r3, r2
 80015f6:	d116      	bne.n	8001626 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f8:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e24b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	22f8      	movs	r2, #248	; 0xf8
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00da      	lsls	r2, r3, #3
 800161e:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001624:	e041      	b.n	80016aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fa9b 	bl	8000b74 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fa96 	bl	8000b74 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e227      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d0f1      	beq.n	8001644 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	22f8      	movs	r2, #248	; 0xf8
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e018      	b.n	80016aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fa76 	bl	8000b74 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fa71 	bl	8000b74 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e202      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f1      	bne.n	800168e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	4013      	ands	r3, r2
 80016b2:	d036      	beq.n	8001722 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d019      	beq.n	80016f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa54 	bl	8000b74 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fa4f 	bl	8000b74 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1e0      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e4:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d0f1      	beq.n	80016d2 <HAL_RCC_OscConfig+0x242>
 80016ee:	e018      	b.n	8001722 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	438a      	bics	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fa3a 	bl	8000b74 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fa35 	bl	8000b74 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1c6      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d1f1      	bne.n	8001706 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2204      	movs	r2, #4
 8001728:	4013      	ands	r3, r2
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x29e>
 800172c:	e0b4      	b.n	8001898 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	201f      	movs	r0, #31
 8001730:	183b      	adds	r3, r7, r0
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	055b      	lsls	r3, r3, #21
 800173e:	4013      	ands	r3, r2
 8001740:	d110      	bne.n	8001764 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0549      	lsls	r1, r1, #21
 800174c:	430a      	orrs	r2, r1
 800174e:	61da      	str	r2, [r3, #28]
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	055b      	lsls	r3, r3, #21
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800175e:	183b      	adds	r3, r7, r0
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d11a      	bne.n	80017a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0049      	lsls	r1, r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff f9f9 	bl	8000b74 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff f9f4 	bl	8000b74 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e185      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d10e      	bne.n	80017cc <HAL_RCC_OscConfig+0x33c>
 80017ae:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	621a      	str	r2, [r3, #32]
 80017ba:	e035      	b.n	8001828 <HAL_RCC_OscConfig+0x398>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	fffeffff 	.word	0xfffeffff
 80017c4:	fffbffff 	.word	0xfffbffff
 80017c8:	40007000 	.word	0x40007000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10c      	bne.n	80017ee <HAL_RCC_OscConfig+0x35e>
 80017d4:	4bb6      	ldr	r3, [pc, #728]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4bb5      	ldr	r3, [pc, #724]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017da:	2101      	movs	r1, #1
 80017dc:	438a      	bics	r2, r1
 80017de:	621a      	str	r2, [r3, #32]
 80017e0:	4bb3      	ldr	r3, [pc, #716]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4bb2      	ldr	r3, [pc, #712]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017e6:	2104      	movs	r1, #4
 80017e8:	438a      	bics	r2, r1
 80017ea:	621a      	str	r2, [r3, #32]
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x398>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x380>
 80017f6:	4bae      	ldr	r3, [pc, #696]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	4bad      	ldr	r3, [pc, #692]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80017fc:	2104      	movs	r1, #4
 80017fe:	430a      	orrs	r2, r1
 8001800:	621a      	str	r2, [r3, #32]
 8001802:	4bab      	ldr	r3, [pc, #684]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4baa      	ldr	r3, [pc, #680]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x398>
 8001810:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4ba6      	ldr	r3, [pc, #664]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	621a      	str	r2, [r3, #32]
 800181c:	4ba4      	ldr	r3, [pc, #656]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4ba3      	ldr	r3, [pc, #652]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001822:	2104      	movs	r1, #4
 8001824:	438a      	bics	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff f9a0 	bl	8000b74 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e009      	b.n	800184e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff f99b 	bl	8000b74 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a9b      	ldr	r2, [pc, #620]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e12b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	4b98      	ldr	r3, [pc, #608]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x3aa>
 8001858:	e013      	b.n	8001882 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff f98b 	bl	8000b74 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001862:	e009      	b.n	8001878 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff f986 	bl	8000b74 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a91      	ldr	r2, [pc, #580]	; (8001ab4 <HAL_RCC_OscConfig+0x624>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e116      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	4b8d      	ldr	r3, [pc, #564]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001882:	231f      	movs	r3, #31
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	4b87      	ldr	r3, [pc, #540]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001892:	4989      	ldr	r1, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x628>)
 8001894:	400a      	ands	r2, r1
 8001896:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12a      	bne.n	8001900 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018aa:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b80      	ldr	r3, [pc, #512]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018b0:	2104      	movs	r1, #4
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018b6:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ba:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f957 	bl	8000b74 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018cc:	f7ff f952 	bl	8000b74 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0e3      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018de:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f1      	beq.n	80018cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018e8:	4b71      	ldr	r3, [pc, #452]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	22f8      	movs	r2, #248	; 0xf8
 80018ee:	4393      	bics	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	00da      	lsls	r2, r3, #3
 80018f8:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
 80018fe:	e034      	b.n	800196a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	3305      	adds	r3, #5
 8001906:	d111      	bne.n	800192c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001908:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800190a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800190e:	2104      	movs	r1, #4
 8001910:	438a      	bics	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001914:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	22f8      	movs	r2, #248	; 0xf8
 800191a:	4393      	bics	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	00da      	lsls	r2, r3, #3
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001926:	430a      	orrs	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
 800192a:	e01e      	b.n	800196a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800192c:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800192e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001930:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001932:	2104      	movs	r1, #4
 8001934:	430a      	orrs	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800193a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193c:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800193e:	2101      	movs	r1, #1
 8001940:	438a      	bics	r2, r1
 8001942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff f916 	bl	8000b74 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800194e:	f7ff f911 	bl	8000b74 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0a2      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d1f1      	bne.n	800194e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d100      	bne.n	8001974 <HAL_RCC_OscConfig+0x4e4>
 8001972:	e097      	b.n	8001aa4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	220c      	movs	r2, #12
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x4f2>
 8001980:	e06b      	b.n	8001a5a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d14c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001990:	494a      	ldr	r1, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x62c>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f8ed 	bl	8000b74 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f8e8 	bl	8000b74 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e079      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019be:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	220f      	movs	r2, #15
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <HAL_RCC_OscConfig+0x630>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	431a      	orrs	r2, r3
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0449      	lsls	r1, r1, #17
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f8bb 	bl	8000b74 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f8b6 	bl	8000b74 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e047      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	049b      	lsls	r3, r3, #18
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x574>
 8001a22:	e03f      	b.n	8001aa4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	4924      	ldr	r1, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x62c>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f8a0 	bl	8000b74 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f89b 	bl	8000b74 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e02c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	049b      	lsls	r3, r3, #18
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x5aa>
 8001a58:	e024      	b.n	8001aa4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01f      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	401a      	ands	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d10e      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	220f      	movs	r2, #15
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	23f0      	movs	r3, #240	; 0xf0
 8001a94:	039b      	lsls	r3, r3, #14
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b008      	add	sp, #32
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	00001388 	.word	0x00001388
 8001ab8:	efffffff 	.word	0xefffffff
 8001abc:	feffffff 	.word	0xfeffffff
 8001ac0:	ffc2ffff 	.word	0xffc2ffff

08001ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b3      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d911      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4393      	bics	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e09a      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d015      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d006      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b24:	21e0      	movs	r1, #224	; 0xe0
 8001b26:	00c9      	lsls	r1, r1, #3
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	22f0      	movs	r2, #240	; 0xf0
 8001b32:	4393      	bics	r3, r2
 8001b34:	0019      	movs	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	d040      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d114      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06e      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	4013      	ands	r3, r2
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e062      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e05b      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7fe ffea 	bl	8000b74 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba6:	f7fe ffe5 	bl	8000b74 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <HAL_RCC_ClockConfig+0x18c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e042      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d211      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x184>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e020      	b.n	8001c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_RCC_ClockConfig+0x190>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c1c:	f000 f820 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c20:	0001      	movs	r1, r0
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x188>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	220f      	movs	r2, #15
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x194>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	000a      	movs	r2, r1
 8001c32:	40da      	lsrs	r2, r3
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x198>)
 8001c36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7fe ff55 	bl	8000ae8 <HAL_InitTick>
  
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b004      	add	sp, #16
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	00001388 	.word	0x00001388
 8001c54:	fffff8ff 	.word	0xfffff8ff
 8001c58:	08003404 	.word	0x08003404
 8001c5c:	20000000 	.word	0x20000000

08001c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08f      	sub	sp, #60	; 0x3c
 8001c64:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c66:	2314      	movs	r3, #20
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	4a2b      	ldr	r2, [pc, #172]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c6e:	c313      	stmia	r3!, {r0, r1, r4}
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4a29      	ldr	r2, [pc, #164]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c94:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d002      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x4a>
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d003      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x50>
 8001ca8:	e02d      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cae:	e02d      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2214      	movs	r2, #20
 8001cba:	18ba      	adds	r2, r7, r2
 8001cbc:	5cd3      	ldrb	r3, [r2, r3]
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	1d3a      	adds	r2, r7, #4
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	025b      	lsls	r3, r3, #9
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cda:	4812      	ldr	r0, [pc, #72]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cdc:	f7fe fa26 	bl	800012c <__udivsi3>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	4353      	muls	r3, r2
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cea:	e009      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cee:	000a      	movs	r2, r1
 8001cf0:	0152      	lsls	r2, r2, #5
 8001cf2:	1a52      	subs	r2, r2, r1
 8001cf4:	0193      	lsls	r3, r2, #6
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	185b      	adds	r3, r3, r1
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d04:	e002      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b00f      	add	sp, #60	; 0x3c
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	080033e4 	.word	0x080033e4
 8001d1c:	080033f4 	.word	0x080033f4
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d40:	f7ff fff2 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d44:	0001      	movs	r1, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	40d9      	lsrs	r1, r3
 8001d56:	000b      	movs	r3, r1
}    
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003414 	.word	0x08003414

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	4013      	ands	r3, r2
 8001d82:	d100      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d84:	e08e      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2017      	movs	r0, #23
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	055b      	lsls	r3, r3, #21
 8001d96:	4013      	ands	r3, r2
 8001d98:	d110      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0549      	lsls	r1, r1, #21
 8001da4:	430a      	orrs	r2, r1
 8001da6:	61da      	str	r2, [r3, #28]
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d11a      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	0049      	lsls	r1, r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fecd 	bl	8000b74 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	e008      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de0:	f7fe fec8 	bl	8000b74 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e077      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d034      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	23c0      	movs	r3, #192	; 0xc0
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d02c      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0249      	lsls	r1, r1, #9
 8001e34:	430a      	orrs	r2, r1
 8001e36:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3e:	492e      	ldr	r1, [pc, #184]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe fe8f 	bl	8000b74 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	e009      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fe8a 	bl	8000b74 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e038      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e8e:	2317      	movs	r3, #23
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e9e:	4918      	ldr	r1, [pc, #96]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	fffffcff 	.word	0xfffffcff
 8001ef8:	fffeffff 	.word	0xfffeffff
 8001efc:	00001388 	.word	0x00001388
 8001f00:	efffffff 	.word	0xefffffff

08001f04 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e081      	b.n	800201a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7f5b      	ldrb	r3, [r3, #29]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7fe fc8f 	bl	800084c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	22ca      	movs	r2, #202	; 0xca
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2253      	movs	r2, #83	; 0x53
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f9fb 	bl	8002342 <RTC_EnterInitMode>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e05b      	b.n	800201a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_RTC_Init+0x120>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68d2      	ldr	r2, [r2, #12]
 8001f98:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6919      	ldr	r1, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	438a      	bics	r2, r1
 8001fbc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f98f 	bl	80022f0 <HAL_RTC_WaitForSynchro>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e018      	b.n	800201a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <HAL_RTC_Init+0x124>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	22ff      	movs	r2, #255	; 0xff
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002018:	2300      	movs	r3, #0
  }
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	ff8fffbf 	.word	0xff8fffbf
 8002028:	fffbffff 	.word	0xfffbffff

0800202c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	7f1b      	ldrb	r3, [r3, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_RTC_SetTime+0x1c>
 8002044:	2302      	movs	r3, #2
 8002046:	e0a5      	b.n	8002194 <HAL_RTC_SetTime+0x168>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d125      	bne.n	80020a6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	4013      	ands	r3, r2
 8002064:	d102      	bne.n	800206c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f992 	bl	800239a <RTC_ByteToBcd2>
 8002076:	0003      	movs	r3, r0
 8002078:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f98b 	bl	800239a <RTC_ByteToBcd2>
 8002084:	0003      	movs	r3, r0
 8002086:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002088:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	789b      	ldrb	r3, [r3, #2]
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f983 	bl	800239a <RTC_ByteToBcd2>
 8002094:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002096:	0022      	movs	r2, r4
 8002098:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	78db      	ldrb	r3, [r3, #3]
 800209e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e017      	b.n	80020d6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	4013      	ands	r3, r2
 80020b0:	d102      	bne.n	80020b8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020c4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80020ca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	22ca      	movs	r2, #202	; 0xca
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2253      	movs	r2, #83	; 0x53
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f92a 	bl	8002342 <RTC_EnterInitMode>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	22ff      	movs	r2, #255	; 0xff
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2204      	movs	r2, #4
 80020fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e044      	b.n	8002194 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_RTC_SetTime+0x170>)
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	491f      	ldr	r1, [pc, #124]	; (80021a0 <HAL_RTC_SetTime+0x174>)
 8002122:	400a      	ands	r2, r1
 8002124:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	438a      	bics	r2, r1
 800214c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2220      	movs	r2, #32
 8002156:	4013      	ands	r3, r2
 8002158:	d111      	bne.n	800217e <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f8c7 	bl	80022f0 <HAL_RTC_WaitForSynchro>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d00b      	beq.n	800217e <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	22ff      	movs	r2, #255	; 0xff
 800216c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2204      	movs	r2, #4
 8002172:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00a      	b.n	8002194 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002192:	2300      	movs	r3, #0
  }
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b007      	add	sp, #28
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	007f7f7f 	.word	0x007f7f7f
 80021a0:	fffbffff 	.word	0xfffbffff

080021a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	7f1b      	ldrb	r3, [r3, #28]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_RTC_SetDate+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e091      	b.n	80022e4 <HAL_RTC_SetDate+0x140>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10e      	bne.n	80021f0 <HAL_RTC_SetDate+0x4c>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	785b      	ldrb	r3, [r3, #1]
 80021d6:	001a      	movs	r2, r3
 80021d8:	2310      	movs	r3, #16
 80021da:	4013      	ands	r3, r2
 80021dc:	d008      	beq.n	80021f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2210      	movs	r2, #16
 80021e4:	4393      	bics	r3, r2
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	330a      	adds	r3, #10
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11c      	bne.n	8002230 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 f8cd 	bl	800239a <RTC_ByteToBcd2>
 8002200:	0003      	movs	r3, r0
 8002202:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 f8c6 	bl	800239a <RTC_ByteToBcd2>
 800220e:	0003      	movs	r3, r0
 8002210:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002212:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	789b      	ldrb	r3, [r3, #2]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f8be 	bl	800239a <RTC_ByteToBcd2>
 800221e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002220:	0022      	movs	r2, r4
 8002222:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e00e      	b.n	800224e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	78db      	ldrb	r3, [r3, #3]
 8002234:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800223c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002242:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	22ca      	movs	r2, #202	; 0xca
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2253      	movs	r2, #83	; 0x53
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 f86e 	bl	8002342 <RTC_EnterInitMode>
 8002266:	1e03      	subs	r3, r0, #0
 8002268:	d00b      	beq.n	8002282 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	22ff      	movs	r2, #255	; 0xff
 8002270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2204      	movs	r2, #4
 8002276:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e030      	b.n	80022e4 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <HAL_RTC_SetDate+0x148>)
 800228a:	400a      	ands	r2, r1
 800228c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	438a      	bics	r2, r1
 800229c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2220      	movs	r2, #32
 80022a6:	4013      	ands	r3, r2
 80022a8:	d111      	bne.n	80022ce <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f81f 	bl	80022f0 <HAL_RTC_WaitForSynchro>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2204      	movs	r2, #4
 80022c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00a      	b.n	80022e4 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
  }
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b007      	add	sp, #28
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	00ffff3f 	.word	0x00ffff3f

080022f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	21a0      	movs	r1, #160	; 0xa0
 8002308:	438a      	bics	r2, r1
 800230a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800230c:	f7fe fc32 	bl	8000b74 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002314:	e00a      	b.n	800232c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002316:	f7fe fc2d 	bl	8000b74 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad2      	subs	r2, r2, r3
 8002320:	23fa      	movs	r3, #250	; 0xfa
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d901      	bls.n	800232c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e006      	b.n	800233a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	4013      	ands	r3, r2
 8002336:	d0ee      	beq.n	8002316 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}

08002342 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	4013      	ands	r3, r2
 8002358:	d11a      	bne.n	8002390 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	4252      	negs	r2, r2
 8002362:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002364:	f7fe fc06 	bl	8000b74 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800236c:	e00a      	b.n	8002384 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800236e:	f7fe fc01 	bl	8000b74 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad2      	subs	r2, r2, r3
 8002378:	23fa      	movs	r3, #250	; 0xfa
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	429a      	cmp	r2, r3
 800237e:	d901      	bls.n	8002384 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e006      	b.n	8002392 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	4013      	ands	r3, r2
 800238e:	d0ee      	beq.n	800236e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}

0800239a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	0002      	movs	r2, r0
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80023aa:	e007      	b.n	80023bc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	1dfa      	adds	r2, r7, #7
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	3a0a      	subs	r2, #10
 80023ba:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	d8f3      	bhi.n	80023ac <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	1dfb      	adds	r3, r7, #7
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	b2db      	uxtb	r3, r3
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e044      	b.n	8002478 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2274      	movs	r2, #116	; 0x74
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f7fe fae5 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2224      	movs	r2, #36	; 0x24
 800240a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f830 	bl	8002484 <UART_SetConfig>
 8002424:	0003      	movs	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e024      	b.n	8002478 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f94d 	bl	80026d8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	490d      	ldr	r1, [pc, #52]	; (8002480 <HAL_UART_Init+0xa4>)
 800244a:	400a      	ands	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	212a      	movs	r1, #42	; 0x2a
 800245a:	438a      	bics	r2, r1
 800245c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f9e5 	bl	8002840 <UART_CheckIdleState>
 8002476:	0003      	movs	r3, r0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	ffffb7ff 	.word	0xffffb7ff

08002484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800248c:	231e      	movs	r3, #30
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a84      	ldr	r2, [pc, #528]	; (80026c4 <UART_SetConfig+0x240>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a7f      	ldr	r2, [pc, #508]	; (80026c8 <UART_SetConfig+0x244>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a76      	ldr	r2, [pc, #472]	; (80026cc <UART_SetConfig+0x248>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002500:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <UART_SetConfig+0x24c>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	2b03      	cmp	r3, #3
 800250a:	d00d      	beq.n	8002528 <UART_SetConfig+0xa4>
 800250c:	d81b      	bhi.n	8002546 <UART_SetConfig+0xc2>
 800250e:	2b02      	cmp	r3, #2
 8002510:	d014      	beq.n	800253c <UART_SetConfig+0xb8>
 8002512:	d818      	bhi.n	8002546 <UART_SetConfig+0xc2>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <UART_SetConfig+0x9a>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d00a      	beq.n	8002532 <UART_SetConfig+0xae>
 800251c:	e013      	b.n	8002546 <UART_SetConfig+0xc2>
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e012      	b.n	800254e <UART_SetConfig+0xca>
 8002528:	231f      	movs	r3, #31
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	2202      	movs	r2, #2
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e00d      	b.n	800254e <UART_SetConfig+0xca>
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2204      	movs	r2, #4
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e008      	b.n	800254e <UART_SetConfig+0xca>
 800253c:	231f      	movs	r3, #31
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2208      	movs	r2, #8
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e003      	b.n	800254e <UART_SetConfig+0xca>
 8002546:	231f      	movs	r3, #31
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2210      	movs	r2, #16
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	429a      	cmp	r2, r3
 800255a:	d15d      	bne.n	8002618 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 800255c:	231f      	movs	r3, #31
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d015      	beq.n	8002592 <UART_SetConfig+0x10e>
 8002566:	dc18      	bgt.n	800259a <UART_SetConfig+0x116>
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00d      	beq.n	8002588 <UART_SetConfig+0x104>
 800256c:	dc15      	bgt.n	800259a <UART_SetConfig+0x116>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <UART_SetConfig+0xf4>
 8002572:	2b02      	cmp	r3, #2
 8002574:	d005      	beq.n	8002582 <UART_SetConfig+0xfe>
 8002576:	e010      	b.n	800259a <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002578:	f7ff fbe0 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]
        break;
 8002580:	e012      	b.n	80025a8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002582:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <UART_SetConfig+0x250>)
 8002584:	61bb      	str	r3, [r7, #24]
        break;
 8002586:	e00f      	b.n	80025a8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002588:	f7ff fb6a 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 800258c:	0003      	movs	r3, r0
 800258e:	61bb      	str	r3, [r7, #24]
        break;
 8002590:	e00a      	b.n	80025a8 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	61bb      	str	r3, [r7, #24]
        break;
 8002598:	e006      	b.n	80025a8 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800259e:	231e      	movs	r3, #30
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
        break;
 80025a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d100      	bne.n	80025b0 <UART_SetConfig+0x12c>
 80025ae:	e07b      	b.n	80026a8 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	005a      	lsls	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	18d2      	adds	r2, r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	0019      	movs	r1, r3
 80025c2:	0010      	movs	r0, r2
 80025c4:	f7fd fdb2 	bl	800012c <__udivsi3>
 80025c8:	0003      	movs	r3, r0
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d91c      	bls.n	800260e <UART_SetConfig+0x18a>
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	025b      	lsls	r3, r3, #9
 80025da:	429a      	cmp	r2, r3
 80025dc:	d217      	bcs.n	800260e <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	200e      	movs	r0, #14
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	210f      	movs	r1, #15
 80025e8:	438a      	bics	r2, r1
 80025ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2207      	movs	r2, #7
 80025f4:	4013      	ands	r3, r2
 80025f6:	b299      	uxth	r1, r3
 80025f8:	183b      	adds	r3, r7, r0
 80025fa:	183a      	adds	r2, r7, r0
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	183a      	adds	r2, r7, r0
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	e04c      	b.n	80026a8 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800260e:	231e      	movs	r3, #30
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e047      	b.n	80026a8 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002618:	231f      	movs	r3, #31
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d015      	beq.n	800264e <UART_SetConfig+0x1ca>
 8002622:	dc18      	bgt.n	8002656 <UART_SetConfig+0x1d2>
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00d      	beq.n	8002644 <UART_SetConfig+0x1c0>
 8002628:	dc15      	bgt.n	8002656 <UART_SetConfig+0x1d2>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <UART_SetConfig+0x1b0>
 800262e:	2b02      	cmp	r3, #2
 8002630:	d005      	beq.n	800263e <UART_SetConfig+0x1ba>
 8002632:	e010      	b.n	8002656 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002634:	f7ff fb82 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8002638:	0003      	movs	r3, r0
 800263a:	61bb      	str	r3, [r7, #24]
        break;
 800263c:	e012      	b.n	8002664 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <UART_SetConfig+0x250>)
 8002640:	61bb      	str	r3, [r7, #24]
        break;
 8002642:	e00f      	b.n	8002664 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002644:	f7ff fb0c 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
        break;
 800264c:	e00a      	b.n	8002664 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	61bb      	str	r3, [r7, #24]
        break;
 8002654:	e006      	b.n	8002664 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800265a:	231e      	movs	r3, #30
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
        break;
 8002662:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01e      	beq.n	80026a8 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	085a      	lsrs	r2, r3, #1
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	18d2      	adds	r2, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0019      	movs	r1, r3
 800267a:	0010      	movs	r0, r2
 800267c:	f7fd fd56 	bl	800012c <__udivsi3>
 8002680:	0003      	movs	r3, r0
 8002682:	b29b      	uxth	r3, r3
 8002684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d909      	bls.n	80026a0 <UART_SetConfig+0x21c>
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	025b      	lsls	r3, r3, #9
 8002692:	429a      	cmp	r2, r3
 8002694:	d204      	bcs.n	80026a0 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e003      	b.n	80026a8 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80026a0:	231e      	movs	r3, #30
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026b4:	231e      	movs	r3, #30
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	781b      	ldrb	r3, [r3, #0]
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b008      	add	sp, #32
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	ffff69f3 	.word	0xffff69f3
 80026c8:	ffffcfff 	.word	0xffffcfff
 80026cc:	fffff4ff 	.word	0xfffff4ff
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	d00b      	beq.n	8002702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a4a      	ldr	r2, [pc, #296]	; (800281c <UART_AdvFeatureConfig+0x144>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2202      	movs	r2, #2
 8002708:	4013      	ands	r3, r2
 800270a:	d00b      	beq.n	8002724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a43      	ldr	r2, [pc, #268]	; (8002820 <UART_AdvFeatureConfig+0x148>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2204      	movs	r2, #4
 800272a:	4013      	ands	r3, r2
 800272c:	d00b      	beq.n	8002746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a3b      	ldr	r2, [pc, #236]	; (8002824 <UART_AdvFeatureConfig+0x14c>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2208      	movs	r2, #8
 800274c:	4013      	ands	r3, r2
 800274e:	d00b      	beq.n	8002768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <UART_AdvFeatureConfig+0x150>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2210      	movs	r2, #16
 800276e:	4013      	ands	r3, r2
 8002770:	d00b      	beq.n	800278a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a2c      	ldr	r2, [pc, #176]	; (800282c <UART_AdvFeatureConfig+0x154>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2220      	movs	r2, #32
 8002790:	4013      	ands	r3, r2
 8002792:	d00b      	beq.n	80027ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4a25      	ldr	r2, [pc, #148]	; (8002830 <UART_AdvFeatureConfig+0x158>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2240      	movs	r2, #64	; 0x40
 80027b2:	4013      	ands	r3, r2
 80027b4:	d01d      	beq.n	80027f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <UART_AdvFeatureConfig+0x15c>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	035b      	lsls	r3, r3, #13
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d10b      	bne.n	80027f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a15      	ldr	r2, [pc, #84]	; (8002838 <UART_AdvFeatureConfig+0x160>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	4013      	ands	r3, r2
 80027fa:	d00b      	beq.n	8002814 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <UART_AdvFeatureConfig+0x164>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
  }
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}
 800281c:	fffdffff 	.word	0xfffdffff
 8002820:	fffeffff 	.word	0xfffeffff
 8002824:	fffbffff 	.word	0xfffbffff
 8002828:	ffff7fff 	.word	0xffff7fff
 800282c:	ffffefff 	.word	0xffffefff
 8002830:	ffffdfff 	.word	0xffffdfff
 8002834:	ffefffff 	.word	0xffefffff
 8002838:	ff9fffff 	.word	0xff9fffff
 800283c:	fff7ffff 	.word	0xfff7ffff

08002840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	2100      	movs	r1, #0
 800284e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002850:	f7fe f990 	bl	8000b74 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2208      	movs	r2, #8
 8002860:	4013      	ands	r3, r2
 8002862:	2b08      	cmp	r3, #8
 8002864:	d10c      	bne.n	8002880 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2280      	movs	r2, #128	; 0x80
 800286a:	0391      	lsls	r1, r2, #14
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <UART_CheckIdleState+0x8c>)
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	f000 f82c 	bl	80028d0 <UART_WaitOnFlagUntilTimeout>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d001      	beq.n	8002880 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e021      	b.n	80028c4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2204      	movs	r2, #4
 8002888:	4013      	ands	r3, r2
 800288a:	2b04      	cmp	r3, #4
 800288c:	d10c      	bne.n	80028a8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	03d1      	lsls	r1, r2, #15
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <UART_CheckIdleState+0x8c>)
 8002898:	9200      	str	r2, [sp, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	f000 f818 	bl	80028d0 <UART_WaitOnFlagUntilTimeout>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e00d      	b.n	80028c4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2274      	movs	r2, #116	; 0x74
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	01ffffff 	.word	0x01ffffff

080028d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e0:	e05e      	b.n	80029a0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	3301      	adds	r3, #1
 80028e6:	d05b      	beq.n	80029a0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e8:	f7fe f944 	bl	8000b74 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11b      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	492f      	ldr	r1, [pc, #188]	; (80029c8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	438a      	bics	r2, r1
 800291c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2274      	movs	r2, #116	; 0x74
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e044      	b.n	80029c0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2204      	movs	r2, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d02e      	beq.n	80029a0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	401a      	ands	r2, r3
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	429a      	cmp	r2, r3
 8002954:	d124      	bne.n	80029a0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4917      	ldr	r1, [pc, #92]	; (80029c8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2101      	movs	r1, #1
 800297c:	438a      	bics	r2, r1
 800297e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	2120      	movs	r1, #32
 8002992:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2274      	movs	r2, #116	; 0x74
 8002998:	2100      	movs	r1, #0
 800299a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e00f      	b.n	80029c0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	425a      	negs	r2, r3
 80029b0:	4153      	adcs	r3, r2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	001a      	movs	r2, r3
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d091      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	fffffe5f 	.word	0xfffffe5f

080029cc <atoi>:
 80029cc:	b510      	push	{r4, lr}
 80029ce:	220a      	movs	r2, #10
 80029d0:	2100      	movs	r1, #0
 80029d2:	f000 f8e1 	bl	8002b98 <strtol>
 80029d6:	bd10      	pop	{r4, pc}

080029d8 <__errno>:
 80029d8:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <__errno+0x8>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	4770      	bx	lr
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2600      	movs	r6, #0
 80029e8:	4d0c      	ldr	r5, [pc, #48]	; (8002a1c <__libc_init_array+0x38>)
 80029ea:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ec:	1b64      	subs	r4, r4, r5
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	2600      	movs	r6, #0
 80029f6:	f000 fce1 	bl	80033bc <_init>
 80029fa:	4d0a      	ldr	r5, [pc, #40]	; (8002a24 <__libc_init_array+0x40>)
 80029fc:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <__libc_init_array+0x44>)
 80029fe:	1b64      	subs	r4, r4, r5
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	42a6      	cmp	r6, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	00b3      	lsls	r3, r6, #2
 8002a0a:	58eb      	ldr	r3, [r5, r3]
 8002a0c:	4798      	blx	r3
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	00b3      	lsls	r3, r6, #2
 8002a14:	58eb      	ldr	r3, [r5, r3]
 8002a16:	4798      	blx	r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08003550 	.word	0x08003550
 8002a20:	08003550 	.word	0x08003550
 8002a24:	08003550 	.word	0x08003550
 8002a28:	08003554 	.word	0x08003554

08002a2c <memset>:
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	1882      	adds	r2, r0, r2
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d100      	bne.n	8002a36 <memset+0xa>
 8002a34:	4770      	bx	lr
 8002a36:	7019      	strb	r1, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	e7f9      	b.n	8002a30 <memset+0x4>

08002a3c <siprintf>:
 8002a3c:	b40e      	push	{r1, r2, r3}
 8002a3e:	b500      	push	{lr}
 8002a40:	490b      	ldr	r1, [pc, #44]	; (8002a70 <siprintf+0x34>)
 8002a42:	b09c      	sub	sp, #112	; 0x70
 8002a44:	ab1d      	add	r3, sp, #116	; 0x74
 8002a46:	9002      	str	r0, [sp, #8]
 8002a48:	9006      	str	r0, [sp, #24]
 8002a4a:	9107      	str	r1, [sp, #28]
 8002a4c:	9104      	str	r1, [sp, #16]
 8002a4e:	4809      	ldr	r0, [pc, #36]	; (8002a74 <siprintf+0x38>)
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <siprintf+0x3c>)
 8002a52:	cb04      	ldmia	r3!, {r2}
 8002a54:	9105      	str	r1, [sp, #20]
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	a902      	add	r1, sp, #8
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	f000 f90a 	bl	8002c74 <_svfiprintf_r>
 8002a60:	2300      	movs	r3, #0
 8002a62:	9a02      	ldr	r2, [sp, #8]
 8002a64:	7013      	strb	r3, [r2, #0]
 8002a66:	b01c      	add	sp, #112	; 0x70
 8002a68:	bc08      	pop	{r3}
 8002a6a:	b003      	add	sp, #12
 8002a6c:	4718      	bx	r3
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	7fffffff 	.word	0x7fffffff
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	ffff0208 	.word	0xffff0208

08002a7c <_strtol_l.isra.0>:
 8002a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	001e      	movs	r6, r3
 8002a82:	9005      	str	r0, [sp, #20]
 8002a84:	9101      	str	r1, [sp, #4]
 8002a86:	9202      	str	r2, [sp, #8]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d045      	beq.n	8002b18 <_strtol_l.isra.0+0x9c>
 8002a8c:	0008      	movs	r0, r1
 8002a8e:	2b24      	cmp	r3, #36	; 0x24
 8002a90:	d842      	bhi.n	8002b18 <_strtol_l.isra.0+0x9c>
 8002a92:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <_strtol_l.isra.0+0x114>)
 8002a94:	2208      	movs	r2, #8
 8002a96:	469c      	mov	ip, r3
 8002a98:	0003      	movs	r3, r0
 8002a9a:	4661      	mov	r1, ip
 8002a9c:	781c      	ldrb	r4, [r3, #0]
 8002a9e:	1c45      	adds	r5, r0, #1
 8002aa0:	5d09      	ldrb	r1, [r1, r4]
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	000f      	movs	r7, r1
 8002aa6:	4017      	ands	r7, r2
 8002aa8:	4211      	tst	r1, r2
 8002aaa:	d1f5      	bne.n	8002a98 <_strtol_l.isra.0+0x1c>
 8002aac:	2c2d      	cmp	r4, #45	; 0x2d
 8002aae:	d13a      	bne.n	8002b26 <_strtol_l.isra.0+0xaa>
 8002ab0:	2701      	movs	r7, #1
 8002ab2:	782c      	ldrb	r4, [r5, #0]
 8002ab4:	1c9d      	adds	r5, r3, #2
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d065      	beq.n	8002b86 <_strtol_l.isra.0+0x10a>
 8002aba:	2e10      	cmp	r6, #16
 8002abc:	d109      	bne.n	8002ad2 <_strtol_l.isra.0+0x56>
 8002abe:	2c30      	cmp	r4, #48	; 0x30
 8002ac0:	d107      	bne.n	8002ad2 <_strtol_l.isra.0+0x56>
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	782b      	ldrb	r3, [r5, #0]
 8002ac6:	4393      	bics	r3, r2
 8002ac8:	2b58      	cmp	r3, #88	; 0x58
 8002aca:	d157      	bne.n	8002b7c <_strtol_l.isra.0+0x100>
 8002acc:	2610      	movs	r6, #16
 8002ace:	786c      	ldrb	r4, [r5, #1]
 8002ad0:	3502      	adds	r5, #2
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <_strtol_l.isra.0+0x118>)
 8002ad4:	0031      	movs	r1, r6
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	0018      	movs	r0, r3
 8002ada:	9303      	str	r3, [sp, #12]
 8002adc:	f7fd fbac 	bl	8000238 <__aeabi_uidivmod>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4684      	mov	ip, r0
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	9104      	str	r1, [sp, #16]
 8002aea:	4252      	negs	r2, r2
 8002aec:	0021      	movs	r1, r4
 8002aee:	3930      	subs	r1, #48	; 0x30
 8002af0:	2909      	cmp	r1, #9
 8002af2:	d81d      	bhi.n	8002b30 <_strtol_l.isra.0+0xb4>
 8002af4:	000c      	movs	r4, r1
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	dd28      	ble.n	8002b4c <_strtol_l.isra.0+0xd0>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db24      	blt.n	8002b48 <_strtol_l.isra.0+0xcc>
 8002afe:	0013      	movs	r3, r2
 8002b00:	4584      	cmp	ip, r0
 8002b02:	d306      	bcc.n	8002b12 <_strtol_l.isra.0+0x96>
 8002b04:	d102      	bne.n	8002b0c <_strtol_l.isra.0+0x90>
 8002b06:	9904      	ldr	r1, [sp, #16]
 8002b08:	42a1      	cmp	r1, r4
 8002b0a:	db02      	blt.n	8002b12 <_strtol_l.isra.0+0x96>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	4370      	muls	r0, r6
 8002b10:	1820      	adds	r0, r4, r0
 8002b12:	782c      	ldrb	r4, [r5, #0]
 8002b14:	3501      	adds	r5, #1
 8002b16:	e7e9      	b.n	8002aec <_strtol_l.isra.0+0x70>
 8002b18:	f7ff ff5e 	bl	80029d8 <__errno>
 8002b1c:	2316      	movs	r3, #22
 8002b1e:	6003      	str	r3, [r0, #0]
 8002b20:	2000      	movs	r0, #0
 8002b22:	b007      	add	sp, #28
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	2c2b      	cmp	r4, #43	; 0x2b
 8002b28:	d1c5      	bne.n	8002ab6 <_strtol_l.isra.0+0x3a>
 8002b2a:	782c      	ldrb	r4, [r5, #0]
 8002b2c:	1c9d      	adds	r5, r3, #2
 8002b2e:	e7c2      	b.n	8002ab6 <_strtol_l.isra.0+0x3a>
 8002b30:	0021      	movs	r1, r4
 8002b32:	3941      	subs	r1, #65	; 0x41
 8002b34:	2919      	cmp	r1, #25
 8002b36:	d801      	bhi.n	8002b3c <_strtol_l.isra.0+0xc0>
 8002b38:	3c37      	subs	r4, #55	; 0x37
 8002b3a:	e7dc      	b.n	8002af6 <_strtol_l.isra.0+0x7a>
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	3961      	subs	r1, #97	; 0x61
 8002b40:	2919      	cmp	r1, #25
 8002b42:	d803      	bhi.n	8002b4c <_strtol_l.isra.0+0xd0>
 8002b44:	3c57      	subs	r4, #87	; 0x57
 8002b46:	e7d6      	b.n	8002af6 <_strtol_l.isra.0+0x7a>
 8002b48:	0013      	movs	r3, r2
 8002b4a:	e7e2      	b.n	8002b12 <_strtol_l.isra.0+0x96>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da09      	bge.n	8002b64 <_strtol_l.isra.0+0xe8>
 8002b50:	2322      	movs	r3, #34	; 0x22
 8002b52:	9a05      	ldr	r2, [sp, #20]
 8002b54:	9803      	ldr	r0, [sp, #12]
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	9b02      	ldr	r3, [sp, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0e1      	beq.n	8002b22 <_strtol_l.isra.0+0xa6>
 8002b5e:	1e6b      	subs	r3, r5, #1
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	e007      	b.n	8002b74 <_strtol_l.isra.0+0xf8>
 8002b64:	2f00      	cmp	r7, #0
 8002b66:	d000      	beq.n	8002b6a <_strtol_l.isra.0+0xee>
 8002b68:	4240      	negs	r0, r0
 8002b6a:	9a02      	ldr	r2, [sp, #8]
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	d0d8      	beq.n	8002b22 <_strtol_l.isra.0+0xa6>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f4      	bne.n	8002b5e <_strtol_l.isra.0+0xe2>
 8002b74:	9b02      	ldr	r3, [sp, #8]
 8002b76:	9a01      	ldr	r2, [sp, #4]
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e7d2      	b.n	8002b22 <_strtol_l.isra.0+0xa6>
 8002b7c:	2430      	movs	r4, #48	; 0x30
 8002b7e:	2e00      	cmp	r6, #0
 8002b80:	d1a7      	bne.n	8002ad2 <_strtol_l.isra.0+0x56>
 8002b82:	3608      	adds	r6, #8
 8002b84:	e7a5      	b.n	8002ad2 <_strtol_l.isra.0+0x56>
 8002b86:	2c30      	cmp	r4, #48	; 0x30
 8002b88:	d09b      	beq.n	8002ac2 <_strtol_l.isra.0+0x46>
 8002b8a:	260a      	movs	r6, #10
 8002b8c:	e7a1      	b.n	8002ad2 <_strtol_l.isra.0+0x56>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	0800341d 	.word	0x0800341d
 8002b94:	7fffffff 	.word	0x7fffffff

08002b98 <strtol>:
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	0013      	movs	r3, r2
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	0001      	movs	r1, r0
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <strtol+0x14>)
 8002ba2:	6800      	ldr	r0, [r0, #0]
 8002ba4:	f7ff ff6a 	bl	8002a7c <_strtol_l.isra.0>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	2000000c 	.word	0x2000000c

08002bb0 <__ssputs_r>:
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	688e      	ldr	r6, [r1, #8]
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	0007      	movs	r7, r0
 8002bb8:	000c      	movs	r4, r1
 8002bba:	9203      	str	r2, [sp, #12]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	429e      	cmp	r6, r3
 8002bc0:	d83c      	bhi.n	8002c3c <__ssputs_r+0x8c>
 8002bc2:	2390      	movs	r3, #144	; 0x90
 8002bc4:	898a      	ldrh	r2, [r1, #12]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	421a      	tst	r2, r3
 8002bca:	d034      	beq.n	8002c36 <__ssputs_r+0x86>
 8002bcc:	2503      	movs	r5, #3
 8002bce:	6909      	ldr	r1, [r1, #16]
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	1a5b      	subs	r3, r3, r1
 8002bd4:	9302      	str	r3, [sp, #8]
 8002bd6:	6963      	ldr	r3, [r4, #20]
 8002bd8:	9802      	ldr	r0, [sp, #8]
 8002bda:	435d      	muls	r5, r3
 8002bdc:	0feb      	lsrs	r3, r5, #31
 8002bde:	195d      	adds	r5, r3, r5
 8002be0:	9b01      	ldr	r3, [sp, #4]
 8002be2:	106d      	asrs	r5, r5, #1
 8002be4:	3301      	adds	r3, #1
 8002be6:	181b      	adds	r3, r3, r0
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	d900      	bls.n	8002bee <__ssputs_r+0x3e>
 8002bec:	001d      	movs	r5, r3
 8002bee:	0553      	lsls	r3, r2, #21
 8002bf0:	d532      	bpl.n	8002c58 <__ssputs_r+0xa8>
 8002bf2:	0029      	movs	r1, r5
 8002bf4:	0038      	movs	r0, r7
 8002bf6:	f000 fb31 	bl	800325c <_malloc_r>
 8002bfa:	1e06      	subs	r6, r0, #0
 8002bfc:	d109      	bne.n	8002c12 <__ssputs_r+0x62>
 8002bfe:	230c      	movs	r3, #12
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	2340      	movs	r3, #64	; 0x40
 8002c04:	2001      	movs	r0, #1
 8002c06:	89a2      	ldrh	r2, [r4, #12]
 8002c08:	4240      	negs	r0, r0
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	b005      	add	sp, #20
 8002c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c12:	9a02      	ldr	r2, [sp, #8]
 8002c14:	6921      	ldr	r1, [r4, #16]
 8002c16:	f000 faba 	bl	800318e <memcpy>
 8002c1a:	89a3      	ldrh	r3, [r4, #12]
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <__ssputs_r+0xc0>)
 8002c1e:	401a      	ands	r2, r3
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	4313      	orrs	r3, r2
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	9b02      	ldr	r3, [sp, #8]
 8002c28:	6126      	str	r6, [r4, #16]
 8002c2a:	18f6      	adds	r6, r6, r3
 8002c2c:	6026      	str	r6, [r4, #0]
 8002c2e:	6165      	str	r5, [r4, #20]
 8002c30:	9e01      	ldr	r6, [sp, #4]
 8002c32:	1aed      	subs	r5, r5, r3
 8002c34:	60a5      	str	r5, [r4, #8]
 8002c36:	9b01      	ldr	r3, [sp, #4]
 8002c38:	429e      	cmp	r6, r3
 8002c3a:	d900      	bls.n	8002c3e <__ssputs_r+0x8e>
 8002c3c:	9e01      	ldr	r6, [sp, #4]
 8002c3e:	0032      	movs	r2, r6
 8002c40:	9903      	ldr	r1, [sp, #12]
 8002c42:	6820      	ldr	r0, [r4, #0]
 8002c44:	f000 faac 	bl	80031a0 <memmove>
 8002c48:	68a3      	ldr	r3, [r4, #8]
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	1b9b      	subs	r3, r3, r6
 8002c4e:	60a3      	str	r3, [r4, #8]
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	199e      	adds	r6, r3, r6
 8002c54:	6026      	str	r6, [r4, #0]
 8002c56:	e7da      	b.n	8002c0e <__ssputs_r+0x5e>
 8002c58:	002a      	movs	r2, r5
 8002c5a:	0038      	movs	r0, r7
 8002c5c:	f000 fb5c 	bl	8003318 <_realloc_r>
 8002c60:	1e06      	subs	r6, r0, #0
 8002c62:	d1e0      	bne.n	8002c26 <__ssputs_r+0x76>
 8002c64:	0038      	movs	r0, r7
 8002c66:	6921      	ldr	r1, [r4, #16]
 8002c68:	f000 faae 	bl	80031c8 <_free_r>
 8002c6c:	e7c7      	b.n	8002bfe <__ssputs_r+0x4e>
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	fffffb7f 	.word	0xfffffb7f

08002c74 <_svfiprintf_r>:
 8002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c76:	b0a1      	sub	sp, #132	; 0x84
 8002c78:	9003      	str	r0, [sp, #12]
 8002c7a:	001d      	movs	r5, r3
 8002c7c:	898b      	ldrh	r3, [r1, #12]
 8002c7e:	000f      	movs	r7, r1
 8002c80:	0016      	movs	r6, r2
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	d511      	bpl.n	8002caa <_svfiprintf_r+0x36>
 8002c86:	690b      	ldr	r3, [r1, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10e      	bne.n	8002caa <_svfiprintf_r+0x36>
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	f000 fae5 	bl	800325c <_malloc_r>
 8002c92:	6038      	str	r0, [r7, #0]
 8002c94:	6138      	str	r0, [r7, #16]
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d105      	bne.n	8002ca6 <_svfiprintf_r+0x32>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	9a03      	ldr	r2, [sp, #12]
 8002c9e:	3801      	subs	r0, #1
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	b021      	add	sp, #132	; 0x84
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca6:	2340      	movs	r3, #64	; 0x40
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	2300      	movs	r3, #0
 8002cac:	ac08      	add	r4, sp, #32
 8002cae:	6163      	str	r3, [r4, #20]
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	7663      	strb	r3, [r4, #25]
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	76a3      	strb	r3, [r4, #26]
 8002cb8:	9507      	str	r5, [sp, #28]
 8002cba:	0035      	movs	r5, r6
 8002cbc:	782b      	ldrb	r3, [r5, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <_svfiprintf_r+0x52>
 8002cc2:	2b25      	cmp	r3, #37	; 0x25
 8002cc4:	d147      	bne.n	8002d56 <_svfiprintf_r+0xe2>
 8002cc6:	1bab      	subs	r3, r5, r6
 8002cc8:	9305      	str	r3, [sp, #20]
 8002cca:	42b5      	cmp	r5, r6
 8002ccc:	d00c      	beq.n	8002ce8 <_svfiprintf_r+0x74>
 8002cce:	0032      	movs	r2, r6
 8002cd0:	0039      	movs	r1, r7
 8002cd2:	9803      	ldr	r0, [sp, #12]
 8002cd4:	f7ff ff6c 	bl	8002bb0 <__ssputs_r>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d100      	bne.n	8002cde <_svfiprintf_r+0x6a>
 8002cdc:	e0ae      	b.n	8002e3c <_svfiprintf_r+0x1c8>
 8002cde:	6962      	ldr	r2, [r4, #20]
 8002ce0:	9b05      	ldr	r3, [sp, #20]
 8002ce2:	4694      	mov	ip, r2
 8002ce4:	4463      	add	r3, ip
 8002ce6:	6163      	str	r3, [r4, #20]
 8002ce8:	782b      	ldrb	r3, [r5, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d100      	bne.n	8002cf0 <_svfiprintf_r+0x7c>
 8002cee:	e0a5      	b.n	8002e3c <_svfiprintf_r+0x1c8>
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	4252      	negs	r2, r2
 8002cf6:	6062      	str	r2, [r4, #4]
 8002cf8:	a904      	add	r1, sp, #16
 8002cfa:	3254      	adds	r2, #84	; 0x54
 8002cfc:	1852      	adds	r2, r2, r1
 8002cfe:	1c6e      	adds	r6, r5, #1
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	60e3      	str	r3, [r4, #12]
 8002d04:	60a3      	str	r3, [r4, #8]
 8002d06:	7013      	strb	r3, [r2, #0]
 8002d08:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	7831      	ldrb	r1, [r6, #0]
 8002d0e:	4854      	ldr	r0, [pc, #336]	; (8002e60 <_svfiprintf_r+0x1ec>)
 8002d10:	f000 fa32 	bl	8003178 <memchr>
 8002d14:	1c75      	adds	r5, r6, #1
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d11f      	bne.n	8002d5a <_svfiprintf_r+0xe6>
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	06d3      	lsls	r3, r2, #27
 8002d1e:	d504      	bpl.n	8002d2a <_svfiprintf_r+0xb6>
 8002d20:	2353      	movs	r3, #83	; 0x53
 8002d22:	a904      	add	r1, sp, #16
 8002d24:	185b      	adds	r3, r3, r1
 8002d26:	2120      	movs	r1, #32
 8002d28:	7019      	strb	r1, [r3, #0]
 8002d2a:	0713      	lsls	r3, r2, #28
 8002d2c:	d504      	bpl.n	8002d38 <_svfiprintf_r+0xc4>
 8002d2e:	2353      	movs	r3, #83	; 0x53
 8002d30:	a904      	add	r1, sp, #16
 8002d32:	185b      	adds	r3, r3, r1
 8002d34:	212b      	movs	r1, #43	; 0x2b
 8002d36:	7019      	strb	r1, [r3, #0]
 8002d38:	7833      	ldrb	r3, [r6, #0]
 8002d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3c:	d016      	beq.n	8002d6c <_svfiprintf_r+0xf8>
 8002d3e:	0035      	movs	r5, r6
 8002d40:	2100      	movs	r1, #0
 8002d42:	200a      	movs	r0, #10
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	782a      	ldrb	r2, [r5, #0]
 8002d48:	1c6e      	adds	r6, r5, #1
 8002d4a:	3a30      	subs	r2, #48	; 0x30
 8002d4c:	2a09      	cmp	r2, #9
 8002d4e:	d94e      	bls.n	8002dee <_svfiprintf_r+0x17a>
 8002d50:	2900      	cmp	r1, #0
 8002d52:	d111      	bne.n	8002d78 <_svfiprintf_r+0x104>
 8002d54:	e017      	b.n	8002d86 <_svfiprintf_r+0x112>
 8002d56:	3501      	adds	r5, #1
 8002d58:	e7b0      	b.n	8002cbc <_svfiprintf_r+0x48>
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <_svfiprintf_r+0x1ec>)
 8002d5c:	6822      	ldr	r2, [r4, #0]
 8002d5e:	1ac0      	subs	r0, r0, r3
 8002d60:	2301      	movs	r3, #1
 8002d62:	4083      	lsls	r3, r0
 8002d64:	4313      	orrs	r3, r2
 8002d66:	002e      	movs	r6, r5
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	e7ce      	b.n	8002d0a <_svfiprintf_r+0x96>
 8002d6c:	9b07      	ldr	r3, [sp, #28]
 8002d6e:	1d19      	adds	r1, r3, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	9107      	str	r1, [sp, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db01      	blt.n	8002d7c <_svfiprintf_r+0x108>
 8002d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d7a:	e004      	b.n	8002d86 <_svfiprintf_r+0x112>
 8002d7c:	425b      	negs	r3, r3
 8002d7e:	60e3      	str	r3, [r4, #12]
 8002d80:	2302      	movs	r3, #2
 8002d82:	4313      	orrs	r3, r2
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	782b      	ldrb	r3, [r5, #0]
 8002d88:	2b2e      	cmp	r3, #46	; 0x2e
 8002d8a:	d10a      	bne.n	8002da2 <_svfiprintf_r+0x12e>
 8002d8c:	786b      	ldrb	r3, [r5, #1]
 8002d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d90:	d135      	bne.n	8002dfe <_svfiprintf_r+0x18a>
 8002d92:	9b07      	ldr	r3, [sp, #28]
 8002d94:	3502      	adds	r5, #2
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	9207      	str	r2, [sp, #28]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	db2b      	blt.n	8002df8 <_svfiprintf_r+0x184>
 8002da0:	9309      	str	r3, [sp, #36]	; 0x24
 8002da2:	4e30      	ldr	r6, [pc, #192]	; (8002e64 <_svfiprintf_r+0x1f0>)
 8002da4:	2203      	movs	r2, #3
 8002da6:	0030      	movs	r0, r6
 8002da8:	7829      	ldrb	r1, [r5, #0]
 8002daa:	f000 f9e5 	bl	8003178 <memchr>
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d006      	beq.n	8002dc0 <_svfiprintf_r+0x14c>
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	1b80      	subs	r0, r0, r6
 8002db6:	4083      	lsls	r3, r0
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	3501      	adds	r5, #1
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	7829      	ldrb	r1, [r5, #0]
 8002dc2:	2206      	movs	r2, #6
 8002dc4:	4828      	ldr	r0, [pc, #160]	; (8002e68 <_svfiprintf_r+0x1f4>)
 8002dc6:	1c6e      	adds	r6, r5, #1
 8002dc8:	7621      	strb	r1, [r4, #24]
 8002dca:	f000 f9d5 	bl	8003178 <memchr>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d03c      	beq.n	8002e4c <_svfiprintf_r+0x1d8>
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <_svfiprintf_r+0x1f8>)
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d125      	bne.n	8002e24 <_svfiprintf_r+0x1b0>
 8002dd8:	2207      	movs	r2, #7
 8002dda:	9b07      	ldr	r3, [sp, #28]
 8002ddc:	3307      	adds	r3, #7
 8002dde:	4393      	bics	r3, r2
 8002de0:	3308      	adds	r3, #8
 8002de2:	9307      	str	r3, [sp, #28]
 8002de4:	6963      	ldr	r3, [r4, #20]
 8002de6:	9a04      	ldr	r2, [sp, #16]
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	6163      	str	r3, [r4, #20]
 8002dec:	e765      	b.n	8002cba <_svfiprintf_r+0x46>
 8002dee:	4343      	muls	r3, r0
 8002df0:	0035      	movs	r5, r6
 8002df2:	2101      	movs	r1, #1
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	e7a6      	b.n	8002d46 <_svfiprintf_r+0xd2>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	425b      	negs	r3, r3
 8002dfc:	e7d0      	b.n	8002da0 <_svfiprintf_r+0x12c>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	200a      	movs	r0, #10
 8002e02:	001a      	movs	r2, r3
 8002e04:	3501      	adds	r5, #1
 8002e06:	6063      	str	r3, [r4, #4]
 8002e08:	7829      	ldrb	r1, [r5, #0]
 8002e0a:	1c6e      	adds	r6, r5, #1
 8002e0c:	3930      	subs	r1, #48	; 0x30
 8002e0e:	2909      	cmp	r1, #9
 8002e10:	d903      	bls.n	8002e1a <_svfiprintf_r+0x1a6>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0c5      	beq.n	8002da2 <_svfiprintf_r+0x12e>
 8002e16:	9209      	str	r2, [sp, #36]	; 0x24
 8002e18:	e7c3      	b.n	8002da2 <_svfiprintf_r+0x12e>
 8002e1a:	4342      	muls	r2, r0
 8002e1c:	0035      	movs	r5, r6
 8002e1e:	2301      	movs	r3, #1
 8002e20:	1852      	adds	r2, r2, r1
 8002e22:	e7f1      	b.n	8002e08 <_svfiprintf_r+0x194>
 8002e24:	ab07      	add	r3, sp, #28
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	003a      	movs	r2, r7
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <_svfiprintf_r+0x1fc>)
 8002e2e:	9803      	ldr	r0, [sp, #12]
 8002e30:	e000      	b.n	8002e34 <_svfiprintf_r+0x1c0>
 8002e32:	bf00      	nop
 8002e34:	9004      	str	r0, [sp, #16]
 8002e36:	9b04      	ldr	r3, [sp, #16]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	d1d3      	bne.n	8002de4 <_svfiprintf_r+0x170>
 8002e3c:	89bb      	ldrh	r3, [r7, #12]
 8002e3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e40:	065b      	lsls	r3, r3, #25
 8002e42:	d400      	bmi.n	8002e46 <_svfiprintf_r+0x1d2>
 8002e44:	e72d      	b.n	8002ca2 <_svfiprintf_r+0x2e>
 8002e46:	2001      	movs	r0, #1
 8002e48:	4240      	negs	r0, r0
 8002e4a:	e72a      	b.n	8002ca2 <_svfiprintf_r+0x2e>
 8002e4c:	ab07      	add	r3, sp, #28
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	003a      	movs	r2, r7
 8002e52:	0021      	movs	r1, r4
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <_svfiprintf_r+0x1fc>)
 8002e56:	9803      	ldr	r0, [sp, #12]
 8002e58:	f000 f87c 	bl	8002f54 <_printf_i>
 8002e5c:	e7ea      	b.n	8002e34 <_svfiprintf_r+0x1c0>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0800351d 	.word	0x0800351d
 8002e64:	08003523 	.word	0x08003523
 8002e68:	08003527 	.word	0x08003527
 8002e6c:	00000000 	.word	0x00000000
 8002e70:	08002bb1 	.word	0x08002bb1

08002e74 <_printf_common>:
 8002e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e76:	0015      	movs	r5, r2
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	688a      	ldr	r2, [r1, #8]
 8002e7c:	690b      	ldr	r3, [r1, #16]
 8002e7e:	000c      	movs	r4, r1
 8002e80:	9000      	str	r0, [sp, #0]
 8002e82:	4293      	cmp	r3, r2
 8002e84:	da00      	bge.n	8002e88 <_printf_common+0x14>
 8002e86:	0013      	movs	r3, r2
 8002e88:	0022      	movs	r2, r4
 8002e8a:	602b      	str	r3, [r5, #0]
 8002e8c:	3243      	adds	r2, #67	; 0x43
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d001      	beq.n	8002e98 <_printf_common+0x24>
 8002e94:	3301      	adds	r3, #1
 8002e96:	602b      	str	r3, [r5, #0]
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	d502      	bpl.n	8002ea4 <_printf_common+0x30>
 8002e9e:	682b      	ldr	r3, [r5, #0]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	0017      	movs	r7, r2
 8002eaa:	401f      	ands	r7, r3
 8002eac:	421a      	tst	r2, r3
 8002eae:	d027      	beq.n	8002f00 <_printf_common+0x8c>
 8002eb0:	0023      	movs	r3, r4
 8002eb2:	3343      	adds	r3, #67	; 0x43
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	4193      	sbcs	r3, r2
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	0692      	lsls	r2, r2, #26
 8002ebe:	d430      	bmi.n	8002f22 <_printf_common+0xae>
 8002ec0:	0022      	movs	r2, r4
 8002ec2:	9901      	ldr	r1, [sp, #4]
 8002ec4:	9800      	ldr	r0, [sp, #0]
 8002ec6:	9e08      	ldr	r6, [sp, #32]
 8002ec8:	3243      	adds	r2, #67	; 0x43
 8002eca:	47b0      	blx	r6
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d025      	beq.n	8002f1c <_printf_common+0xa8>
 8002ed0:	2306      	movs	r3, #6
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	682a      	ldr	r2, [r5, #0]
 8002ed6:	68e1      	ldr	r1, [r4, #12]
 8002ed8:	2500      	movs	r5, #0
 8002eda:	4003      	ands	r3, r0
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d103      	bne.n	8002ee8 <_printf_common+0x74>
 8002ee0:	1a8d      	subs	r5, r1, r2
 8002ee2:	43eb      	mvns	r3, r5
 8002ee4:	17db      	asrs	r3, r3, #31
 8002ee6:	401d      	ands	r5, r3
 8002ee8:	68a3      	ldr	r3, [r4, #8]
 8002eea:	6922      	ldr	r2, [r4, #16]
 8002eec:	4293      	cmp	r3, r2
 8002eee:	dd01      	ble.n	8002ef4 <_printf_common+0x80>
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	18ed      	adds	r5, r5, r3
 8002ef4:	2700      	movs	r7, #0
 8002ef6:	42bd      	cmp	r5, r7
 8002ef8:	d120      	bne.n	8002f3c <_printf_common+0xc8>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e010      	b.n	8002f20 <_printf_common+0xac>
 8002efe:	3701      	adds	r7, #1
 8002f00:	68e3      	ldr	r3, [r4, #12]
 8002f02:	682a      	ldr	r2, [r5, #0]
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	42bb      	cmp	r3, r7
 8002f08:	ddd2      	ble.n	8002eb0 <_printf_common+0x3c>
 8002f0a:	0022      	movs	r2, r4
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	9901      	ldr	r1, [sp, #4]
 8002f10:	9800      	ldr	r0, [sp, #0]
 8002f12:	9e08      	ldr	r6, [sp, #32]
 8002f14:	3219      	adds	r2, #25
 8002f16:	47b0      	blx	r6
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d1f0      	bne.n	8002efe <_printf_common+0x8a>
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	4240      	negs	r0, r0
 8002f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f22:	2030      	movs	r0, #48	; 0x30
 8002f24:	18e1      	adds	r1, r4, r3
 8002f26:	3143      	adds	r1, #67	; 0x43
 8002f28:	7008      	strb	r0, [r1, #0]
 8002f2a:	0021      	movs	r1, r4
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	3145      	adds	r1, #69	; 0x45
 8002f30:	7809      	ldrb	r1, [r1, #0]
 8002f32:	18a2      	adds	r2, r4, r2
 8002f34:	3243      	adds	r2, #67	; 0x43
 8002f36:	3302      	adds	r3, #2
 8002f38:	7011      	strb	r1, [r2, #0]
 8002f3a:	e7c1      	b.n	8002ec0 <_printf_common+0x4c>
 8002f3c:	0022      	movs	r2, r4
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9901      	ldr	r1, [sp, #4]
 8002f42:	9800      	ldr	r0, [sp, #0]
 8002f44:	9e08      	ldr	r6, [sp, #32]
 8002f46:	321a      	adds	r2, #26
 8002f48:	47b0      	blx	r6
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	d0e6      	beq.n	8002f1c <_printf_common+0xa8>
 8002f4e:	3701      	adds	r7, #1
 8002f50:	e7d1      	b.n	8002ef6 <_printf_common+0x82>
	...

08002f54 <_printf_i>:
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b08b      	sub	sp, #44	; 0x2c
 8002f58:	9206      	str	r2, [sp, #24]
 8002f5a:	000a      	movs	r2, r1
 8002f5c:	3243      	adds	r2, #67	; 0x43
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	9005      	str	r0, [sp, #20]
 8002f62:	9204      	str	r2, [sp, #16]
 8002f64:	7e0a      	ldrb	r2, [r1, #24]
 8002f66:	000c      	movs	r4, r1
 8002f68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f6a:	2a78      	cmp	r2, #120	; 0x78
 8002f6c:	d806      	bhi.n	8002f7c <_printf_i+0x28>
 8002f6e:	2a62      	cmp	r2, #98	; 0x62
 8002f70:	d808      	bhi.n	8002f84 <_printf_i+0x30>
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	d100      	bne.n	8002f78 <_printf_i+0x24>
 8002f76:	e0c0      	b.n	80030fa <_printf_i+0x1a6>
 8002f78:	2a58      	cmp	r2, #88	; 0x58
 8002f7a:	d052      	beq.n	8003022 <_printf_i+0xce>
 8002f7c:	0026      	movs	r6, r4
 8002f7e:	3642      	adds	r6, #66	; 0x42
 8002f80:	7032      	strb	r2, [r6, #0]
 8002f82:	e022      	b.n	8002fca <_printf_i+0x76>
 8002f84:	0010      	movs	r0, r2
 8002f86:	3863      	subs	r0, #99	; 0x63
 8002f88:	2815      	cmp	r0, #21
 8002f8a:	d8f7      	bhi.n	8002f7c <_printf_i+0x28>
 8002f8c:	f7fd f8c4 	bl	8000118 <__gnu_thumb1_case_shi>
 8002f90:	001f0016 	.word	0x001f0016
 8002f94:	fff6fff6 	.word	0xfff6fff6
 8002f98:	fff6fff6 	.word	0xfff6fff6
 8002f9c:	fff6001f 	.word	0xfff6001f
 8002fa0:	fff6fff6 	.word	0xfff6fff6
 8002fa4:	00a8fff6 	.word	0x00a8fff6
 8002fa8:	009a0036 	.word	0x009a0036
 8002fac:	fff6fff6 	.word	0xfff6fff6
 8002fb0:	fff600b9 	.word	0xfff600b9
 8002fb4:	fff60036 	.word	0xfff60036
 8002fb8:	009efff6 	.word	0x009efff6
 8002fbc:	0026      	movs	r6, r4
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	3642      	adds	r6, #66	; 0x42
 8002fc2:	1d11      	adds	r1, r2, #4
 8002fc4:	6019      	str	r1, [r3, #0]
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	7033      	strb	r3, [r6, #0]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0a7      	b.n	800311e <_printf_i+0x1ca>
 8002fce:	6808      	ldr	r0, [r1, #0]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	1d0a      	adds	r2, r1, #4
 8002fd4:	0605      	lsls	r5, r0, #24
 8002fd6:	d50b      	bpl.n	8002ff0 <_printf_i+0x9c>
 8002fd8:	680d      	ldr	r5, [r1, #0]
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	da03      	bge.n	8002fe8 <_printf_i+0x94>
 8002fe0:	232d      	movs	r3, #45	; 0x2d
 8002fe2:	9a04      	ldr	r2, [sp, #16]
 8002fe4:	426d      	negs	r5, r5
 8002fe6:	7013      	strb	r3, [r2, #0]
 8002fe8:	4b61      	ldr	r3, [pc, #388]	; (8003170 <_printf_i+0x21c>)
 8002fea:	270a      	movs	r7, #10
 8002fec:	9303      	str	r3, [sp, #12]
 8002fee:	e032      	b.n	8003056 <_printf_i+0x102>
 8002ff0:	680d      	ldr	r5, [r1, #0]
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	0641      	lsls	r1, r0, #25
 8002ff6:	d5f1      	bpl.n	8002fdc <_printf_i+0x88>
 8002ff8:	b22d      	sxth	r5, r5
 8002ffa:	e7ef      	b.n	8002fdc <_printf_i+0x88>
 8002ffc:	680d      	ldr	r5, [r1, #0]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	1d08      	adds	r0, r1, #4
 8003002:	6018      	str	r0, [r3, #0]
 8003004:	062e      	lsls	r6, r5, #24
 8003006:	d501      	bpl.n	800300c <_printf_i+0xb8>
 8003008:	680d      	ldr	r5, [r1, #0]
 800300a:	e003      	b.n	8003014 <_printf_i+0xc0>
 800300c:	066d      	lsls	r5, r5, #25
 800300e:	d5fb      	bpl.n	8003008 <_printf_i+0xb4>
 8003010:	680d      	ldr	r5, [r1, #0]
 8003012:	b2ad      	uxth	r5, r5
 8003014:	4b56      	ldr	r3, [pc, #344]	; (8003170 <_printf_i+0x21c>)
 8003016:	270a      	movs	r7, #10
 8003018:	9303      	str	r3, [sp, #12]
 800301a:	2a6f      	cmp	r2, #111	; 0x6f
 800301c:	d117      	bne.n	800304e <_printf_i+0xfa>
 800301e:	2708      	movs	r7, #8
 8003020:	e015      	b.n	800304e <_printf_i+0xfa>
 8003022:	3145      	adds	r1, #69	; 0x45
 8003024:	700a      	strb	r2, [r1, #0]
 8003026:	4a52      	ldr	r2, [pc, #328]	; (8003170 <_printf_i+0x21c>)
 8003028:	9203      	str	r2, [sp, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6821      	ldr	r1, [r4, #0]
 800302e:	ca20      	ldmia	r2!, {r5}
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	0608      	lsls	r0, r1, #24
 8003034:	d550      	bpl.n	80030d8 <_printf_i+0x184>
 8003036:	07cb      	lsls	r3, r1, #31
 8003038:	d502      	bpl.n	8003040 <_printf_i+0xec>
 800303a:	2320      	movs	r3, #32
 800303c:	4319      	orrs	r1, r3
 800303e:	6021      	str	r1, [r4, #0]
 8003040:	2710      	movs	r7, #16
 8003042:	2d00      	cmp	r5, #0
 8003044:	d103      	bne.n	800304e <_printf_i+0xfa>
 8003046:	2320      	movs	r3, #32
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	439a      	bics	r2, r3
 800304c:	6022      	str	r2, [r4, #0]
 800304e:	0023      	movs	r3, r4
 8003050:	2200      	movs	r2, #0
 8003052:	3343      	adds	r3, #67	; 0x43
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	60a3      	str	r3, [r4, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db03      	blt.n	8003066 <_printf_i+0x112>
 800305e:	2204      	movs	r2, #4
 8003060:	6821      	ldr	r1, [r4, #0]
 8003062:	4391      	bics	r1, r2
 8003064:	6021      	str	r1, [r4, #0]
 8003066:	2d00      	cmp	r5, #0
 8003068:	d102      	bne.n	8003070 <_printf_i+0x11c>
 800306a:	9e04      	ldr	r6, [sp, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <_printf_i+0x136>
 8003070:	9e04      	ldr	r6, [sp, #16]
 8003072:	0028      	movs	r0, r5
 8003074:	0039      	movs	r1, r7
 8003076:	f7fd f8df 	bl	8000238 <__aeabi_uidivmod>
 800307a:	9b03      	ldr	r3, [sp, #12]
 800307c:	3e01      	subs	r6, #1
 800307e:	5c5b      	ldrb	r3, [r3, r1]
 8003080:	7033      	strb	r3, [r6, #0]
 8003082:	002b      	movs	r3, r5
 8003084:	0005      	movs	r5, r0
 8003086:	429f      	cmp	r7, r3
 8003088:	d9f3      	bls.n	8003072 <_printf_i+0x11e>
 800308a:	2f08      	cmp	r7, #8
 800308c:	d109      	bne.n	80030a2 <_printf_i+0x14e>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	07db      	lsls	r3, r3, #31
 8003092:	d506      	bpl.n	80030a2 <_printf_i+0x14e>
 8003094:	6863      	ldr	r3, [r4, #4]
 8003096:	6922      	ldr	r2, [r4, #16]
 8003098:	4293      	cmp	r3, r2
 800309a:	dc02      	bgt.n	80030a2 <_printf_i+0x14e>
 800309c:	2330      	movs	r3, #48	; 0x30
 800309e:	3e01      	subs	r6, #1
 80030a0:	7033      	strb	r3, [r6, #0]
 80030a2:	9b04      	ldr	r3, [sp, #16]
 80030a4:	1b9b      	subs	r3, r3, r6
 80030a6:	6123      	str	r3, [r4, #16]
 80030a8:	9b07      	ldr	r3, [sp, #28]
 80030aa:	0021      	movs	r1, r4
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	9805      	ldr	r0, [sp, #20]
 80030b0:	9b06      	ldr	r3, [sp, #24]
 80030b2:	aa09      	add	r2, sp, #36	; 0x24
 80030b4:	f7ff fede 	bl	8002e74 <_printf_common>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d135      	bne.n	8003128 <_printf_i+0x1d4>
 80030bc:	2001      	movs	r0, #1
 80030be:	4240      	negs	r0, r0
 80030c0:	b00b      	add	sp, #44	; 0x2c
 80030c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c4:	2220      	movs	r2, #32
 80030c6:	6809      	ldr	r1, [r1, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	6022      	str	r2, [r4, #0]
 80030cc:	0022      	movs	r2, r4
 80030ce:	2178      	movs	r1, #120	; 0x78
 80030d0:	3245      	adds	r2, #69	; 0x45
 80030d2:	7011      	strb	r1, [r2, #0]
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <_printf_i+0x220>)
 80030d6:	e7a7      	b.n	8003028 <_printf_i+0xd4>
 80030d8:	0648      	lsls	r0, r1, #25
 80030da:	d5ac      	bpl.n	8003036 <_printf_i+0xe2>
 80030dc:	b2ad      	uxth	r5, r5
 80030de:	e7aa      	b.n	8003036 <_printf_i+0xe2>
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	680d      	ldr	r5, [r1, #0]
 80030e4:	1d10      	adds	r0, r2, #4
 80030e6:	6949      	ldr	r1, [r1, #20]
 80030e8:	6018      	str	r0, [r3, #0]
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	062e      	lsls	r6, r5, #24
 80030ee:	d501      	bpl.n	80030f4 <_printf_i+0x1a0>
 80030f0:	6019      	str	r1, [r3, #0]
 80030f2:	e002      	b.n	80030fa <_printf_i+0x1a6>
 80030f4:	066d      	lsls	r5, r5, #25
 80030f6:	d5fb      	bpl.n	80030f0 <_printf_i+0x19c>
 80030f8:	8019      	strh	r1, [r3, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9e04      	ldr	r6, [sp, #16]
 80030fe:	6123      	str	r3, [r4, #16]
 8003100:	e7d2      	b.n	80030a8 <_printf_i+0x154>
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	1d11      	adds	r1, r2, #4
 8003106:	6019      	str	r1, [r3, #0]
 8003108:	6816      	ldr	r6, [r2, #0]
 800310a:	2100      	movs	r1, #0
 800310c:	0030      	movs	r0, r6
 800310e:	6862      	ldr	r2, [r4, #4]
 8003110:	f000 f832 	bl	8003178 <memchr>
 8003114:	2800      	cmp	r0, #0
 8003116:	d001      	beq.n	800311c <_printf_i+0x1c8>
 8003118:	1b80      	subs	r0, r0, r6
 800311a:	6060      	str	r0, [r4, #4]
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	2300      	movs	r3, #0
 8003122:	9a04      	ldr	r2, [sp, #16]
 8003124:	7013      	strb	r3, [r2, #0]
 8003126:	e7bf      	b.n	80030a8 <_printf_i+0x154>
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	0032      	movs	r2, r6
 800312c:	9906      	ldr	r1, [sp, #24]
 800312e:	9805      	ldr	r0, [sp, #20]
 8003130:	9d07      	ldr	r5, [sp, #28]
 8003132:	47a8      	blx	r5
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d0c1      	beq.n	80030bc <_printf_i+0x168>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	079b      	lsls	r3, r3, #30
 800313c:	d415      	bmi.n	800316a <_printf_i+0x216>
 800313e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003140:	68e0      	ldr	r0, [r4, #12]
 8003142:	4298      	cmp	r0, r3
 8003144:	dabc      	bge.n	80030c0 <_printf_i+0x16c>
 8003146:	0018      	movs	r0, r3
 8003148:	e7ba      	b.n	80030c0 <_printf_i+0x16c>
 800314a:	0022      	movs	r2, r4
 800314c:	2301      	movs	r3, #1
 800314e:	9906      	ldr	r1, [sp, #24]
 8003150:	9805      	ldr	r0, [sp, #20]
 8003152:	9e07      	ldr	r6, [sp, #28]
 8003154:	3219      	adds	r2, #25
 8003156:	47b0      	blx	r6
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d0af      	beq.n	80030bc <_printf_i+0x168>
 800315c:	3501      	adds	r5, #1
 800315e:	68e3      	ldr	r3, [r4, #12]
 8003160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	42ab      	cmp	r3, r5
 8003166:	dcf0      	bgt.n	800314a <_printf_i+0x1f6>
 8003168:	e7e9      	b.n	800313e <_printf_i+0x1ea>
 800316a:	2500      	movs	r5, #0
 800316c:	e7f7      	b.n	800315e <_printf_i+0x20a>
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	0800352e 	.word	0x0800352e
 8003174:	0800353f 	.word	0x0800353f

08003178 <memchr>:
 8003178:	b2c9      	uxtb	r1, r1
 800317a:	1882      	adds	r2, r0, r2
 800317c:	4290      	cmp	r0, r2
 800317e:	d101      	bne.n	8003184 <memchr+0xc>
 8003180:	2000      	movs	r0, #0
 8003182:	4770      	bx	lr
 8003184:	7803      	ldrb	r3, [r0, #0]
 8003186:	428b      	cmp	r3, r1
 8003188:	d0fb      	beq.n	8003182 <memchr+0xa>
 800318a:	3001      	adds	r0, #1
 800318c:	e7f6      	b.n	800317c <memchr+0x4>

0800318e <memcpy>:
 800318e:	2300      	movs	r3, #0
 8003190:	b510      	push	{r4, lr}
 8003192:	429a      	cmp	r2, r3
 8003194:	d100      	bne.n	8003198 <memcpy+0xa>
 8003196:	bd10      	pop	{r4, pc}
 8003198:	5ccc      	ldrb	r4, [r1, r3]
 800319a:	54c4      	strb	r4, [r0, r3]
 800319c:	3301      	adds	r3, #1
 800319e:	e7f8      	b.n	8003192 <memcpy+0x4>

080031a0 <memmove>:
 80031a0:	b510      	push	{r4, lr}
 80031a2:	4288      	cmp	r0, r1
 80031a4:	d902      	bls.n	80031ac <memmove+0xc>
 80031a6:	188b      	adds	r3, r1, r2
 80031a8:	4298      	cmp	r0, r3
 80031aa:	d303      	bcc.n	80031b4 <memmove+0x14>
 80031ac:	2300      	movs	r3, #0
 80031ae:	e007      	b.n	80031c0 <memmove+0x20>
 80031b0:	5c8b      	ldrb	r3, [r1, r2]
 80031b2:	5483      	strb	r3, [r0, r2]
 80031b4:	3a01      	subs	r2, #1
 80031b6:	d2fb      	bcs.n	80031b0 <memmove+0x10>
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	5ccc      	ldrb	r4, [r1, r3]
 80031bc:	54c4      	strb	r4, [r0, r3]
 80031be:	3301      	adds	r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1fa      	bne.n	80031ba <memmove+0x1a>
 80031c4:	e7f8      	b.n	80031b8 <memmove+0x18>
	...

080031c8 <_free_r>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	0005      	movs	r5, r0
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d010      	beq.n	80031f2 <_free_r+0x2a>
 80031d0:	1f0c      	subs	r4, r1, #4
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da00      	bge.n	80031da <_free_r+0x12>
 80031d8:	18e4      	adds	r4, r4, r3
 80031da:	0028      	movs	r0, r5
 80031dc:	f000 f8d4 	bl	8003388 <__malloc_lock>
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <_free_r+0x90>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d105      	bne.n	80031f4 <_free_r+0x2c>
 80031e8:	6063      	str	r3, [r4, #4]
 80031ea:	6014      	str	r4, [r2, #0]
 80031ec:	0028      	movs	r0, r5
 80031ee:	f000 f8d3 	bl	8003398 <__malloc_unlock>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d908      	bls.n	800320a <_free_r+0x42>
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	1860      	adds	r0, r4, r1
 80031fc:	4283      	cmp	r3, r0
 80031fe:	d1f3      	bne.n	80031e8 <_free_r+0x20>
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	1841      	adds	r1, r0, r1
 8003206:	6021      	str	r1, [r4, #0]
 8003208:	e7ee      	b.n	80031e8 <_free_r+0x20>
 800320a:	001a      	movs	r2, r3
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <_free_r+0x4e>
 8003212:	42a3      	cmp	r3, r4
 8003214:	d9f9      	bls.n	800320a <_free_r+0x42>
 8003216:	6811      	ldr	r1, [r2, #0]
 8003218:	1850      	adds	r0, r2, r1
 800321a:	42a0      	cmp	r0, r4
 800321c:	d10b      	bne.n	8003236 <_free_r+0x6e>
 800321e:	6820      	ldr	r0, [r4, #0]
 8003220:	1809      	adds	r1, r1, r0
 8003222:	1850      	adds	r0, r2, r1
 8003224:	6011      	str	r1, [r2, #0]
 8003226:	4283      	cmp	r3, r0
 8003228:	d1e0      	bne.n	80031ec <_free_r+0x24>
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	1841      	adds	r1, r0, r1
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	6053      	str	r3, [r2, #4]
 8003234:	e7da      	b.n	80031ec <_free_r+0x24>
 8003236:	42a0      	cmp	r0, r4
 8003238:	d902      	bls.n	8003240 <_free_r+0x78>
 800323a:	230c      	movs	r3, #12
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	e7d5      	b.n	80031ec <_free_r+0x24>
 8003240:	6821      	ldr	r1, [r4, #0]
 8003242:	1860      	adds	r0, r4, r1
 8003244:	4283      	cmp	r3, r0
 8003246:	d103      	bne.n	8003250 <_free_r+0x88>
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	1841      	adds	r1, r0, r1
 800324e:	6021      	str	r1, [r4, #0]
 8003250:	6063      	str	r3, [r4, #4]
 8003252:	6054      	str	r4, [r2, #4]
 8003254:	e7ca      	b.n	80031ec <_free_r+0x24>
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	200000a8 	.word	0x200000a8

0800325c <_malloc_r>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	2303      	movs	r3, #3
 8003260:	1ccd      	adds	r5, r1, #3
 8003262:	439d      	bics	r5, r3
 8003264:	3508      	adds	r5, #8
 8003266:	0006      	movs	r6, r0
 8003268:	2d0c      	cmp	r5, #12
 800326a:	d21f      	bcs.n	80032ac <_malloc_r+0x50>
 800326c:	250c      	movs	r5, #12
 800326e:	42a9      	cmp	r1, r5
 8003270:	d81e      	bhi.n	80032b0 <_malloc_r+0x54>
 8003272:	0030      	movs	r0, r6
 8003274:	f000 f888 	bl	8003388 <__malloc_lock>
 8003278:	4925      	ldr	r1, [pc, #148]	; (8003310 <_malloc_r+0xb4>)
 800327a:	680a      	ldr	r2, [r1, #0]
 800327c:	0014      	movs	r4, r2
 800327e:	2c00      	cmp	r4, #0
 8003280:	d11a      	bne.n	80032b8 <_malloc_r+0x5c>
 8003282:	4f24      	ldr	r7, [pc, #144]	; (8003314 <_malloc_r+0xb8>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <_malloc_r+0x38>
 800328a:	0021      	movs	r1, r4
 800328c:	0030      	movs	r0, r6
 800328e:	f000 f869 	bl	8003364 <_sbrk_r>
 8003292:	6038      	str	r0, [r7, #0]
 8003294:	0029      	movs	r1, r5
 8003296:	0030      	movs	r0, r6
 8003298:	f000 f864 	bl	8003364 <_sbrk_r>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d12b      	bne.n	80032f8 <_malloc_r+0x9c>
 80032a0:	230c      	movs	r3, #12
 80032a2:	0030      	movs	r0, r6
 80032a4:	6033      	str	r3, [r6, #0]
 80032a6:	f000 f877 	bl	8003398 <__malloc_unlock>
 80032aa:	e003      	b.n	80032b4 <_malloc_r+0x58>
 80032ac:	2d00      	cmp	r5, #0
 80032ae:	dade      	bge.n	800326e <_malloc_r+0x12>
 80032b0:	230c      	movs	r3, #12
 80032b2:	6033      	str	r3, [r6, #0]
 80032b4:	2000      	movs	r0, #0
 80032b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	1b5b      	subs	r3, r3, r5
 80032bc:	d419      	bmi.n	80032f2 <_malloc_r+0x96>
 80032be:	2b0b      	cmp	r3, #11
 80032c0:	d903      	bls.n	80032ca <_malloc_r+0x6e>
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	18e4      	adds	r4, r4, r3
 80032c6:	6025      	str	r5, [r4, #0]
 80032c8:	e003      	b.n	80032d2 <_malloc_r+0x76>
 80032ca:	6863      	ldr	r3, [r4, #4]
 80032cc:	42a2      	cmp	r2, r4
 80032ce:	d10e      	bne.n	80032ee <_malloc_r+0x92>
 80032d0:	600b      	str	r3, [r1, #0]
 80032d2:	0030      	movs	r0, r6
 80032d4:	f000 f860 	bl	8003398 <__malloc_unlock>
 80032d8:	0020      	movs	r0, r4
 80032da:	2207      	movs	r2, #7
 80032dc:	300b      	adds	r0, #11
 80032de:	1d23      	adds	r3, r4, #4
 80032e0:	4390      	bics	r0, r2
 80032e2:	1ac2      	subs	r2, r0, r3
 80032e4:	4298      	cmp	r0, r3
 80032e6:	d0e6      	beq.n	80032b6 <_malloc_r+0x5a>
 80032e8:	1a1b      	subs	r3, r3, r0
 80032ea:	50a3      	str	r3, [r4, r2]
 80032ec:	e7e3      	b.n	80032b6 <_malloc_r+0x5a>
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	e7ef      	b.n	80032d2 <_malloc_r+0x76>
 80032f2:	0022      	movs	r2, r4
 80032f4:	6864      	ldr	r4, [r4, #4]
 80032f6:	e7c2      	b.n	800327e <_malloc_r+0x22>
 80032f8:	2303      	movs	r3, #3
 80032fa:	1cc4      	adds	r4, r0, #3
 80032fc:	439c      	bics	r4, r3
 80032fe:	42a0      	cmp	r0, r4
 8003300:	d0e1      	beq.n	80032c6 <_malloc_r+0x6a>
 8003302:	1a21      	subs	r1, r4, r0
 8003304:	0030      	movs	r0, r6
 8003306:	f000 f82d 	bl	8003364 <_sbrk_r>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	d1db      	bne.n	80032c6 <_malloc_r+0x6a>
 800330e:	e7c7      	b.n	80032a0 <_malloc_r+0x44>
 8003310:	200000a8 	.word	0x200000a8
 8003314:	200000ac 	.word	0x200000ac

08003318 <_realloc_r>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	0007      	movs	r7, r0
 800331c:	000d      	movs	r5, r1
 800331e:	0016      	movs	r6, r2
 8003320:	2900      	cmp	r1, #0
 8003322:	d105      	bne.n	8003330 <_realloc_r+0x18>
 8003324:	0011      	movs	r1, r2
 8003326:	f7ff ff99 	bl	800325c <_malloc_r>
 800332a:	0004      	movs	r4, r0
 800332c:	0020      	movs	r0, r4
 800332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003330:	2a00      	cmp	r2, #0
 8003332:	d103      	bne.n	800333c <_realloc_r+0x24>
 8003334:	f7ff ff48 	bl	80031c8 <_free_r>
 8003338:	0034      	movs	r4, r6
 800333a:	e7f7      	b.n	800332c <_realloc_r+0x14>
 800333c:	f000 f834 	bl	80033a8 <_malloc_usable_size_r>
 8003340:	002c      	movs	r4, r5
 8003342:	42b0      	cmp	r0, r6
 8003344:	d2f2      	bcs.n	800332c <_realloc_r+0x14>
 8003346:	0031      	movs	r1, r6
 8003348:	0038      	movs	r0, r7
 800334a:	f7ff ff87 	bl	800325c <_malloc_r>
 800334e:	1e04      	subs	r4, r0, #0
 8003350:	d0ec      	beq.n	800332c <_realloc_r+0x14>
 8003352:	0029      	movs	r1, r5
 8003354:	0032      	movs	r2, r6
 8003356:	f7ff ff1a 	bl	800318e <memcpy>
 800335a:	0029      	movs	r1, r5
 800335c:	0038      	movs	r0, r7
 800335e:	f7ff ff33 	bl	80031c8 <_free_r>
 8003362:	e7e3      	b.n	800332c <_realloc_r+0x14>

08003364 <_sbrk_r>:
 8003364:	2300      	movs	r3, #0
 8003366:	b570      	push	{r4, r5, r6, lr}
 8003368:	4d06      	ldr	r5, [pc, #24]	; (8003384 <_sbrk_r+0x20>)
 800336a:	0004      	movs	r4, r0
 800336c:	0008      	movs	r0, r1
 800336e:	602b      	str	r3, [r5, #0]
 8003370:	f7fd fac2 	bl	80008f8 <_sbrk>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d103      	bne.n	8003380 <_sbrk_r+0x1c>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d000      	beq.n	8003380 <_sbrk_r+0x1c>
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	bd70      	pop	{r4, r5, r6, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	200001c8 	.word	0x200001c8

08003388 <__malloc_lock>:
 8003388:	b510      	push	{r4, lr}
 800338a:	4802      	ldr	r0, [pc, #8]	; (8003394 <__malloc_lock+0xc>)
 800338c:	f000 f814 	bl	80033b8 <__retarget_lock_acquire_recursive>
 8003390:	bd10      	pop	{r4, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	200001d0 	.word	0x200001d0

08003398 <__malloc_unlock>:
 8003398:	b510      	push	{r4, lr}
 800339a:	4802      	ldr	r0, [pc, #8]	; (80033a4 <__malloc_unlock+0xc>)
 800339c:	f000 f80d 	bl	80033ba <__retarget_lock_release_recursive>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	200001d0 	.word	0x200001d0

080033a8 <_malloc_usable_size_r>:
 80033a8:	1f0b      	subs	r3, r1, #4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1f18      	subs	r0, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da01      	bge.n	80033b6 <_malloc_usable_size_r+0xe>
 80033b2:	580b      	ldr	r3, [r1, r0]
 80033b4:	18c0      	adds	r0, r0, r3
 80033b6:	4770      	bx	lr

080033b8 <__retarget_lock_acquire_recursive>:
 80033b8:	4770      	bx	lr

080033ba <__retarget_lock_release_recursive>:
 80033ba:	4770      	bx	lr

080033bc <_init>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr

080033c8 <_fini>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr
