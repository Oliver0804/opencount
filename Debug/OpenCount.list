
OpenCount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800351c  0800351c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800351c  0800351c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001e0  08003700  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08003700  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008951  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e84  00000000  00000000  00028b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000890  00000000  00000000  0002a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011317  00000000  00000000  0002ba08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009944  00000000  00000000  0003cd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063728  00000000  00000000  00046663  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000207c  00000000  00000000  000a9e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800337c 	.word	0x0800337c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800337c 	.word	0x0800337c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <GetPage>:
#include "FLASH_PAGE.h"
#include "string.h"
#include "stdio.h"

static uint32_t GetPage(uint32_t Address)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e01c      	b.n	8000278 <GetPage+0x48>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <GetPage+0x5c>)
 8000242:	4694      	mov	ip, r2
 8000244:	4463      	add	r3, ip
 8000246:	029b      	lsls	r3, r3, #10
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4293      	cmp	r3, r2
 800024e:	d210      	bcs.n	8000272 <GetPage+0x42>
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	0292      	lsls	r2, r2, #10
 8000256:	4694      	mov	ip, r2
 8000258:	4463      	add	r3, ip
 800025a:	029b      	lsls	r3, r3, #10
 800025c:	001a      	movs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4293      	cmp	r3, r2
 8000262:	d306      	bcc.n	8000272 <GetPage+0x42>
	  {
		  return (0x08000000 + 1024*indx);
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2280      	movs	r2, #128	; 0x80
 8000268:	0292      	lsls	r2, r2, #10
 800026a:	4694      	mov	ip, r2
 800026c:	4463      	add	r3, ip
 800026e:	029b      	lsls	r3, r3, #10
 8000270:	e007      	b.n	8000282 <GetPage+0x52>
  for (int indx=0; indx<128; indx++)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	3301      	adds	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	2b7f      	cmp	r3, #127	; 0x7f
 800027c:	dddf      	ble.n	800023e <GetPage+0xe>
	  }
  }

  return -1;
 800027e:	2301      	movs	r3, #1
 8000280:	425b      	negs	r3, r3
}
 8000282:	0018      	movs	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	b004      	add	sp, #16
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	00020001 	.word	0x00020001

08000290 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t * DATA_32)
{
 8000290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000292:	b089      	sub	sp, #36	; 0x24
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen((char *)DATA_32)/4) + ((strlen((char *)DATA_32) % 4) != 0);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	0018      	movs	r0, r3
 80002a2:	f7ff ff31 	bl	8000108 <strlen>
 80002a6:	0003      	movs	r3, r0
 80002a8:	089c      	lsrs	r4, r3, #2
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	0018      	movs	r0, r3
 80002ae:	f7ff ff2b 	bl	8000108 <strlen>
 80002b2:	0002      	movs	r2, r0
 80002b4:	2303      	movs	r3, #3
 80002b6:	4013      	ands	r3, r2
 80002b8:	1e5a      	subs	r2, r3, #1
 80002ba:	4193      	sbcs	r3, r2
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	18e3      	adds	r3, r4, r3
 80002c0:	61bb      	str	r3, [r7, #24]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80002c2:	f000 fdaf 	bl	8000e24 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	0018      	movs	r0, r3
 80002ca:	f7ff ffb1 	bl	8000230 <GetPage>
 80002ce:	0003      	movs	r3, r0
 80002d0:	617b      	str	r3, [r7, #20]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80002d2:	69bb      	ldr	r3, [r7, #24]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	001a      	movs	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	189b      	adds	r3, r3, r2
 80002dc:	613b      	str	r3, [r7, #16]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	0018      	movs	r0, r3
 80002e2:	f7ff ffa5 	bl	8000230 <GetPage>
 80002e6:	0003      	movs	r3, r0
 80002e8:	60fb      	str	r3, [r7, #12]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <Flash_Write_Data+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <Flash_Write_Data+0xdc>)
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	0a9b      	lsrs	r3, r3, #10
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <Flash_Write_Data+0xdc>)
 8000302:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000304:	2308      	movs	r3, #8
 8000306:	18fa      	adds	r2, r7, r3
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <Flash_Write_Data+0xdc>)
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fe53 	bl	8000fb8 <HAL_FLASHEx_Erase>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d01e      	beq.n	8000354 <Flash_Write_Data+0xc4>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000316:	f000 fdb9 	bl	8000e8c <HAL_FLASH_GetError>
 800031a:	0003      	movs	r3, r0
 800031c:	e021      	b.n	8000362 <Flash_Write_Data+0xd2>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	683a      	ldr	r2, [r7, #0]
 8000324:	18d3      	adds	r3, r2, r3
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	001d      	movs	r5, r3
 800032a:	2300      	movs	r3, #0
 800032c:	001e      	movs	r6, r3
 800032e:	6879      	ldr	r1, [r7, #4]
 8000330:	002a      	movs	r2, r5
 8000332:	0033      	movs	r3, r6
 8000334:	2002      	movs	r0, #2
 8000336:	f000 fcdf 	bl	8000cf8 <HAL_FLASH_Program>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d106      	bne.n	800034c <Flash_Write_Data+0xbc>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3304      	adds	r3, #4
 8000342:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	3301      	adds	r3, #1
 8000348:	61fb      	str	r3, [r7, #28]
 800034a:	e003      	b.n	8000354 <Flash_Write_Data+0xc4>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800034c:	f000 fd9e 	bl	8000e8c <HAL_FLASH_GetError>
 8000350:	0003      	movs	r3, r0
 8000352:	e006      	b.n	8000362 <Flash_Write_Data+0xd2>
	   while (sofar<numberofwords)
 8000354:	69fa      	ldr	r2, [r7, #28]
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	429a      	cmp	r2, r3
 800035a:	dbe0      	blt.n	800031e <Flash_Write_Data+0x8e>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800035c:	f000 fd88 	bl	8000e70 <HAL_FLASH_Lock>

	   return 0;
 8000360:	2300      	movs	r3, #0
}
 8000362:	0018      	movs	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	b009      	add	sp, #36	; 0x24
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	200001fc 	.word	0x200001fc

08000370 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	d103      	bne.n	8000392 <Flash_Read_Data+0x22>
		{
			*DATA_32 = '\0';
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
			break;
 8000390:	e006      	b.n	80003a0 <Flash_Read_Data+0x30>
		}
		StartPageAddress += 4;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3304      	adds	r3, #4
 8000396:	607b      	str	r3, [r7, #4]
		DATA_32++;
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	3304      	adds	r3, #4
 800039c:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 800039e:	e7ec      	b.n	800037a <Flash_Read_Data+0xa>
	}
}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b002      	add	sp, #8
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <Convert_To_Str>:

void Convert_To_Str (uint32_t *data, char *str)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)data)/4) + ((strlen((char *)data) % 4) != 0)) *4;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	0018      	movs	r0, r3
 80003b6:	f7ff fea7 	bl	8000108 <strlen>
 80003ba:	0003      	movs	r3, r0
 80003bc:	089c      	lsrs	r4, r3, #2
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	0018      	movs	r0, r3
 80003c2:	f7ff fea1 	bl	8000108 <strlen>
 80003c6:	0002      	movs	r2, r0
 80003c8:	2303      	movs	r3, #3
 80003ca:	4013      	ands	r3, r2
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	4193      	sbcs	r3, r2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	18e3      	adds	r3, r4, r3
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e01c      	b.n	8000418 <Convert_To_Str+0x70>
	{
		str[i] = data[i/4]>>(8*(i%4));
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	da00      	bge.n	80003e6 <Convert_To_Str+0x3e>
 80003e4:	3303      	adds	r3, #3
 80003e6:	109b      	asrs	r3, r3, #2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	18d3      	adds	r3, r2, r3
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <Convert_To_Str+0x80>)
 80003f4:	400b      	ands	r3, r1
 80003f6:	d504      	bpl.n	8000402 <Convert_To_Str+0x5a>
 80003f8:	3b01      	subs	r3, #1
 80003fa:	2104      	movs	r1, #4
 80003fc:	4249      	negs	r1, r1
 80003fe:	430b      	orrs	r3, r1
 8000400:	3301      	adds	r3, #1
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	40da      	lsrs	r2, r3
 8000406:	0011      	movs	r1, r2
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	b2ca      	uxtb	r2, r1
 8000410:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	429a      	cmp	r2, r3
 800041e:	dbde      	blt.n	80003de <Convert_To_Str+0x36>
	}
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b005      	add	sp, #20
 8000426:	bd90      	pop	{r4, r7, pc}
 8000428:	80000003 	.word	0x80000003

0800042c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	0018      	movs	r0, r3
 8000436:	2314      	movs	r3, #20
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f002 fad6 	bl	80029ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <MX_GPIO_Init+0x8c>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_GPIO_Init+0x8c>)
 8000446:	2180      	movs	r1, #128	; 0x80
 8000448:	0289      	lsls	r1, r1, #10
 800044a:	430a      	orrs	r2, r1
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_GPIO_Init+0x8c>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	029b      	lsls	r3, r3, #10
 8000456:	4013      	ands	r3, r2
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2200      	movs	r2, #0
 8000462:	2170      	movs	r1, #112	; 0x70
 8000464:	0018      	movs	r0, r3
 8000466:	f000 ffbb 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2208      	movs	r2, #8
 800046e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fe43 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2270      	movs	r2, #112	; 0x70
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	1d3a      	adds	r2, r7, #4
 80004a4:	2390      	movs	r3, #144	; 0x90
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fe30 	bl	8001110 <HAL_GPIO_Init>

}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b006      	add	sp, #24
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000

080004bc <WriteSet>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void WriteSet(int opencount) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	//sprintf(*tempString,"%s%s%s%s%s",dataInt1,dataInt2,dataInt3,dataInt4,dataInt5);
	sprintf(tempString, "%4d", opencount);
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4907      	ldr	r1, [pc, #28]	; (80004e4 <WriteSet+0x28>)
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <WriteSet+0x2c>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fa96 	bl	80029fc <siprintf>
	Flash_Write_Data(0x08007C00, tempString);
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <WriteSet+0x2c>)
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <WriteSet+0x30>)
 80004d4:	0019      	movs	r1, r3
 80004d6:	0010      	movs	r0, r2
 80004d8:	f7ff feda 	bl	8000290 <Flash_Write_Data>
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b002      	add	sp, #8
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	080033a0 	.word	0x080033a0
 80004e8:	2000024c 	.word	0x2000024c
 80004ec:	08007c00 	.word	0x08007c00

080004f0 <KeepSet>:
void KeepSet() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	WriteSet(count);
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <KeepSet+0x14>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff ffdf 	bl	80004bc <WriteSet>
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000208 	.word	0x20000208

08000508 <ReadSet>:
void ReadSet() {
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x08007C00, Rx_Data);
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <ReadSet+0xa4>)
 8000510:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <ReadSet+0xa8>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f7ff ff2b 	bl	8000370 <Flash_Read_Data>
	Convert_To_Str(Rx_Data, string);
 800051a:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <ReadSet+0xac>)
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <ReadSet+0xa4>)
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ff41 	bl	80003a8 <Convert_To_Str>
	int xx[1] = { 0 };
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
	int xflag = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
	for (int x = 0; x < 1; x = x + 4) {
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	e02f      	b.n	8000594 <ReadSet+0x8c>
		char temp[5];
		temp[0] = string[x];
 8000534:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <ReadSet+0xac>)
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	781a      	ldrb	r2, [r3, #0]
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	701a      	strb	r2, [r3, #0]
		temp[1] = string[x + 1];
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	3301      	adds	r3, #1
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <ReadSet+0xac>)
 8000546:	5cd2      	ldrb	r2, [r2, r3]
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	705a      	strb	r2, [r3, #1]
		temp[2] = string[x + 2];
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	3302      	adds	r3, #2
 8000550:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <ReadSet+0xac>)
 8000552:	5cd2      	ldrb	r2, [r2, r3]
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	709a      	strb	r2, [r3, #2]
		temp[3] = string[x + 3];
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	3303      	adds	r3, #3
 800055c:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <ReadSet+0xac>)
 800055e:	5cd2      	ldrb	r2, [r2, r3]
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	70da      	strb	r2, [r3, #3]
		temp[4] = '\0';
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	711a      	strb	r2, [r3, #4]

		xx[xflag++] = atoi(temp);
 800056a:	697c      	ldr	r4, [r7, #20]
 800056c:	1c63      	adds	r3, r4, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	0018      	movs	r0, r3
 8000574:	f002 fa0a 	bl	800298c <atoi>
 8000578:	0002      	movs	r2, r0
 800057a:	00a3      	lsls	r3, r4, #2
 800057c:	2118      	movs	r1, #24
 800057e:	468c      	mov	ip, r1
 8000580:	44bc      	add	ip, r7
 8000582:	4463      	add	r3, ip
 8000584:	3b0c      	subs	r3, #12
 8000586:	601a      	str	r2, [r3, #0]
		HAL_Delay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fadf 	bl	8000b4c <HAL_Delay>
	for (int x = 0; x < 1; x = x + 4) {
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	3304      	adds	r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	2b00      	cmp	r3, #0
 8000598:	ddcc      	ble.n	8000534 <ReadSet+0x2c>
	}
	count = xx[0];
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	001a      	movs	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <ReadSet+0xb0>)
 80005a0:	601a      	str	r2, [r3, #0]

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b007      	add	sp, #28
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	2000023c 	.word	0x2000023c
 80005b0:	08007c00 	.word	0x08007c00
 80005b4:	2000021c 	.word	0x2000021c
 80005b8:	20000208 	.word	0x20000208

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fa60 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f85c 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f7ff ff30 	bl	800042c <MX_GPIO_Init>
  MX_RTC_Init();
 80005cc:	f000 f8be 	bl	800074c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f9b0 	bl	8000934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ReadSet();
 80005d4:	f7ff ff98 	bl	8000508 <ReadSet>
  count++;
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <main+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <main+0xb4>)
 80005e0:	601a      	str	r2, [r3, #0]
  KeepSet();
 80005e2:	f7ff ff85 	bl	80004f0 <KeepSet>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(timecount>=86400){//一天秒數
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <main+0xb8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <main+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d90c      	bls.n	800060a <main+0x4e>
		  timecount=0;
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <main+0xb8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		  ReadSet();
 80005f6:	f7ff ff87 	bl	8000508 <ReadSet>
		  count++;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <main+0xb4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <main+0xb4>)
 8000602:	601a      	str	r2, [r3, #0]
		  KeepSet();
 8000604:	f7ff ff74 	bl	80004f0 <KeepSet>
 8000608:	e00f      	b.n	800062a <main+0x6e>
	  }else{
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2110      	movs	r1, #16
 8000610:	0018      	movs	r0, r3
 8000612:	f000 ff02 	bl	800141a <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000616:	23fa      	movs	r3, #250	; 0xfa
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fa96 	bl	8000b4c <HAL_Delay>
		  timecount++;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <main+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <main+0xb8>)
 8000628:	601a      	str	r2, [r3, #0]
	  }
	  if(count>=(365*3)){//三年次數
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <main+0xb4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <main+0xc0>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d90e      	bls.n	8000652 <main+0x96>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000634:	2390      	movs	r3, #144	; 0x90
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2201      	movs	r2, #1
 800063a:	2120      	movs	r1, #32
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fecf 	bl	80013e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8000642:	2390      	movs	r3, #144	; 0x90
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fec8 	bl	80013e0 <HAL_GPIO_WritePin>
 8000650:	e7c9      	b.n	80005e6 <main+0x2a>
	  }else{
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fec0 	bl	80013e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	0018      	movs	r0, r3
 800066a:	f000 feb9 	bl	80013e0 <HAL_GPIO_WritePin>
	  if(timecount>=86400){//一天秒數
 800066e:	e7ba      	b.n	80005e6 <main+0x2a>
 8000670:	20000208 	.word	0x20000208
 8000674:	2000020c 	.word	0x2000020c
 8000678:	0001517f 	.word	0x0001517f
 800067c:	00000446 	.word	0x00000446

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b095      	sub	sp, #84	; 0x54
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2420      	movs	r4, #32
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2330      	movs	r3, #48	; 0x30
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f002 f9ab 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	2310      	movs	r3, #16
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	0018      	movs	r0, r3
 800069c:	2310      	movs	r3, #16
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f002 f9a3 	bl	80029ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f002 f99c 	bl	80029ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	220a      	movs	r2, #10
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2210      	movs	r2, #16
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 feba 	bl	8001450 <HAL_RCC_OscConfig>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006e0:	f000 f82e 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	2110      	movs	r1, #16
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f001 f9c0 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800070c:	f000 f818 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000710:	003b      	movs	r3, r7
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <SystemClock_Config+0xbc>)
 8000714:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800071c:	003b      	movs	r3, r7
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	003b      	movs	r3, r7
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fb00 	bl	8001d2c <HAL_RCCEx_PeriphCLKConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000730:	f000 f806 	bl	8000740 <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b015      	add	sp, #84	; 0x54
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00010001 	.word	0x00010001

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	0018      	movs	r0, r3
 8000756:	2314      	movs	r3, #20
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f002 f946 	bl	80029ec <memset>
  RTC_DateTypeDef sDate = {0};
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_RTC_Init+0xbc>)
 8000768:	4a28      	ldr	r2, [pc, #160]	; (800080c <MX_RTC_Init+0xc0>)
 800076a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_RTC_Init+0xbc>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_RTC_Init+0xbc>)
 8000774:	227f      	movs	r2, #127	; 0x7f
 8000776:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_RTC_Init+0xbc>)
 800077a:	22ff      	movs	r2, #255	; 0xff
 800077c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_RTC_Init+0xbc>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_RTC_Init+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_RTC_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_RTC_Init+0xbc>)
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fb98 	bl	8001ec8 <HAL_RTC_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800079c:	f7ff ffd0 	bl	8000740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_RTC_Init+0xbc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 fc13 	bl	8001ff0 <HAL_RTC_SetTime>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80007ce:	f7ff ffb7 	bl	8000740 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007d8:	003b      	movs	r3, r7
 80007da:	2201      	movs	r2, #1
 80007dc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007de:	003b      	movs	r3, r7
 80007e0:	2201      	movs	r2, #1
 80007e2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007e4:	003b      	movs	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007ea:	0039      	movs	r1, r7
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_RTC_Init+0xbc>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fcb9 	bl	8002168 <HAL_RTC_SetDate>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f7ff ffa1 	bl	8000740 <Error_Handler>
  }

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b006      	add	sp, #24
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	2000026c 	.word	0x2000026c
 800080c:	40002800 	.word	0x40002800

08000810 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_RTC_MspInit+0x28>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_RTC_MspInit+0x2c>)
 8000824:	6a1a      	ldr	r2, [r3, #32]
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_RTC_MspInit+0x2c>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0209      	lsls	r1, r1, #8
 800082c:	430a      	orrs	r2, r1
 800082e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40002800 	.word	0x40002800
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x44>)
 8000848:	699a      	ldr	r2, [r3, #24]
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x44>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	619a      	str	r2, [r3, #24]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x44>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x44>)
 8000860:	69da      	ldr	r2, [r3, #28]
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x44>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	430a      	orrs	r2, r1
 800086a:	61da      	str	r2, [r3, #28]
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_MspInit+0x44>)
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	055b      	lsls	r3, r3, #21
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f930 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	18d3      	adds	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f002 f854 	bl	8002998 <__errno>
 80008f0:	0003      	movs	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	425b      	negs	r3, r3
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	18d2      	adds	r2, r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b006      	add	sp, #24
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20001000 	.word	0x20001000
 800091c:	00000400 	.word	0x00000400
 8000920:	20000210 	.word	0x20000210
 8000924:	20000340 	.word	0x20000340

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART1_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART1_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000940:	22e1      	movs	r2, #225	; 0xe1
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART1_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART1_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART1_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_USART1_UART_Init+0x58>)
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fd11 	bl	80023a0 <HAL_UART_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f7ff fedd 	bl	8000740 <Error_Handler>
  }

}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000028c 	.word	0x2000028c
 8000990:	40013800 	.word	0x40013800

08000994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	2314      	movs	r3, #20
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	0018      	movs	r0, r3
 80009a2:	2314      	movs	r3, #20
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f002 f820 	bl	80029ec <memset>
  if(uartHandle->Instance==USART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_UART_MspInit+0x94>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d133      	bne.n	8000a1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	01c9      	lsls	r1, r1, #7
 80009c0:	430a      	orrs	r2, r1
 80009c2:	619a      	str	r2, [r3, #24]
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c6:	699a      	ldr	r2, [r3, #24]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	01db      	lsls	r3, r3, #7
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009d4:	695a      	ldr	r2, [r3, #20]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0289      	lsls	r1, r1, #10
 80009dc:	430a      	orrs	r2, r1
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ee:	2114      	movs	r1, #20
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	22c0      	movs	r2, #192	; 0xc0
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2202      	movs	r2, #2
 80009fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2203      	movs	r2, #3
 8000a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	187a      	adds	r2, r7, r1
 8000a12:	2390      	movs	r3, #144	; 0x90
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fb79 	bl	8001110 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b00a      	add	sp, #40	; 0x28
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a5a:	f7ff ff65 	bl	8000928 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f001 ffa1 	bl	80029a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fdab 	bl	80005bc <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000a74:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 8000a78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000a7c:	2000033c 	.word	0x2000033c

08000a80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_IRQHandler>
	...

08000a84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_Init+0x24>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_Init+0x24>)
 8000a8e:	2110      	movs	r1, #16
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f809 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9a:	f7ff fed1 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40022000 	.word	0x40022000

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_InitTick+0x5c>)
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x60>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	23fa      	movs	r3, #250	; 0xfa
 8000ac0:	0098      	lsls	r0, r3, #2
 8000ac2:	f7ff fb29 	bl	8000118 <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0020      	movs	r0, r4
 8000acc:	f7ff fb24 	bl	8000118 <__udivsi3>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f903 	bl	8000cde <HAL_SYSTICK_Config>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e00f      	b.n	8000b00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d80b      	bhi.n	8000afe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f8e0 	bl	8000cb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_InitTick+0x64>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b003      	add	sp, #12
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x1c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	18d2      	adds	r2, r2, r3
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_IncTick+0x20>)
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000310 	.word	0x20000310

08000b38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_GetTick+0x10>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000310 	.word	0x20000310

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff fff0 	bl	8000b38 <HAL_GetTick>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_Delay+0x40>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	f7ff ffe0 	bl	8000b38 <HAL_GetTick>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba4:	d828      	bhi.n	8000bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <__NVIC_SetPriority+0xd4>)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	33c0      	adds	r3, #192	; 0xc0
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	589b      	ldr	r3, [r3, r2]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	; 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <__NVIC_SetPriority+0xd4>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bf6:	e031      	b.n	8000c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0019      	movs	r1, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	400b      	ands	r3, r1
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3306      	adds	r3, #6
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	3304      	adds	r3, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	; 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001c      	movs	r4, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	4023      	ands	r3, r4
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	3306      	adds	r3, #6
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18c3      	adds	r3, r0, r3
 8000c58:	3304      	adds	r3, #4
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b003      	add	sp, #12
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <SysTick_Config+0x40>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d901      	bls.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e010      	b.n	8000ca4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <SysTick_Config+0x44>)
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	2103      	movs	r1, #3
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff ff7d 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SysTick_Config+0x44>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x44>)
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	00ffffff 	.word	0x00ffffff
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ffbf 	bl	8000c6c <SysTick_Config>
 8000cee:	0003      	movs	r3, r0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	603a      	str	r2, [r7, #0]
 8000d04:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000d0e:	2316      	movs	r3, #22
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000d16:	2315      	movs	r3, #21
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_FLASH_Program+0x120>)
 8000d20:	7e1b      	ldrb	r3, [r3, #24]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d101      	bne.n	8000d2a <HAL_FLASH_Program+0x32>
 8000d26:	2302      	movs	r3, #2
 8000d28:	e072      	b.n	8000e10 <HAL_FLASH_Program+0x118>
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_FLASH_Program+0x120>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d30:	2317      	movs	r3, #23
 8000d32:	18fe      	adds	r6, r7, r3
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_FLASH_Program+0x124>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 f8ce 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000d40:	2317      	movs	r3, #23
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d15c      	bne.n	8000e04 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d104      	bne.n	8000d5a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d50:	2315      	movs	r3, #21
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e00b      	b.n	8000d72 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d104      	bne.n	8000d6a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d60:	2315      	movs	r3, #21
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2202      	movs	r2, #2
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	e003      	b.n	8000d72 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d6a:	2315      	movs	r3, #21
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2204      	movs	r2, #4
 8000d70:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000d72:	2316      	movs	r3, #22
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e039      	b.n	8000df0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d7c:	2116      	movs	r1, #22
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	005a      	lsls	r2, r3, #1
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	18d0      	adds	r0, r2, r3
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	001a      	movs	r2, r3
 8000d90:	3a20      	subs	r2, #32
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	db03      	blt.n	8000d9e <HAL_FLASH_Program+0xa6>
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	40d1      	lsrs	r1, r2
 8000d9a:	000c      	movs	r4, r1
 8000d9c:	e008      	b.n	8000db0 <HAL_FLASH_Program+0xb8>
 8000d9e:	2220      	movs	r2, #32
 8000da0:	1ad2      	subs	r2, r2, r3
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	6839      	ldr	r1, [r7, #0]
 8000daa:	40d9      	lsrs	r1, r3
 8000dac:	000c      	movs	r4, r1
 8000dae:	4314      	orrs	r4, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	40da      	lsrs	r2, r3
 8000db4:	0015      	movs	r5, r2
 8000db6:	b2a3      	uxth	r3, r4
 8000db8:	0019      	movs	r1, r3
 8000dba:	f000 f871 	bl	8000ea0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dbe:	2317      	movs	r3, #23
 8000dc0:	18fe      	adds	r6, r7, r3
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_FLASH_Program+0x124>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 f887 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_FLASH_Program+0x128>)
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_FLASH_Program+0x128>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	438a      	bics	r2, r1
 8000dd8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000dda:	2317      	movs	r3, #23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10e      	bne.n	8000e02 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000de4:	2116      	movs	r1, #22
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	3201      	adds	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	2316      	movs	r3, #22
 8000df2:	18fa      	adds	r2, r7, r3
 8000df4:	2315      	movs	r3, #21
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3bd      	bcc.n	8000d7c <HAL_FLASH_Program+0x84>
 8000e00:	e000      	b.n	8000e04 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000e02:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_FLASH_Program+0x120>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	761a      	strb	r2, [r3, #24]

  return status;
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b007      	add	sp, #28
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	20000318 	.word	0x20000318
 8000e1c:	0000c350 	.word	0x0000c350
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_FLASH_Unlock+0x40>)
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	4013      	ands	r3, r2
 8000e38:	d00d      	beq.n	8000e56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_FLASH_Unlock+0x40>)
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_FLASH_Unlock+0x44>)
 8000e3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_FLASH_Unlock+0x40>)
 8000e42:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_FLASH_Unlock+0x48>)
 8000e44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <HAL_FLASH_Unlock+0x40>)
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d002      	beq.n	8000e56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40022000 	.word	0x40022000
 8000e68:	45670123 	.word	0x45670123
 8000e6c:	cdef89ab 	.word	0xcdef89ab

08000e70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_FLASH_Lock+0x18>)
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_FLASH_Lock+0x18>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <HAL_FLASH_GetError+0x10>)
 8000e92:	69db      	ldr	r3, [r3, #28]
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	20000318 	.word	0x20000318

08000ea0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	1cbb      	adds	r3, r7, #2
 8000eac:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <FLASH_Program_HalfWord+0x30>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <FLASH_Program_HalfWord+0x34>)
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <FLASH_Program_HalfWord+0x34>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1cba      	adds	r2, r7, #2
 8000ec4:	8812      	ldrh	r2, [r2, #0]
 8000ec6:	801a      	strh	r2, [r3, #0]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000318 	.word	0x20000318
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff fe2a 	bl	8000b38 <HAL_GetTick>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ee8:	e00f      	b.n	8000f0a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3301      	adds	r3, #1
 8000eee:	d00c      	beq.n	8000f0a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <FLASH_WaitForLastOperation+0x2e>
 8000ef6:	f7ff fe1f 	bl	8000b38 <HAL_GetTick>
 8000efa:	0002      	movs	r2, r0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d201      	bcs.n	8000f0a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e01f      	b.n	8000f4a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d0e9      	beq.n	8000eea <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	d102      	bne.n	8000f28 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f24:	2220      	movs	r2, #32
 8000f26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d005      	beq.n	8000f40 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d103      	bne.n	8000f48 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f40:	f000 f80a 	bl	8000f58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40022000 	.word	0x40022000

08000f58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <FLASH_SetErrorCode+0x58>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2210      	movs	r2, #16
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d109      	bne.n	8000f82 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <FLASH_SetErrorCode+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2202      	movs	r2, #2
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <FLASH_SetErrorCode+0x5c>)
 8000f78:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <FLASH_SetErrorCode+0x58>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2204      	movs	r2, #4
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d109      	bne.n	8000fa2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <FLASH_SetErrorCode+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	2201      	movs	r2, #1
 8000f94:	431a      	orrs	r2, r3
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <FLASH_SetErrorCode+0x5c>)
 8000f98:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fa2:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <FLASH_SetErrorCode+0x58>)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
}  
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	20000318 	.word	0x20000318

08000fb8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_FLASHEx_Erase+0xe0>)
 8000fd0:	7e1b      	ldrb	r3, [r3, #24]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_FLASHEx_Erase+0x22>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e05a      	b.n	8001090 <HAL_FLASHEx_Erase+0xd8>
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_FLASHEx_Erase+0xe0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d116      	bne.n	8001016 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_FLASHEx_Erase+0xe4>)
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ff74 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d147      	bne.n	8001084 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000ff4:	f000 f856 	bl	80010a4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fc      	adds	r4, r7, r3
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_FLASHEx_Erase+0xe4>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff ff6a 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8001004:	0003      	movs	r3, r0
 8001006:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_FLASHEx_Erase+0xe8>)
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <HAL_FLASHEx_Erase+0xe8>)
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	611a      	str	r2, [r3, #16]
 8001014:	e036      	b.n	8001084 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_FLASHEx_Erase+0xe4>)
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <FLASH_WaitForLastOperation>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d130      	bne.n	8001084 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	4252      	negs	r2, r2
 8001028:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	e01f      	b.n	8001072 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f84d 	bl	80010d4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800103a:	250f      	movs	r5, #15
 800103c:	197c      	adds	r4, r7, r5
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_FLASHEx_Erase+0xe4>)
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff49 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8001046:	0003      	movs	r3, r0
 8001048:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_FLASHEx_Erase+0xe8>)
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_FLASHEx_Erase+0xe8>)
 8001050:	2102      	movs	r1, #2
 8001052:	438a      	bics	r2, r1
 8001054:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001056:	197b      	adds	r3, r7, r5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	601a      	str	r2, [r3, #0]
            break;
 8001064:	e00e      	b.n	8001084 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	00d2      	lsls	r2, r2, #3
 800106c:	4694      	mov	ip, r2
 800106e:	4463      	add	r3, ip
 8001070:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	029a      	lsls	r2, r3, #10
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3d6      	bcc.n	8001032 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_FLASHEx_Erase+0xe0>)
 8001086:	2200      	movs	r2, #0
 8001088:	761a      	strb	r2, [r3, #24]

  return status;
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bdb0      	pop	{r4, r5, r7, pc}
 8001098:	20000318 	.word	0x20000318
 800109c:	0000c350 	.word	0x0000c350
 80010a0:	40022000 	.word	0x40022000

080010a4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <FLASH_MassErase+0x28>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <FLASH_MassErase+0x2c>)
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <FLASH_MassErase+0x2c>)
 80010b4:	2104      	movs	r1, #4
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <FLASH_MassErase+0x2c>)
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <FLASH_MassErase+0x2c>)
 80010c0:	2140      	movs	r1, #64	; 0x40
 80010c2:	430a      	orrs	r2, r1
 80010c4:	611a      	str	r2, [r3, #16]
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000318 	.word	0x20000318
 80010d0:	40022000 	.word	0x40022000

080010d4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <FLASH_PageErase+0x34>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <FLASH_PageErase+0x38>)
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <FLASH_PageErase+0x38>)
 80010e8:	2102      	movs	r1, #2
 80010ea:	430a      	orrs	r2, r1
 80010ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <FLASH_PageErase+0x38>)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <FLASH_PageErase+0x38>)
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <FLASH_PageErase+0x38>)
 80010fa:	2140      	movs	r1, #64	; 0x40
 80010fc:	430a      	orrs	r2, r1
 80010fe:	611a      	str	r2, [r3, #16]
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000318 	.word	0x20000318
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e149      	b.n	80013b4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <HAL_GPIO_Init+0x28>
 8001136:	e13a      	b.n	80013ae <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d00b      	beq.n	8001158 <HAL_GPIO_Init+0x48>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114c:	2b11      	cmp	r3, #17
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b12      	cmp	r3, #18
 8001156:	d130      	bne.n	80011ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118e:	2201      	movs	r2, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	2201      	movs	r2, #1
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0xea>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	58d3      	ldr	r3, [r2, r3]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2107      	movs	r1, #7
 8001226:	400b      	ands	r3, r1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	401a      	ands	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	055b      	lsls	r3, r3, #21
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_GPIO_Init+0x174>
 8001282:	e094      	b.n	80013ae <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	589b      	ldr	r3, [r3, r2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2203      	movs	r2, #3
 80012ae:	4013      	ands	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	2390      	movs	r3, #144	; 0x90
 80012c4:	05db      	lsls	r3, r3, #23
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1d6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a41      	ldr	r2, [pc, #260]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1d2>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a40      	ldr	r2, [pc, #256]	; (80013d8 <HAL_GPIO_Init+0x2c8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1ce>
 80012da:	2302      	movs	r3, #2
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012de:	2305      	movs	r3, #5
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012e6:	2300      	movs	r3, #0
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2103      	movs	r1, #3
 80012ec:	400a      	ands	r2, r1
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	025b      	lsls	r3, r3, #9
 800131e:	4013      	ands	r3, r2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	4013      	ands	r3, r2
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	035b      	lsls	r3, r3, #13
 8001372:	4013      	ands	r3, r2
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	039b      	lsls	r3, r3, #14
 800139c:	4013      	ands	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	40da      	lsrs	r2, r3
 80013bc:	1e13      	subs	r3, r2, #0
 80013be:	d000      	beq.n	80013c2 <HAL_GPIO_Init+0x2b2>
 80013c0:	e6ae      	b.n	8001120 <HAL_GPIO_Init+0x10>
  } 
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b006      	add	sp, #24
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	0008      	movs	r0, r1
 80013ea:	0011      	movs	r1, r2
 80013ec:	1cbb      	adds	r3, r7, #2
 80013ee:	1c02      	adds	r2, r0, #0
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	1c7b      	adds	r3, r7, #1
 80013f4:	1c0a      	adds	r2, r1, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f8:	1c7b      	adds	r3, r7, #1
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	000a      	movs	r2, r1
 8001424:	1cbb      	adds	r3, r7, #2
 8001426:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142e:	1cbb      	adds	r3, r7, #2
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	1cb9      	adds	r1, r7, #2
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	400b      	ands	r3, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e303      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x1e>
 800146c:	e08d      	b.n	800158a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800146e:	4bc4      	ldr	r3, [pc, #784]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	220c      	movs	r2, #12
 8001474:	4013      	ands	r3, r2
 8001476:	2b04      	cmp	r3, #4
 8001478:	d00e      	beq.n	8001498 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800147a:	4bc1      	ldr	r3, [pc, #772]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	220c      	movs	r2, #12
 8001480:	4013      	ands	r3, r2
 8001482:	2b08      	cmp	r3, #8
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x64>
 8001486:	4bbe      	ldr	r3, [pc, #760]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	401a      	ands	r2, r3
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429a      	cmp	r2, r3
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4bb9      	ldr	r3, [pc, #740]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x56>
 80014a4:	e070      	b.n	8001588 <HAL_RCC_OscConfig+0x138>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d000      	beq.n	80014b0 <HAL_RCC_OscConfig+0x60>
 80014ae:	e06b      	b.n	8001588 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e2da      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_OscConfig+0x7c>
 80014bc:	4bb0      	ldr	r3, [pc, #704]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4baf      	ldr	r3, [pc, #700]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0249      	lsls	r1, r1, #9
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e02f      	b.n	800152c <HAL_RCC_OscConfig+0xdc>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10c      	bne.n	80014ee <HAL_RCC_OscConfig+0x9e>
 80014d4:	4baa      	ldr	r3, [pc, #680]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4ba9      	ldr	r3, [pc, #676]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014da:	49aa      	ldr	r1, [pc, #680]	; (8001784 <HAL_RCC_OscConfig+0x334>)
 80014dc:	400a      	ands	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	4ba7      	ldr	r3, [pc, #668]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4ba6      	ldr	r3, [pc, #664]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014e6:	49a8      	ldr	r1, [pc, #672]	; (8001788 <HAL_RCC_OscConfig+0x338>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e01e      	b.n	800152c <HAL_RCC_OscConfig+0xdc>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d10e      	bne.n	8001514 <HAL_RCC_OscConfig+0xc4>
 80014f6:	4ba2      	ldr	r3, [pc, #648]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4ba1      	ldr	r3, [pc, #644]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	02c9      	lsls	r1, r1, #11
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	4b9e      	ldr	r3, [pc, #632]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b9d      	ldr	r3, [pc, #628]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0249      	lsls	r1, r1, #9
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0xdc>
 8001514:	4b9a      	ldr	r3, [pc, #616]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b99      	ldr	r3, [pc, #612]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800151a:	499a      	ldr	r1, [pc, #616]	; (8001784 <HAL_RCC_OscConfig+0x334>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	4b97      	ldr	r3, [pc, #604]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b96      	ldr	r3, [pc, #600]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001526:	4998      	ldr	r1, [pc, #608]	; (8001788 <HAL_RCC_OscConfig+0x338>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d014      	beq.n	800155e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fb00 	bl	8000b38 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153e:	f7ff fafb 	bl	8000b38 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b64      	cmp	r3, #100	; 0x64
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e28c      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001550:	4b8b      	ldr	r3, [pc, #556]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	029b      	lsls	r3, r3, #10
 8001558:	4013      	ands	r3, r2
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0xee>
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff faeb 	bl	8000b38 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fae6 	bl	8000b38 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e277      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	4013      	ands	r3, r2
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x118>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x146>
 8001594:	e069      	b.n	800166a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001596:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	220c      	movs	r2, #12
 800159c:	4013      	ands	r3, r2
 800159e:	d00b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015a0:	4b77      	ldr	r3, [pc, #476]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	220c      	movs	r2, #12
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d11c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x196>
 80015ac:	4b74      	ldr	r3, [pc, #464]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	4013      	ands	r3, r2
 80015b6:	d116      	bne.n	80015e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b8:	4b71      	ldr	r3, [pc, #452]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x17e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e24d      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	22f8      	movs	r2, #248	; 0xf8
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00da      	lsls	r2, r3, #3
 80015de:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e4:	e041      	b.n	800166a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d024      	beq.n	8001638 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ee:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fa9d 	bl	8000b38 <HAL_GetTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff fa98 	bl	8000b38 <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e229      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001616:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	d0f1      	beq.n	8001604 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	22f8      	movs	r2, #248	; 0xf8
 8001626:	4393      	bics	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	00da      	lsls	r2, r3, #3
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001638:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa78 	bl	8000b38 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fa73 	bl	8000b38 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e204      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001660:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d1f1      	bne.n	800164e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2208      	movs	r2, #8
 8001670:	4013      	ands	r3, r2
 8001672:	d036      	beq.n	80016e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d019      	beq.n	80016b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167c:	4b40      	ldr	r3, [pc, #256]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 800167e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001682:	2101      	movs	r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff fa56 	bl	8000b38 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fa51 	bl	8000b38 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1e2      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a4:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0f1      	beq.n	8001692 <HAL_RCC_OscConfig+0x242>
 80016ae:	e018      	b.n	80016e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	438a      	bics	r2, r1
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fa3c 	bl	8000b38 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fa37 	bl	8000b38 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1c8      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d1f1      	bne.n	80016c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2204      	movs	r2, #4
 80016e8:	4013      	ands	r3, r2
 80016ea:	d100      	bne.n	80016ee <HAL_RCC_OscConfig+0x29e>
 80016ec:	e0b6      	b.n	800185c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	231f      	movs	r3, #31
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	055b      	lsls	r3, r3, #21
 80016fe:	4013      	ands	r3, r2
 8001700:	d111      	bne.n	8001726 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0549      	lsls	r1, r1, #21
 800170c:	430a      	orrs	r2, r1
 800170e:	61da      	str	r2, [r3, #28]
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001712:	69da      	ldr	r2, [r3, #28]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	055b      	lsls	r3, r3, #21
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800171e:	231f      	movs	r3, #31
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_RCC_OscConfig+0x33c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4013      	ands	r3, r2
 8001730:	d11a      	bne.n	8001768 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_RCC_OscConfig+0x33c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_RCC_OscConfig+0x33c>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0049      	lsls	r1, r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001740:	f7ff f9fa 	bl	8000b38 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff f9f5 	bl	8000b38 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e186      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x33c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10f      	bne.n	8001790 <HAL_RCC_OscConfig+0x340>
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_RCC_OscConfig+0x330>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
 800177c:	e036      	b.n	80017ec <HAL_RCC_OscConfig+0x39c>
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	40021000 	.word	0x40021000
 8001784:	fffeffff 	.word	0xfffeffff
 8001788:	fffbffff 	.word	0xfffbffff
 800178c:	40007000 	.word	0x40007000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10c      	bne.n	80017b2 <HAL_RCC_OscConfig+0x362>
 8001798:	4bb6      	ldr	r3, [pc, #728]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4bb5      	ldr	r3, [pc, #724]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	621a      	str	r2, [r3, #32]
 80017a4:	4bb3      	ldr	r3, [pc, #716]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017a6:	6a1a      	ldr	r2, [r3, #32]
 80017a8:	4bb2      	ldr	r3, [pc, #712]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017aa:	2104      	movs	r1, #4
 80017ac:	438a      	bics	r2, r1
 80017ae:	621a      	str	r2, [r3, #32]
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x39c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x384>
 80017ba:	4bae      	ldr	r3, [pc, #696]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	4bad      	ldr	r3, [pc, #692]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017c0:	2104      	movs	r1, #4
 80017c2:	430a      	orrs	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]
 80017c6:	4bab      	ldr	r3, [pc, #684]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017c8:	6a1a      	ldr	r2, [r3, #32]
 80017ca:	4baa      	ldr	r3, [pc, #680]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017cc:	2101      	movs	r1, #1
 80017ce:	430a      	orrs	r2, r1
 80017d0:	621a      	str	r2, [r3, #32]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x39c>
 80017d4:	4ba7      	ldr	r3, [pc, #668]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4ba6      	ldr	r3, [pc, #664]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017da:	2101      	movs	r1, #1
 80017dc:	438a      	bics	r2, r1
 80017de:	621a      	str	r2, [r3, #32]
 80017e0:	4ba4      	ldr	r3, [pc, #656]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4ba3      	ldr	r3, [pc, #652]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80017e6:	2104      	movs	r1, #4
 80017e8:	438a      	bics	r2, r1
 80017ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d014      	beq.n	800181e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7ff f9a0 	bl	8000b38 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	e009      	b.n	8001812 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff f99b 	bl	8000b38 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a9b      	ldr	r2, [pc, #620]	; (8001a78 <HAL_RCC_OscConfig+0x628>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e12b      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	4b98      	ldr	r3, [pc, #608]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x3ae>
 800181c:	e013      	b.n	8001846 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff f98b 	bl	8000b38 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	e009      	b.n	800183c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff f986 	bl	8000b38 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	4a91      	ldr	r2, [pc, #580]	; (8001a78 <HAL_RCC_OscConfig+0x628>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e116      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	2202      	movs	r2, #2
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001846:	231f      	movs	r3, #31
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	4b87      	ldr	r3, [pc, #540]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001856:	4989      	ldr	r1, [pc, #548]	; (8001a7c <HAL_RCC_OscConfig+0x62c>)
 8001858:	400a      	ands	r2, r1
 800185a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2210      	movs	r2, #16
 8001862:	4013      	ands	r3, r2
 8001864:	d063      	beq.n	800192e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d12a      	bne.n	80018c4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800186e:	4b81      	ldr	r3, [pc, #516]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001872:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001874:	2104      	movs	r1, #4
 8001876:	430a      	orrs	r2, r1
 8001878:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800187a:	4b7e      	ldr	r3, [pc, #504]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 800187c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187e:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff f957 	bl	8000b38 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001890:	f7ff f952 	bl	8000b38 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0e3      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018a2:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	2202      	movs	r2, #2
 80018a8:	4013      	ands	r3, r2
 80018aa:	d0f1      	beq.n	8001890 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018ac:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	22f8      	movs	r2, #248	; 0xf8
 80018b2:	4393      	bics	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	00da      	lsls	r2, r3, #3
 80018bc:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
 80018c2:	e034      	b.n	800192e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	3305      	adds	r3, #5
 80018ca:	d111      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018cc:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018d2:	2104      	movs	r1, #4
 80018d4:	438a      	bics	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d8:	4b66      	ldr	r3, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	22f8      	movs	r2, #248	; 0xf8
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	00da      	lsls	r2, r3, #3
 80018e8:	4b62      	ldr	r3, [pc, #392]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	e01e      	b.n	800192e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018f0:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f4:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018f6:	2104      	movs	r1, #4
 80018f8:	430a      	orrs	r2, r1
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018fc:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80018fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001900:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff f916 	bl	8000b38 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001912:	f7ff f911 	bl	8000b38 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0a2      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d100      	bne.n	8001938 <HAL_RCC_OscConfig+0x4e8>
 8001936:	e097      	b.n	8001a68 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001938:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	220c      	movs	r2, #12
 800193e:	4013      	ands	r3, r2
 8001940:	2b08      	cmp	r3, #8
 8001942:	d100      	bne.n	8001946 <HAL_RCC_OscConfig+0x4f6>
 8001944:	e06b      	b.n	8001a1e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d14c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001954:	494a      	ldr	r1, [pc, #296]	; (8001a80 <HAL_RCC_OscConfig+0x630>)
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff f8ed 	bl	8000b38 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f8e8 	bl	8000b38 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e079      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	049b      	lsls	r3, r3, #18
 800197e:	4013      	ands	r3, r2
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001982:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	220f      	movs	r2, #15
 8001988:	4393      	bics	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <HAL_RCC_OscConfig+0x634>)
 800199c:	4013      	ands	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	431a      	orrs	r2, r3
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0449      	lsls	r1, r1, #17
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f8bb 	bl	8000b38 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f8b6 	bl	8000b38 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e047      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	049b      	lsls	r3, r3, #18
 80019e2:	4013      	ands	r3, r2
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x578>
 80019e6:	e03f      	b.n	8001a68 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x630>)
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8a0 	bl	8000b38 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f89b 	bl	8000b38 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e02c      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	049b      	lsls	r3, r3, #18
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x5ae>
 8001a1c:	e024      	b.n	8001a68 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e01f      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_RCC_OscConfig+0x624>)
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	025b      	lsls	r3, r3, #9
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d10e      	bne.n	8001a64 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	220f      	movs	r2, #15
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	23f0      	movs	r3, #240	; 0xf0
 8001a58:	039b      	lsls	r3, r3, #14
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b008      	add	sp, #32
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000
 8001a78:	00001388 	.word	0x00001388
 8001a7c:	efffffff 	.word	0xefffffff
 8001a80:	feffffff 	.word	0xfeffffff
 8001a84:	ffc2ffff 	.word	0xffc2ffff

08001a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b3      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d911      	bls.n	8001ace <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09a      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d015      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2204      	movs	r2, #4
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d006      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001ae8:	21e0      	movs	r1, #224	; 0xe0
 8001aea:	00c9      	lsls	r1, r1, #3
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	22f0      	movs	r2, #240	; 0xf0
 8001af6:	4393      	bics	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d040      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d114      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	049b      	lsls	r3, r3, #18
 8001b36:	4013      	ands	r3, r2
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e062      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e05b      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4393      	bics	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7fe ffea 	bl	8000b38 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7fe ffe5 	bl	8000b38 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a27      	ldr	r2, [pc, #156]	; (8001c14 <HAL_RCC_ClockConfig+0x18c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e042      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	220c      	movs	r2, #12
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1ec      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d211      	bcs.n	8001bc2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_RCC_ClockConfig+0x184>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e020      	b.n	8001c04 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_RCC_ClockConfig+0x190>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001be0:	f000 f820 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be4:	0001      	movs	r1, r0
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_ClockConfig+0x188>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	220f      	movs	r2, #15
 8001bee:	4013      	ands	r3, r2
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x194>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	40da      	lsrs	r2, r3
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x198>)
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7fe ff55 	bl	8000aac <HAL_InitTick>
  
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b004      	add	sp, #16
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	00001388 	.word	0x00001388
 8001c18:	fffff8ff 	.word	0xfffff8ff
 8001c1c:	080033c4 	.word	0x080033c4
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08f      	sub	sp, #60	; 0x3c
 8001c28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c2a:	2314      	movs	r3, #20
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	4a2b      	ldr	r2, [pc, #172]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c32:	c313      	stmia	r3!, {r0, r1, r4}
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	220c      	movs	r2, #12
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d002      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x4a>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d003      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x50>
 8001c6c:	e02d      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c72:	e02d      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c76:	0c9b      	lsrs	r3, r3, #18
 8001c78:	220f      	movs	r2, #15
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2214      	movs	r2, #20
 8001c7e:	18ba      	adds	r2, r7, r2
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	220f      	movs	r2, #15
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	1d3a      	adds	r2, r7, #4
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	025b      	lsls	r3, r3, #9
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c9e:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ca0:	f7fe fa3a 	bl	8000118 <__udivsi3>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	4353      	muls	r3, r2
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
 8001cae:	e009      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cb2:	000a      	movs	r2, r1
 8001cb4:	0152      	lsls	r2, r2, #5
 8001cb6:	1a52      	subs	r2, r2, r1
 8001cb8:	0193      	lsls	r3, r2, #6
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	185b      	adds	r3, r3, r1
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b00f      	add	sp, #60	; 0x3c
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	080033a4 	.word	0x080033a4
 8001ce0:	080033b4 	.word	0x080033b4
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	007a1200 	.word	0x007a1200

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d04:	f7ff fff2 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d08:	0001      	movs	r1, r0
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	2207      	movs	r2, #7
 8001d12:	4013      	ands	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	40d9      	lsrs	r1, r3
 8001d1a:	000b      	movs	r3, r1
}    
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	080033d4 	.word	0x080033d4

08001d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	025b      	lsls	r3, r3, #9
 8001d44:	4013      	ands	r3, r2
 8001d46:	d100      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d48:	e08f      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2317      	movs	r3, #23
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	055b      	lsls	r3, r3, #21
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d111      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0549      	lsls	r1, r1, #21
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	61da      	str	r2, [r3, #28]
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	055b      	lsls	r3, r3, #21
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2317      	movs	r3, #23
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0049      	lsls	r1, r1, #1
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe fecc 	bl	8000b38 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7fe fec7 	bl	8000b38 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e077      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc6:	6a1a      	ldr	r2, [r3, #32]
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d034      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	23c0      	movs	r3, #192	; 0xc0
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d02c      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a33      	ldr	r2, [pc, #204]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	0249      	lsls	r1, r1, #9
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e04:	492d      	ldr	r1, [pc, #180]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe fe8e 	bl	8000b38 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e009      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fe89 	bl	8000b38 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e038      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e54:	2317      	movs	r3, #23
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e64:	4917      	ldr	r1, [pc, #92]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	2210      	movs	r2, #16
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b006      	add	sp, #24
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	fffffcff 	.word	0xfffffcff
 8001ebc:	fffeffff 	.word	0xfffeffff
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	efffffff 	.word	0xefffffff

08001ec8 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e081      	b.n	8001fde <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7f5b      	ldrb	r3, [r3, #29]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7fe fc8f 	bl	8000810 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	22ca      	movs	r2, #202	; 0xca
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2253      	movs	r2, #83	; 0x53
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f9fb 	bl	8002306 <RTC_EnterInitMode>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e05b      	b.n	8001fde <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	492d      	ldr	r1, [pc, #180]	; (8001fe8 <HAL_RTC_Init+0x120>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68d2      	ldr	r2, [r2, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6919      	ldr	r1, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	438a      	bics	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d10e      	bne.n	8001fac <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 f98f 	bl	80022b4 <HAL_RTC_WaitForSynchro>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d008      	beq.n	8001fac <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e018      	b.n	8001fde <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	490d      	ldr	r1, [pc, #52]	; (8001fec <HAL_RTC_Init+0x124>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
  }
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	ff8fffbf 	.word	0xff8fffbf
 8001fec:	fffbffff 	.word	0xfffbffff

08001ff0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	7f1b      	ldrb	r3, [r3, #28]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_RTC_SetTime+0x1c>
 8002008:	2302      	movs	r3, #2
 800200a:	e0a5      	b.n	8002158 <HAL_RTC_SetTime+0x168>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2202      	movs	r2, #2
 8002016:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d125      	bne.n	800206a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	4013      	ands	r3, r2
 8002028:	d102      	bne.n	8002030 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2200      	movs	r2, #0
 800202e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	0018      	movs	r0, r3
 8002036:	f000 f992 	bl	800235e <RTC_ByteToBcd2>
 800203a:	0003      	movs	r3, r0
 800203c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f98b 	bl	800235e <RTC_ByteToBcd2>
 8002048:	0003      	movs	r3, r0
 800204a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800204c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	789b      	ldrb	r3, [r3, #2]
 8002052:	0018      	movs	r0, r3
 8002054:	f000 f983 	bl	800235e <RTC_ByteToBcd2>
 8002058:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800205a:	0022      	movs	r2, r4
 800205c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e017      	b.n	800209a <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	4013      	ands	r3, r2
 8002074:	d102      	bne.n	800207c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002088:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800208e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	78db      	ldrb	r3, [r3, #3]
 8002094:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	22ca      	movs	r2, #202	; 0xca
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2253      	movs	r2, #83	; 0x53
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f92a 	bl	8002306 <RTC_EnterInitMode>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2204      	movs	r2, #4
 80020c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e044      	b.n	8002158 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4922      	ldr	r1, [pc, #136]	; (8002160 <HAL_RTC_SetTime+0x170>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	491f      	ldr	r1, [pc, #124]	; (8002164 <HAL_RTC_SetTime+0x174>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	438a      	bics	r2, r1
 8002110:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2220      	movs	r2, #32
 800211a:	4013      	ands	r3, r2
 800211c:	d111      	bne.n	8002142 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f8c7 	bl	80022b4 <HAL_RTC_WaitForSynchro>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2204      	movs	r2, #4
 8002136:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00a      	b.n	8002158 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
  }
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b007      	add	sp, #28
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	007f7f7f 	.word	0x007f7f7f
 8002164:	fffbffff 	.word	0xfffbffff

08002168 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	7f1b      	ldrb	r3, [r3, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_RTC_SetDate+0x1c>
 8002180:	2302      	movs	r3, #2
 8002182:	e091      	b.n	80022a8 <HAL_RTC_SetDate+0x140>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <HAL_RTC_SetDate+0x4c>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	001a      	movs	r2, r3
 800219c:	2310      	movs	r3, #16
 800219e:	4013      	ands	r3, r2
 80021a0:	d008      	beq.n	80021b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2210      	movs	r2, #16
 80021a8:	4393      	bics	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	330a      	adds	r3, #10
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11c      	bne.n	80021f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f8cd 	bl	800235e <RTC_ByteToBcd2>
 80021c4:	0003      	movs	r3, r0
 80021c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	785b      	ldrb	r3, [r3, #1]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f8c6 	bl	800235e <RTC_ByteToBcd2>
 80021d2:	0003      	movs	r3, r0
 80021d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	789b      	ldrb	r3, [r3, #2]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f8be 	bl	800235e <RTC_ByteToBcd2>
 80021e2:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021e4:	0022      	movs	r2, r4
 80021e6:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e00e      	b.n	8002212 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	78db      	ldrb	r3, [r3, #3]
 80021f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002200:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002206:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	22ca      	movs	r2, #202	; 0xca
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2253      	movs	r2, #83	; 0x53
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f86e 	bl	8002306 <RTC_EnterInitMode>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	22ff      	movs	r2, #255	; 0xff
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2204      	movs	r2, #4
 800223a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e030      	b.n	80022a8 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4918      	ldr	r1, [pc, #96]	; (80022b0 <HAL_RTC_SetDate+0x148>)
 800224e:	400a      	ands	r2, r1
 8002250:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	438a      	bics	r2, r1
 8002260:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2220      	movs	r2, #32
 800226a:	4013      	ands	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f81f 	bl	80022b4 <HAL_RTC_WaitForSynchro>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	22ff      	movs	r2, #255	; 0xff
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2204      	movs	r2, #4
 8002286:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00a      	b.n	80022a8 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
  }
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b007      	add	sp, #28
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	00ffff3f 	.word	0x00ffff3f

080022b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	21a0      	movs	r1, #160	; 0xa0
 80022cc:	438a      	bics	r2, r1
 80022ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80022d0:	f7fe fc32 	bl	8000b38 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022da:	f7fe fc2d 	bl	8000b38 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	23fa      	movs	r3, #250	; 0xfa
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d901      	bls.n	80022f0 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0ee      	beq.n	80022da <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}

08002306 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	4013      	ands	r3, r2
 800231c:	d11a      	bne.n	8002354 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2201      	movs	r2, #1
 8002324:	4252      	negs	r2, r2
 8002326:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002328:	f7fe fc06 	bl	8000b38 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002330:	e00a      	b.n	8002348 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002332:	f7fe fc01 	bl	8000b38 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	23fa      	movs	r3, #250	; 0xfa
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d901      	bls.n	8002348 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	4013      	ands	r3, r2
 8002352:	d0ee      	beq.n	8002332 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b004      	add	sp, #16
 800235c:	bd80      	pop	{r7, pc}

0800235e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	0002      	movs	r2, r0
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800236e:	e007      	b.n	8002380 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	1dfa      	adds	r2, r7, #7
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	3a0a      	subs	r2, #10
 800237e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b09      	cmp	r3, #9
 8002386:	d8f3      	bhi.n	8002370 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	b2da      	uxtb	r2, r3
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	b2db      	uxtb	r3, r3
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b004      	add	sp, #16
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e044      	b.n	800243c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2274      	movs	r2, #116	; 0x74
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fe fae5 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2224      	movs	r2, #36	; 0x24
 80023ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f830 	bl	8002448 <UART_SetConfig>
 80023e8:	0003      	movs	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e024      	b.n	800243c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f949 	bl	8002694 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <HAL_UART_Init+0xa4>)
 800240e:	400a      	ands	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	212a      	movs	r1, #42	; 0x2a
 800241e:	438a      	bics	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f9e1 	bl	80027fc <UART_CheckIdleState>
 800243a:	0003      	movs	r3, r0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	ffffb7ff 	.word	0xffffb7ff

08002448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002450:	231e      	movs	r3, #30
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a81      	ldr	r2, [pc, #516]	; (800267c <UART_SetConfig+0x234>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a7c      	ldr	r2, [pc, #496]	; (8002680 <UART_SetConfig+0x238>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a73      	ldr	r2, [pc, #460]	; (8002684 <UART_SetConfig+0x23c>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024c4:	4b70      	ldr	r3, [pc, #448]	; (8002688 <UART_SetConfig+0x240>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d00f      	beq.n	80024f0 <UART_SetConfig+0xa8>
 80024d0:	d304      	bcc.n	80024dc <UART_SetConfig+0x94>
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d011      	beq.n	80024fa <UART_SetConfig+0xb2>
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d005      	beq.n	80024e6 <UART_SetConfig+0x9e>
 80024da:	e013      	b.n	8002504 <UART_SetConfig+0xbc>
 80024dc:	231f      	movs	r3, #31
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e012      	b.n	800250c <UART_SetConfig+0xc4>
 80024e6:	231f      	movs	r3, #31
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e00d      	b.n	800250c <UART_SetConfig+0xc4>
 80024f0:	231f      	movs	r3, #31
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2204      	movs	r2, #4
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e008      	b.n	800250c <UART_SetConfig+0xc4>
 80024fa:	231f      	movs	r3, #31
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2208      	movs	r2, #8
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e003      	b.n	800250c <UART_SetConfig+0xc4>
 8002504:	231f      	movs	r3, #31
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2210      	movs	r2, #16
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	429a      	cmp	r2, r3
 8002518:	d15c      	bne.n	80025d4 <UART_SetConfig+0x18c>
  {
    switch (clocksource)
 800251a:	231f      	movs	r3, #31
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d00d      	beq.n	8002540 <UART_SetConfig+0xf8>
 8002524:	dc02      	bgt.n	800252c <UART_SetConfig+0xe4>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <UART_SetConfig+0xee>
 800252a:	e015      	b.n	8002558 <UART_SetConfig+0x110>
 800252c:	2b04      	cmp	r3, #4
 800252e:	d00a      	beq.n	8002546 <UART_SetConfig+0xfe>
 8002530:	2b08      	cmp	r3, #8
 8002532:	d00d      	beq.n	8002550 <UART_SetConfig+0x108>
 8002534:	e010      	b.n	8002558 <UART_SetConfig+0x110>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002536:	f7ff fbe3 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 800253a:	0003      	movs	r3, r0
 800253c:	61bb      	str	r3, [r7, #24]
        break;
 800253e:	e012      	b.n	8002566 <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002540:	4b52      	ldr	r3, [pc, #328]	; (800268c <UART_SetConfig+0x244>)
 8002542:	61bb      	str	r3, [r7, #24]
        break;
 8002544:	e00f      	b.n	8002566 <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002546:	f7ff fb6d 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 800254a:	0003      	movs	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]
        break;
 800254e:	e00a      	b.n	8002566 <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	61bb      	str	r3, [r7, #24]
        break;
 8002556:	e006      	b.n	8002566 <UART_SetConfig+0x11e>
      default:
        pclk = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800255c:	231e      	movs	r3, #30
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
        break;
 8002564:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <UART_SetConfig+0x126>
 800256c:	e079      	b.n	8002662 <UART_SetConfig+0x21a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	005a      	lsls	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	18d2      	adds	r2, r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0019      	movs	r1, r3
 8002580:	0010      	movs	r0, r2
 8002582:	f7fd fdc9 	bl	8000118 <__udivsi3>
 8002586:	0003      	movs	r3, r0
 8002588:	b29b      	uxth	r3, r3
 800258a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d91b      	bls.n	80025ca <UART_SetConfig+0x182>
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <UART_SetConfig+0x248>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d817      	bhi.n	80025ca <UART_SetConfig+0x182>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	b29a      	uxth	r2, r3
 800259e:	200e      	movs	r0, #14
 80025a0:	183b      	adds	r3, r7, r0
 80025a2:	210f      	movs	r1, #15
 80025a4:	438a      	bics	r2, r1
 80025a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2207      	movs	r2, #7
 80025b0:	4013      	ands	r3, r2
 80025b2:	b299      	uxth	r1, r3
 80025b4:	183b      	adds	r3, r7, r0
 80025b6:	183a      	adds	r2, r7, r0
 80025b8:	8812      	ldrh	r2, [r2, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	183a      	adds	r2, r7, r0
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	e04b      	b.n	8002662 <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 80025ca:	231e      	movs	r3, #30
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e046      	b.n	8002662 <UART_SetConfig+0x21a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025d4:	231f      	movs	r3, #31
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d00d      	beq.n	80025fa <UART_SetConfig+0x1b2>
 80025de:	dc02      	bgt.n	80025e6 <UART_SetConfig+0x19e>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <UART_SetConfig+0x1a8>
 80025e4:	e015      	b.n	8002612 <UART_SetConfig+0x1ca>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00a      	beq.n	8002600 <UART_SetConfig+0x1b8>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d00d      	beq.n	800260a <UART_SetConfig+0x1c2>
 80025ee:	e010      	b.n	8002612 <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f0:	f7ff fb86 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
        break;
 80025f8:	e012      	b.n	8002620 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <UART_SetConfig+0x244>)
 80025fc:	61bb      	str	r3, [r7, #24]
        break;
 80025fe:	e00f      	b.n	8002620 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002600:	f7ff fb10 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8002604:	0003      	movs	r3, r0
 8002606:	61bb      	str	r3, [r7, #24]
        break;
 8002608:	e00a      	b.n	8002620 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	61bb      	str	r3, [r7, #24]
        break;
 8002610:	e006      	b.n	8002620 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002616:	231e      	movs	r3, #30
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
        break;
 800261e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01d      	beq.n	8002662 <UART_SetConfig+0x21a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	085a      	lsrs	r2, r3, #1
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	18d2      	adds	r2, r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f7fd fd6e 	bl	8000118 <__udivsi3>
 800263c:	0003      	movs	r3, r0
 800263e:	b29b      	uxth	r3, r3
 8002640:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d908      	bls.n	800265a <UART_SetConfig+0x212>
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4a11      	ldr	r2, [pc, #68]	; (8002690 <UART_SetConfig+0x248>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d804      	bhi.n	800265a <UART_SetConfig+0x212>
      {
        huart->Instance->BRR = usartdiv;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	e003      	b.n	8002662 <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 800265a:	231e      	movs	r3, #30
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800266e:	231e      	movs	r3, #30
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b008      	add	sp, #32
 800267a:	bd80      	pop	{r7, pc}
 800267c:	ffff69f3 	.word	0xffff69f3
 8002680:	ffffcfff 	.word	0xffffcfff
 8002684:	fffff4ff 	.word	0xfffff4ff
 8002688:	40021000 	.word	0x40021000
 800268c:	007a1200 	.word	0x007a1200
 8002690:	0000ffff 	.word	0x0000ffff

08002694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	d00b      	beq.n	80026be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <UART_AdvFeatureConfig+0x144>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a43      	ldr	r2, [pc, #268]	; (80027dc <UART_AdvFeatureConfig+0x148>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2204      	movs	r2, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d00b      	beq.n	8002702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <UART_AdvFeatureConfig+0x14c>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2208      	movs	r2, #8
 8002708:	4013      	ands	r3, r2
 800270a:	d00b      	beq.n	8002724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a34      	ldr	r2, [pc, #208]	; (80027e4 <UART_AdvFeatureConfig+0x150>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2210      	movs	r2, #16
 800272a:	4013      	ands	r3, r2
 800272c:	d00b      	beq.n	8002746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <UART_AdvFeatureConfig+0x154>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2220      	movs	r2, #32
 800274c:	4013      	ands	r3, r2
 800274e:	d00b      	beq.n	8002768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4a25      	ldr	r2, [pc, #148]	; (80027ec <UART_AdvFeatureConfig+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2240      	movs	r2, #64	; 0x40
 800276e:	4013      	ands	r3, r2
 8002770:	d01d      	beq.n	80027ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <UART_AdvFeatureConfig+0x15c>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	035b      	lsls	r3, r3, #13
 8002792:	429a      	cmp	r2, r3
 8002794:	d10b      	bne.n	80027ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <UART_AdvFeatureConfig+0x160>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	4013      	ands	r3, r2
 80027b6:	d00b      	beq.n	80027d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <UART_AdvFeatureConfig+0x164>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]
  }
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	fffdffff 	.word	0xfffdffff
 80027dc:	fffeffff 	.word	0xfffeffff
 80027e0:	fffbffff 	.word	0xfffbffff
 80027e4:	ffff7fff 	.word	0xffff7fff
 80027e8:	ffffefff 	.word	0xffffefff
 80027ec:	ffffdfff 	.word	0xffffdfff
 80027f0:	ffefffff 	.word	0xffefffff
 80027f4:	ff9fffff 	.word	0xff9fffff
 80027f8:	fff7ffff 	.word	0xfff7ffff

080027fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af02      	add	r7, sp, #8
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	2100      	movs	r1, #0
 800280a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800280c:	f7fe f994 	bl	8000b38 <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2208      	movs	r2, #8
 800281c:	4013      	ands	r3, r2
 800281e:	2b08      	cmp	r3, #8
 8002820:	d10d      	bne.n	800283e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	0399      	lsls	r1, r3, #14
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <UART_CheckIdleState+0x90>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	0013      	movs	r3, r2
 8002830:	2200      	movs	r2, #0
 8002832:	f000 f82d 	bl	8002890 <UART_WaitOnFlagUntilTimeout>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e022      	b.n	8002884 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2204      	movs	r2, #4
 8002846:	4013      	ands	r3, r2
 8002848:	2b04      	cmp	r3, #4
 800284a:	d10d      	bne.n	8002868 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	03d9      	lsls	r1, r3, #15
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <UART_CheckIdleState+0x90>)
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	0013      	movs	r3, r2
 800285a:	2200      	movs	r2, #0
 800285c:	f000 f818 	bl	8002890 <UART_WaitOnFlagUntilTimeout>
 8002860:	1e03      	subs	r3, r0, #0
 8002862:	d001      	beq.n	8002868 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e00d      	b.n	8002884 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2274      	movs	r2, #116	; 0x74
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}
 800288c:	01ffffff 	.word	0x01ffffff

08002890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a0:	e05e      	b.n	8002960 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3301      	adds	r3, #1
 80028a6:	d05b      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a8:	f7fe f946 	bl	8000b38 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d302      	bcc.n	80028be <UART_WaitOnFlagUntilTimeout+0x2e>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11b      	bne.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	492f      	ldr	r1, [pc, #188]	; (8002988 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	438a      	bics	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2274      	movs	r2, #116	; 0x74
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e044      	b.n	8002980 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2204      	movs	r2, #4
 80028fe:	4013      	ands	r3, r2
 8002900:	d02e      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	401a      	ands	r2, r3
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	429a      	cmp	r2, r3
 8002914:	d124      	bne.n	8002960 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4917      	ldr	r1, [pc, #92]	; (8002988 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	438a      	bics	r2, r1
 800293e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2120      	movs	r1, #32
 8002952:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2274      	movs	r2, #116	; 0x74
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e00f      	b.n	8002980 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	425a      	negs	r2, r3
 8002970:	4153      	adcs	r3, r2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	001a      	movs	r2, r3
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d091      	beq.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b004      	add	sp, #16
 8002986:	bd80      	pop	{r7, pc}
 8002988:	fffffe5f 	.word	0xfffffe5f

0800298c <atoi>:
 800298c:	b510      	push	{r4, lr}
 800298e:	220a      	movs	r2, #10
 8002990:	2100      	movs	r1, #0
 8002992:	f000 f8d5 	bl	8002b40 <strtol>
 8002996:	bd10      	pop	{r4, pc}

08002998 <__errno>:
 8002998:	4b01      	ldr	r3, [pc, #4]	; (80029a0 <__errno+0x8>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	4770      	bx	lr
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <__libc_init_array>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2600      	movs	r6, #0
 80029a8:	4d0c      	ldr	r5, [pc, #48]	; (80029dc <__libc_init_array+0x38>)
 80029aa:	4c0d      	ldr	r4, [pc, #52]	; (80029e0 <__libc_init_array+0x3c>)
 80029ac:	1b64      	subs	r4, r4, r5
 80029ae:	10a4      	asrs	r4, r4, #2
 80029b0:	42a6      	cmp	r6, r4
 80029b2:	d109      	bne.n	80029c8 <__libc_init_array+0x24>
 80029b4:	2600      	movs	r6, #0
 80029b6:	f000 fce1 	bl	800337c <_init>
 80029ba:	4d0a      	ldr	r5, [pc, #40]	; (80029e4 <__libc_init_array+0x40>)
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <__libc_init_array+0x44>)
 80029be:	1b64      	subs	r4, r4, r5
 80029c0:	10a4      	asrs	r4, r4, #2
 80029c2:	42a6      	cmp	r6, r4
 80029c4:	d105      	bne.n	80029d2 <__libc_init_array+0x2e>
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	00b3      	lsls	r3, r6, #2
 80029ca:	58eb      	ldr	r3, [r5, r3]
 80029cc:	4798      	blx	r3
 80029ce:	3601      	adds	r6, #1
 80029d0:	e7ee      	b.n	80029b0 <__libc_init_array+0xc>
 80029d2:	00b3      	lsls	r3, r6, #2
 80029d4:	58eb      	ldr	r3, [r5, r3]
 80029d6:	4798      	blx	r3
 80029d8:	3601      	adds	r6, #1
 80029da:	e7f2      	b.n	80029c2 <__libc_init_array+0x1e>
 80029dc:	0800351c 	.word	0x0800351c
 80029e0:	0800351c 	.word	0x0800351c
 80029e4:	0800351c 	.word	0x0800351c
 80029e8:	08003520 	.word	0x08003520

080029ec <memset>:
 80029ec:	0003      	movs	r3, r0
 80029ee:	1812      	adds	r2, r2, r0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	7019      	strb	r1, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <siprintf>:
 80029fc:	b40e      	push	{r1, r2, r3}
 80029fe:	b500      	push	{lr}
 8002a00:	490b      	ldr	r1, [pc, #44]	; (8002a30 <siprintf+0x34>)
 8002a02:	b09c      	sub	sp, #112	; 0x70
 8002a04:	ab1d      	add	r3, sp, #116	; 0x74
 8002a06:	9002      	str	r0, [sp, #8]
 8002a08:	9006      	str	r0, [sp, #24]
 8002a0a:	9107      	str	r1, [sp, #28]
 8002a0c:	9104      	str	r1, [sp, #16]
 8002a0e:	4809      	ldr	r0, [pc, #36]	; (8002a34 <siprintf+0x38>)
 8002a10:	4909      	ldr	r1, [pc, #36]	; (8002a38 <siprintf+0x3c>)
 8002a12:	cb04      	ldmia	r3!, {r2}
 8002a14:	9105      	str	r1, [sp, #20]
 8002a16:	6800      	ldr	r0, [r0, #0]
 8002a18:	a902      	add	r1, sp, #8
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	f000 f91c 	bl	8002c58 <_svfiprintf_r>
 8002a20:	2300      	movs	r3, #0
 8002a22:	9a02      	ldr	r2, [sp, #8]
 8002a24:	7013      	strb	r3, [r2, #0]
 8002a26:	b01c      	add	sp, #112	; 0x70
 8002a28:	bc08      	pop	{r3}
 8002a2a:	b003      	add	sp, #12
 8002a2c:	4718      	bx	r3
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	7fffffff 	.word	0x7fffffff
 8002a34:	2000000c 	.word	0x2000000c
 8002a38:	ffff0208 	.word	0xffff0208

08002a3c <_strtol_l.isra.0>:
 8002a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3e:	001f      	movs	r7, r3
 8002a40:	000e      	movs	r6, r1
 8002a42:	b087      	sub	sp, #28
 8002a44:	9005      	str	r0, [sp, #20]
 8002a46:	9101      	str	r1, [sp, #4]
 8002a48:	9202      	str	r2, [sp, #8]
 8002a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002a4c:	7834      	ldrb	r4, [r6, #0]
 8002a4e:	f000 f88b 	bl	8002b68 <__locale_ctype_ptr_l>
 8002a52:	2208      	movs	r2, #8
 8002a54:	1900      	adds	r0, r0, r4
 8002a56:	7843      	ldrb	r3, [r0, #1]
 8002a58:	1c75      	adds	r5, r6, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d136      	bne.n	8002acc <_strtol_l.isra.0+0x90>
 8002a5e:	2c2d      	cmp	r4, #45	; 0x2d
 8002a60:	d136      	bne.n	8002ad0 <_strtol_l.isra.0+0x94>
 8002a62:	1cb5      	adds	r5, r6, #2
 8002a64:	7874      	ldrb	r4, [r6, #1]
 8002a66:	2601      	movs	r6, #1
 8002a68:	2f00      	cmp	r7, #0
 8002a6a:	d062      	beq.n	8002b32 <_strtol_l.isra.0+0xf6>
 8002a6c:	2f10      	cmp	r7, #16
 8002a6e:	d109      	bne.n	8002a84 <_strtol_l.isra.0+0x48>
 8002a70:	2c30      	cmp	r4, #48	; 0x30
 8002a72:	d107      	bne.n	8002a84 <_strtol_l.isra.0+0x48>
 8002a74:	2220      	movs	r2, #32
 8002a76:	782b      	ldrb	r3, [r5, #0]
 8002a78:	4393      	bics	r3, r2
 8002a7a:	2b58      	cmp	r3, #88	; 0x58
 8002a7c:	d154      	bne.n	8002b28 <_strtol_l.isra.0+0xec>
 8002a7e:	2710      	movs	r7, #16
 8002a80:	786c      	ldrb	r4, [r5, #1]
 8002a82:	3502      	adds	r5, #2
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <_strtol_l.isra.0+0x100>)
 8002a86:	0039      	movs	r1, r7
 8002a88:	18f3      	adds	r3, r6, r3
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	9303      	str	r3, [sp, #12]
 8002a8e:	f7fd fbc9 	bl	8000224 <__aeabi_uidivmod>
 8002a92:	9104      	str	r1, [sp, #16]
 8002a94:	2101      	movs	r1, #1
 8002a96:	2300      	movs	r3, #0
 8002a98:	4249      	negs	r1, r1
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	468c      	mov	ip, r1
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	0021      	movs	r1, r4
 8002aa2:	3930      	subs	r1, #48	; 0x30
 8002aa4:	2909      	cmp	r1, #9
 8002aa6:	d81a      	bhi.n	8002ade <_strtol_l.isra.0+0xa2>
 8002aa8:	000c      	movs	r4, r1
 8002aaa:	42a7      	cmp	r7, r4
 8002aac:	dd23      	ble.n	8002af6 <_strtol_l.isra.0+0xba>
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	d009      	beq.n	8002ac6 <_strtol_l.isra.0+0x8a>
 8002ab2:	4663      	mov	r3, ip
 8002ab4:	4282      	cmp	r2, r0
 8002ab6:	d306      	bcc.n	8002ac6 <_strtol_l.isra.0+0x8a>
 8002ab8:	d102      	bne.n	8002ac0 <_strtol_l.isra.0+0x84>
 8002aba:	9904      	ldr	r1, [sp, #16]
 8002abc:	42a1      	cmp	r1, r4
 8002abe:	db02      	blt.n	8002ac6 <_strtol_l.isra.0+0x8a>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	4378      	muls	r0, r7
 8002ac4:	1820      	adds	r0, r4, r0
 8002ac6:	782c      	ldrb	r4, [r5, #0]
 8002ac8:	3501      	adds	r5, #1
 8002aca:	e7e9      	b.n	8002aa0 <_strtol_l.isra.0+0x64>
 8002acc:	002e      	movs	r6, r5
 8002ace:	e7bc      	b.n	8002a4a <_strtol_l.isra.0+0xe>
 8002ad0:	2c2b      	cmp	r4, #43	; 0x2b
 8002ad2:	d001      	beq.n	8002ad8 <_strtol_l.isra.0+0x9c>
 8002ad4:	001e      	movs	r6, r3
 8002ad6:	e7c7      	b.n	8002a68 <_strtol_l.isra.0+0x2c>
 8002ad8:	1cb5      	adds	r5, r6, #2
 8002ada:	7874      	ldrb	r4, [r6, #1]
 8002adc:	e7fa      	b.n	8002ad4 <_strtol_l.isra.0+0x98>
 8002ade:	0021      	movs	r1, r4
 8002ae0:	3941      	subs	r1, #65	; 0x41
 8002ae2:	2919      	cmp	r1, #25
 8002ae4:	d801      	bhi.n	8002aea <_strtol_l.isra.0+0xae>
 8002ae6:	3c37      	subs	r4, #55	; 0x37
 8002ae8:	e7df      	b.n	8002aaa <_strtol_l.isra.0+0x6e>
 8002aea:	0021      	movs	r1, r4
 8002aec:	3961      	subs	r1, #97	; 0x61
 8002aee:	2919      	cmp	r1, #25
 8002af0:	d801      	bhi.n	8002af6 <_strtol_l.isra.0+0xba>
 8002af2:	3c57      	subs	r4, #87	; 0x57
 8002af4:	e7d9      	b.n	8002aaa <_strtol_l.isra.0+0x6e>
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	d108      	bne.n	8002b0c <_strtol_l.isra.0+0xd0>
 8002afa:	9a05      	ldr	r2, [sp, #20]
 8002afc:	3323      	adds	r3, #35	; 0x23
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	9b02      	ldr	r3, [sp, #8]
 8002b02:	9803      	ldr	r0, [sp, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <_strtol_l.isra.0+0xe0>
 8002b08:	b007      	add	sp, #28
 8002b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0c:	2e00      	cmp	r6, #0
 8002b0e:	d000      	beq.n	8002b12 <_strtol_l.isra.0+0xd6>
 8002b10:	4240      	negs	r0, r0
 8002b12:	9a02      	ldr	r2, [sp, #8]
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	d0f7      	beq.n	8002b08 <_strtol_l.isra.0+0xcc>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <_strtol_l.isra.0+0xe4>
 8002b1c:	1e6b      	subs	r3, r5, #1
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	9b02      	ldr	r3, [sp, #8]
 8002b22:	9a01      	ldr	r2, [sp, #4]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e7ef      	b.n	8002b08 <_strtol_l.isra.0+0xcc>
 8002b28:	2430      	movs	r4, #48	; 0x30
 8002b2a:	2f00      	cmp	r7, #0
 8002b2c:	d1aa      	bne.n	8002a84 <_strtol_l.isra.0+0x48>
 8002b2e:	2708      	movs	r7, #8
 8002b30:	e7a8      	b.n	8002a84 <_strtol_l.isra.0+0x48>
 8002b32:	2c30      	cmp	r4, #48	; 0x30
 8002b34:	d09e      	beq.n	8002a74 <_strtol_l.isra.0+0x38>
 8002b36:	270a      	movs	r7, #10
 8002b38:	e7a4      	b.n	8002a84 <_strtol_l.isra.0+0x48>
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	7fffffff 	.word	0x7fffffff

08002b40 <strtol>:
 8002b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b42:	0013      	movs	r3, r2
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <strtol+0x20>)
 8002b46:	0005      	movs	r5, r0
 8002b48:	6810      	ldr	r0, [r2, #0]
 8002b4a:	6a04      	ldr	r4, [r0, #32]
 8002b4c:	2c00      	cmp	r4, #0
 8002b4e:	d100      	bne.n	8002b52 <strtol+0x12>
 8002b50:	4c04      	ldr	r4, [pc, #16]	; (8002b64 <strtol+0x24>)
 8002b52:	000a      	movs	r2, r1
 8002b54:	9400      	str	r4, [sp, #0]
 8002b56:	0029      	movs	r1, r5
 8002b58:	f7ff ff70 	bl	8002a3c <_strtol_l.isra.0>
 8002b5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	2000000c 	.word	0x2000000c
 8002b64:	20000070 	.word	0x20000070

08002b68 <__locale_ctype_ptr_l>:
 8002b68:	30ec      	adds	r0, #236	; 0xec
 8002b6a:	6800      	ldr	r0, [r0, #0]
 8002b6c:	4770      	bx	lr

08002b6e <__ascii_mbtowc>:
 8002b6e:	b082      	sub	sp, #8
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d100      	bne.n	8002b76 <__ascii_mbtowc+0x8>
 8002b74:	a901      	add	r1, sp, #4
 8002b76:	1e10      	subs	r0, r2, #0
 8002b78:	d006      	beq.n	8002b88 <__ascii_mbtowc+0x1a>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <__ascii_mbtowc+0x1e>
 8002b7e:	7813      	ldrb	r3, [r2, #0]
 8002b80:	600b      	str	r3, [r1, #0]
 8002b82:	7810      	ldrb	r0, [r2, #0]
 8002b84:	1e43      	subs	r3, r0, #1
 8002b86:	4198      	sbcs	r0, r3
 8002b88:	b002      	add	sp, #8
 8002b8a:	4770      	bx	lr
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	4240      	negs	r0, r0
 8002b90:	e7fa      	b.n	8002b88 <__ascii_mbtowc+0x1a>
	...

08002b94 <__ssputs_r>:
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	688e      	ldr	r6, [r1, #8]
 8002b98:	b085      	sub	sp, #20
 8002b9a:	0007      	movs	r7, r0
 8002b9c:	000c      	movs	r4, r1
 8002b9e:	9203      	str	r2, [sp, #12]
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	429e      	cmp	r6, r3
 8002ba4:	d83c      	bhi.n	8002c20 <__ssputs_r+0x8c>
 8002ba6:	2390      	movs	r3, #144	; 0x90
 8002ba8:	898a      	ldrh	r2, [r1, #12]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	421a      	tst	r2, r3
 8002bae:	d034      	beq.n	8002c1a <__ssputs_r+0x86>
 8002bb0:	2503      	movs	r5, #3
 8002bb2:	6909      	ldr	r1, [r1, #16]
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	1a5b      	subs	r3, r3, r1
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	6963      	ldr	r3, [r4, #20]
 8002bbc:	9802      	ldr	r0, [sp, #8]
 8002bbe:	435d      	muls	r5, r3
 8002bc0:	0feb      	lsrs	r3, r5, #31
 8002bc2:	195d      	adds	r5, r3, r5
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	106d      	asrs	r5, r5, #1
 8002bc8:	3301      	adds	r3, #1
 8002bca:	181b      	adds	r3, r3, r0
 8002bcc:	42ab      	cmp	r3, r5
 8002bce:	d900      	bls.n	8002bd2 <__ssputs_r+0x3e>
 8002bd0:	001d      	movs	r5, r3
 8002bd2:	0553      	lsls	r3, r2, #21
 8002bd4:	d532      	bpl.n	8002c3c <__ssputs_r+0xa8>
 8002bd6:	0029      	movs	r1, r5
 8002bd8:	0038      	movs	r0, r7
 8002bda:	f000 fb2f 	bl	800323c <_malloc_r>
 8002bde:	1e06      	subs	r6, r0, #0
 8002be0:	d109      	bne.n	8002bf6 <__ssputs_r+0x62>
 8002be2:	230c      	movs	r3, #12
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	2001      	movs	r0, #1
 8002bea:	89a2      	ldrh	r2, [r4, #12]
 8002bec:	4240      	negs	r0, r0
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	81a3      	strh	r3, [r4, #12]
 8002bf2:	b005      	add	sp, #20
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf6:	9a02      	ldr	r2, [sp, #8]
 8002bf8:	6921      	ldr	r1, [r4, #16]
 8002bfa:	f000 fab8 	bl	800316e <memcpy>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <__ssputs_r+0xc0>)
 8002c02:	401a      	ands	r2, r3
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	4313      	orrs	r3, r2
 8002c08:	81a3      	strh	r3, [r4, #12]
 8002c0a:	9b02      	ldr	r3, [sp, #8]
 8002c0c:	6126      	str	r6, [r4, #16]
 8002c0e:	18f6      	adds	r6, r6, r3
 8002c10:	6026      	str	r6, [r4, #0]
 8002c12:	6165      	str	r5, [r4, #20]
 8002c14:	9e01      	ldr	r6, [sp, #4]
 8002c16:	1aed      	subs	r5, r5, r3
 8002c18:	60a5      	str	r5, [r4, #8]
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	429e      	cmp	r6, r3
 8002c1e:	d900      	bls.n	8002c22 <__ssputs_r+0x8e>
 8002c20:	9e01      	ldr	r6, [sp, #4]
 8002c22:	0032      	movs	r2, r6
 8002c24:	9903      	ldr	r1, [sp, #12]
 8002c26:	6820      	ldr	r0, [r4, #0]
 8002c28:	f000 faaa 	bl	8003180 <memmove>
 8002c2c:	68a3      	ldr	r3, [r4, #8]
 8002c2e:	2000      	movs	r0, #0
 8002c30:	1b9b      	subs	r3, r3, r6
 8002c32:	60a3      	str	r3, [r4, #8]
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	199e      	adds	r6, r3, r6
 8002c38:	6026      	str	r6, [r4, #0]
 8002c3a:	e7da      	b.n	8002bf2 <__ssputs_r+0x5e>
 8002c3c:	002a      	movs	r2, r5
 8002c3e:	0038      	movs	r0, r7
 8002c40:	f000 fb5a 	bl	80032f8 <_realloc_r>
 8002c44:	1e06      	subs	r6, r0, #0
 8002c46:	d1e0      	bne.n	8002c0a <__ssputs_r+0x76>
 8002c48:	6921      	ldr	r1, [r4, #16]
 8002c4a:	0038      	movs	r0, r7
 8002c4c:	f000 faac 	bl	80031a8 <_free_r>
 8002c50:	e7c7      	b.n	8002be2 <__ssputs_r+0x4e>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	fffffb7f 	.word	0xfffffb7f

08002c58 <_svfiprintf_r>:
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	b0a1      	sub	sp, #132	; 0x84
 8002c5c:	9003      	str	r0, [sp, #12]
 8002c5e:	001d      	movs	r5, r3
 8002c60:	898b      	ldrh	r3, [r1, #12]
 8002c62:	000f      	movs	r7, r1
 8002c64:	0016      	movs	r6, r2
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	d511      	bpl.n	8002c8e <_svfiprintf_r+0x36>
 8002c6a:	690b      	ldr	r3, [r1, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10e      	bne.n	8002c8e <_svfiprintf_r+0x36>
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	f000 fae3 	bl	800323c <_malloc_r>
 8002c76:	6038      	str	r0, [r7, #0]
 8002c78:	6138      	str	r0, [r7, #16]
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d105      	bne.n	8002c8a <_svfiprintf_r+0x32>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	9a03      	ldr	r2, [sp, #12]
 8002c82:	3801      	subs	r0, #1
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	b021      	add	sp, #132	; 0x84
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	ac08      	add	r4, sp, #32
 8002c92:	6163      	str	r3, [r4, #20]
 8002c94:	3320      	adds	r3, #32
 8002c96:	7663      	strb	r3, [r4, #25]
 8002c98:	3310      	adds	r3, #16
 8002c9a:	76a3      	strb	r3, [r4, #26]
 8002c9c:	9507      	str	r5, [sp, #28]
 8002c9e:	0035      	movs	r5, r6
 8002ca0:	782b      	ldrb	r3, [r5, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_svfiprintf_r+0x52>
 8002ca6:	2b25      	cmp	r3, #37	; 0x25
 8002ca8:	d146      	bne.n	8002d38 <_svfiprintf_r+0xe0>
 8002caa:	1bab      	subs	r3, r5, r6
 8002cac:	9305      	str	r3, [sp, #20]
 8002cae:	d00c      	beq.n	8002cca <_svfiprintf_r+0x72>
 8002cb0:	0032      	movs	r2, r6
 8002cb2:	0039      	movs	r1, r7
 8002cb4:	9803      	ldr	r0, [sp, #12]
 8002cb6:	f7ff ff6d 	bl	8002b94 <__ssputs_r>
 8002cba:	1c43      	adds	r3, r0, #1
 8002cbc:	d100      	bne.n	8002cc0 <_svfiprintf_r+0x68>
 8002cbe:	e0ae      	b.n	8002e1e <_svfiprintf_r+0x1c6>
 8002cc0:	6962      	ldr	r2, [r4, #20]
 8002cc2:	9b05      	ldr	r3, [sp, #20]
 8002cc4:	4694      	mov	ip, r2
 8002cc6:	4463      	add	r3, ip
 8002cc8:	6163      	str	r3, [r4, #20]
 8002cca:	782b      	ldrb	r3, [r5, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d100      	bne.n	8002cd2 <_svfiprintf_r+0x7a>
 8002cd0:	e0a5      	b.n	8002e1e <_svfiprintf_r+0x1c6>
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4252      	negs	r2, r2
 8002cd8:	6062      	str	r2, [r4, #4]
 8002cda:	a904      	add	r1, sp, #16
 8002cdc:	3254      	adds	r2, #84	; 0x54
 8002cde:	1852      	adds	r2, r2, r1
 8002ce0:	1c6e      	adds	r6, r5, #1
 8002ce2:	6023      	str	r3, [r4, #0]
 8002ce4:	60e3      	str	r3, [r4, #12]
 8002ce6:	60a3      	str	r3, [r4, #8]
 8002ce8:	7013      	strb	r3, [r2, #0]
 8002cea:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cec:	7831      	ldrb	r1, [r6, #0]
 8002cee:	2205      	movs	r2, #5
 8002cf0:	4853      	ldr	r0, [pc, #332]	; (8002e40 <_svfiprintf_r+0x1e8>)
 8002cf2:	f000 fa31 	bl	8003158 <memchr>
 8002cf6:	1c75      	adds	r5, r6, #1
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d11f      	bne.n	8002d3c <_svfiprintf_r+0xe4>
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	06d3      	lsls	r3, r2, #27
 8002d00:	d504      	bpl.n	8002d0c <_svfiprintf_r+0xb4>
 8002d02:	2353      	movs	r3, #83	; 0x53
 8002d04:	a904      	add	r1, sp, #16
 8002d06:	185b      	adds	r3, r3, r1
 8002d08:	2120      	movs	r1, #32
 8002d0a:	7019      	strb	r1, [r3, #0]
 8002d0c:	0713      	lsls	r3, r2, #28
 8002d0e:	d504      	bpl.n	8002d1a <_svfiprintf_r+0xc2>
 8002d10:	2353      	movs	r3, #83	; 0x53
 8002d12:	a904      	add	r1, sp, #16
 8002d14:	185b      	adds	r3, r3, r1
 8002d16:	212b      	movs	r1, #43	; 0x2b
 8002d18:	7019      	strb	r1, [r3, #0]
 8002d1a:	7833      	ldrb	r3, [r6, #0]
 8002d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d1e:	d016      	beq.n	8002d4e <_svfiprintf_r+0xf6>
 8002d20:	0035      	movs	r5, r6
 8002d22:	2100      	movs	r1, #0
 8002d24:	200a      	movs	r0, #10
 8002d26:	68e3      	ldr	r3, [r4, #12]
 8002d28:	782a      	ldrb	r2, [r5, #0]
 8002d2a:	1c6e      	adds	r6, r5, #1
 8002d2c:	3a30      	subs	r2, #48	; 0x30
 8002d2e:	2a09      	cmp	r2, #9
 8002d30:	d94e      	bls.n	8002dd0 <_svfiprintf_r+0x178>
 8002d32:	2900      	cmp	r1, #0
 8002d34:	d018      	beq.n	8002d68 <_svfiprintf_r+0x110>
 8002d36:	e010      	b.n	8002d5a <_svfiprintf_r+0x102>
 8002d38:	3501      	adds	r5, #1
 8002d3a:	e7b1      	b.n	8002ca0 <_svfiprintf_r+0x48>
 8002d3c:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <_svfiprintf_r+0x1e8>)
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	1ac0      	subs	r0, r0, r3
 8002d42:	2301      	movs	r3, #1
 8002d44:	4083      	lsls	r3, r0
 8002d46:	4313      	orrs	r3, r2
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	002e      	movs	r6, r5
 8002d4c:	e7ce      	b.n	8002cec <_svfiprintf_r+0x94>
 8002d4e:	9b07      	ldr	r3, [sp, #28]
 8002d50:	1d19      	adds	r1, r3, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	9107      	str	r1, [sp, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db01      	blt.n	8002d5e <_svfiprintf_r+0x106>
 8002d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d5c:	e004      	b.n	8002d68 <_svfiprintf_r+0x110>
 8002d5e:	425b      	negs	r3, r3
 8002d60:	60e3      	str	r3, [r4, #12]
 8002d62:	2302      	movs	r3, #2
 8002d64:	4313      	orrs	r3, r2
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	782b      	ldrb	r3, [r5, #0]
 8002d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6c:	d10a      	bne.n	8002d84 <_svfiprintf_r+0x12c>
 8002d6e:	786b      	ldrb	r3, [r5, #1]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d135      	bne.n	8002de0 <_svfiprintf_r+0x188>
 8002d74:	9b07      	ldr	r3, [sp, #28]
 8002d76:	3502      	adds	r5, #2
 8002d78:	1d1a      	adds	r2, r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	9207      	str	r2, [sp, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db2b      	blt.n	8002dda <_svfiprintf_r+0x182>
 8002d82:	9309      	str	r3, [sp, #36]	; 0x24
 8002d84:	4e2f      	ldr	r6, [pc, #188]	; (8002e44 <_svfiprintf_r+0x1ec>)
 8002d86:	7829      	ldrb	r1, [r5, #0]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	0030      	movs	r0, r6
 8002d8c:	f000 f9e4 	bl	8003158 <memchr>
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d006      	beq.n	8002da2 <_svfiprintf_r+0x14a>
 8002d94:	2340      	movs	r3, #64	; 0x40
 8002d96:	1b80      	subs	r0, r0, r6
 8002d98:	4083      	lsls	r3, r0
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	3501      	adds	r5, #1
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	7829      	ldrb	r1, [r5, #0]
 8002da4:	2206      	movs	r2, #6
 8002da6:	4828      	ldr	r0, [pc, #160]	; (8002e48 <_svfiprintf_r+0x1f0>)
 8002da8:	1c6e      	adds	r6, r5, #1
 8002daa:	7621      	strb	r1, [r4, #24]
 8002dac:	f000 f9d4 	bl	8003158 <memchr>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d03c      	beq.n	8002e2e <_svfiprintf_r+0x1d6>
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <_svfiprintf_r+0x1f4>)
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d125      	bne.n	8002e06 <_svfiprintf_r+0x1ae>
 8002dba:	2207      	movs	r2, #7
 8002dbc:	9b07      	ldr	r3, [sp, #28]
 8002dbe:	3307      	adds	r3, #7
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	9307      	str	r3, [sp, #28]
 8002dc6:	6963      	ldr	r3, [r4, #20]
 8002dc8:	9a04      	ldr	r2, [sp, #16]
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	6163      	str	r3, [r4, #20]
 8002dce:	e766      	b.n	8002c9e <_svfiprintf_r+0x46>
 8002dd0:	4343      	muls	r3, r0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	0035      	movs	r5, r6
 8002dd8:	e7a6      	b.n	8002d28 <_svfiprintf_r+0xd0>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	425b      	negs	r3, r3
 8002dde:	e7d0      	b.n	8002d82 <_svfiprintf_r+0x12a>
 8002de0:	2300      	movs	r3, #0
 8002de2:	200a      	movs	r0, #10
 8002de4:	001a      	movs	r2, r3
 8002de6:	3501      	adds	r5, #1
 8002de8:	6063      	str	r3, [r4, #4]
 8002dea:	7829      	ldrb	r1, [r5, #0]
 8002dec:	1c6e      	adds	r6, r5, #1
 8002dee:	3930      	subs	r1, #48	; 0x30
 8002df0:	2909      	cmp	r1, #9
 8002df2:	d903      	bls.n	8002dfc <_svfiprintf_r+0x1a4>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0c5      	beq.n	8002d84 <_svfiprintf_r+0x12c>
 8002df8:	9209      	str	r2, [sp, #36]	; 0x24
 8002dfa:	e7c3      	b.n	8002d84 <_svfiprintf_r+0x12c>
 8002dfc:	4342      	muls	r2, r0
 8002dfe:	2301      	movs	r3, #1
 8002e00:	1852      	adds	r2, r2, r1
 8002e02:	0035      	movs	r5, r6
 8002e04:	e7f1      	b.n	8002dea <_svfiprintf_r+0x192>
 8002e06:	ab07      	add	r3, sp, #28
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	003a      	movs	r2, r7
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <_svfiprintf_r+0x1f8>)
 8002e0e:	0021      	movs	r1, r4
 8002e10:	9803      	ldr	r0, [sp, #12]
 8002e12:	e000      	b.n	8002e16 <_svfiprintf_r+0x1be>
 8002e14:	bf00      	nop
 8002e16:	9004      	str	r0, [sp, #16]
 8002e18:	9b04      	ldr	r3, [sp, #16]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	d1d3      	bne.n	8002dc6 <_svfiprintf_r+0x16e>
 8002e1e:	89bb      	ldrh	r3, [r7, #12]
 8002e20:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e22:	065b      	lsls	r3, r3, #25
 8002e24:	d400      	bmi.n	8002e28 <_svfiprintf_r+0x1d0>
 8002e26:	e72e      	b.n	8002c86 <_svfiprintf_r+0x2e>
 8002e28:	2001      	movs	r0, #1
 8002e2a:	4240      	negs	r0, r0
 8002e2c:	e72b      	b.n	8002c86 <_svfiprintf_r+0x2e>
 8002e2e:	ab07      	add	r3, sp, #28
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	003a      	movs	r2, r7
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <_svfiprintf_r+0x1f8>)
 8002e36:	0021      	movs	r1, r4
 8002e38:	9803      	ldr	r0, [sp, #12]
 8002e3a:	f000 f879 	bl	8002f30 <_printf_i>
 8002e3e:	e7ea      	b.n	8002e16 <_svfiprintf_r+0x1be>
 8002e40:	080033e6 	.word	0x080033e6
 8002e44:	080033ec 	.word	0x080033ec
 8002e48:	080033f0 	.word	0x080033f0
 8002e4c:	00000000 	.word	0x00000000
 8002e50:	08002b95 	.word	0x08002b95

08002e54 <_printf_common>:
 8002e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e56:	0015      	movs	r5, r2
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	688a      	ldr	r2, [r1, #8]
 8002e5c:	690b      	ldr	r3, [r1, #16]
 8002e5e:	9000      	str	r0, [sp, #0]
 8002e60:	000c      	movs	r4, r1
 8002e62:	4293      	cmp	r3, r2
 8002e64:	da00      	bge.n	8002e68 <_printf_common+0x14>
 8002e66:	0013      	movs	r3, r2
 8002e68:	0022      	movs	r2, r4
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	3243      	adds	r2, #67	; 0x43
 8002e6e:	7812      	ldrb	r2, [r2, #0]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d001      	beq.n	8002e78 <_printf_common+0x24>
 8002e74:	3301      	adds	r3, #1
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	069b      	lsls	r3, r3, #26
 8002e7c:	d502      	bpl.n	8002e84 <_printf_common+0x30>
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	3302      	adds	r3, #2
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	2706      	movs	r7, #6
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	401f      	ands	r7, r3
 8002e8a:	d027      	beq.n	8002edc <_printf_common+0x88>
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3343      	adds	r3, #67	; 0x43
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	4193      	sbcs	r3, r2
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	0692      	lsls	r2, r2, #26
 8002e9a:	d430      	bmi.n	8002efe <_printf_common+0xaa>
 8002e9c:	0022      	movs	r2, r4
 8002e9e:	9901      	ldr	r1, [sp, #4]
 8002ea0:	3243      	adds	r2, #67	; 0x43
 8002ea2:	9800      	ldr	r0, [sp, #0]
 8002ea4:	9e08      	ldr	r6, [sp, #32]
 8002ea6:	47b0      	blx	r6
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d025      	beq.n	8002ef8 <_printf_common+0xa4>
 8002eac:	2306      	movs	r3, #6
 8002eae:	6820      	ldr	r0, [r4, #0]
 8002eb0:	682a      	ldr	r2, [r5, #0]
 8002eb2:	68e1      	ldr	r1, [r4, #12]
 8002eb4:	4003      	ands	r3, r0
 8002eb6:	2500      	movs	r5, #0
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d103      	bne.n	8002ec4 <_printf_common+0x70>
 8002ebc:	1a8d      	subs	r5, r1, r2
 8002ebe:	43eb      	mvns	r3, r5
 8002ec0:	17db      	asrs	r3, r3, #31
 8002ec2:	401d      	ands	r5, r3
 8002ec4:	68a3      	ldr	r3, [r4, #8]
 8002ec6:	6922      	ldr	r2, [r4, #16]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	dd01      	ble.n	8002ed0 <_printf_common+0x7c>
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	18ed      	adds	r5, r5, r3
 8002ed0:	2700      	movs	r7, #0
 8002ed2:	42bd      	cmp	r5, r7
 8002ed4:	d120      	bne.n	8002f18 <_printf_common+0xc4>
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	e010      	b.n	8002efc <_printf_common+0xa8>
 8002eda:	3701      	adds	r7, #1
 8002edc:	68e3      	ldr	r3, [r4, #12]
 8002ede:	682a      	ldr	r2, [r5, #0]
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	42bb      	cmp	r3, r7
 8002ee4:	ddd2      	ble.n	8002e8c <_printf_common+0x38>
 8002ee6:	0022      	movs	r2, r4
 8002ee8:	2301      	movs	r3, #1
 8002eea:	3219      	adds	r2, #25
 8002eec:	9901      	ldr	r1, [sp, #4]
 8002eee:	9800      	ldr	r0, [sp, #0]
 8002ef0:	9e08      	ldr	r6, [sp, #32]
 8002ef2:	47b0      	blx	r6
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d1f0      	bne.n	8002eda <_printf_common+0x86>
 8002ef8:	2001      	movs	r0, #1
 8002efa:	4240      	negs	r0, r0
 8002efc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002efe:	2030      	movs	r0, #48	; 0x30
 8002f00:	18e1      	adds	r1, r4, r3
 8002f02:	3143      	adds	r1, #67	; 0x43
 8002f04:	7008      	strb	r0, [r1, #0]
 8002f06:	0021      	movs	r1, r4
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	3145      	adds	r1, #69	; 0x45
 8002f0c:	7809      	ldrb	r1, [r1, #0]
 8002f0e:	18a2      	adds	r2, r4, r2
 8002f10:	3243      	adds	r2, #67	; 0x43
 8002f12:	3302      	adds	r3, #2
 8002f14:	7011      	strb	r1, [r2, #0]
 8002f16:	e7c1      	b.n	8002e9c <_printf_common+0x48>
 8002f18:	0022      	movs	r2, r4
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	321a      	adds	r2, #26
 8002f1e:	9901      	ldr	r1, [sp, #4]
 8002f20:	9800      	ldr	r0, [sp, #0]
 8002f22:	9e08      	ldr	r6, [sp, #32]
 8002f24:	47b0      	blx	r6
 8002f26:	1c43      	adds	r3, r0, #1
 8002f28:	d0e6      	beq.n	8002ef8 <_printf_common+0xa4>
 8002f2a:	3701      	adds	r7, #1
 8002f2c:	e7d1      	b.n	8002ed2 <_printf_common+0x7e>
	...

08002f30 <_printf_i>:
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	9204      	str	r2, [sp, #16]
 8002f36:	000a      	movs	r2, r1
 8002f38:	3243      	adds	r2, #67	; 0x43
 8002f3a:	9305      	str	r3, [sp, #20]
 8002f3c:	9003      	str	r0, [sp, #12]
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	7e0a      	ldrb	r2, [r1, #24]
 8002f42:	000c      	movs	r4, r1
 8002f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f46:	2a6e      	cmp	r2, #110	; 0x6e
 8002f48:	d100      	bne.n	8002f4c <_printf_i+0x1c>
 8002f4a:	e086      	b.n	800305a <_printf_i+0x12a>
 8002f4c:	d81f      	bhi.n	8002f8e <_printf_i+0x5e>
 8002f4e:	2a63      	cmp	r2, #99	; 0x63
 8002f50:	d033      	beq.n	8002fba <_printf_i+0x8a>
 8002f52:	d808      	bhi.n	8002f66 <_printf_i+0x36>
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d100      	bne.n	8002f5a <_printf_i+0x2a>
 8002f58:	e08c      	b.n	8003074 <_printf_i+0x144>
 8002f5a:	2a58      	cmp	r2, #88	; 0x58
 8002f5c:	d04d      	beq.n	8002ffa <_printf_i+0xca>
 8002f5e:	0025      	movs	r5, r4
 8002f60:	3542      	adds	r5, #66	; 0x42
 8002f62:	702a      	strb	r2, [r5, #0]
 8002f64:	e030      	b.n	8002fc8 <_printf_i+0x98>
 8002f66:	2a64      	cmp	r2, #100	; 0x64
 8002f68:	d001      	beq.n	8002f6e <_printf_i+0x3e>
 8002f6a:	2a69      	cmp	r2, #105	; 0x69
 8002f6c:	d1f7      	bne.n	8002f5e <_printf_i+0x2e>
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6825      	ldr	r5, [r4, #0]
 8002f72:	1d0a      	adds	r2, r1, #4
 8002f74:	0628      	lsls	r0, r5, #24
 8002f76:	d529      	bpl.n	8002fcc <_printf_i+0x9c>
 8002f78:	6808      	ldr	r0, [r1, #0]
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	da03      	bge.n	8002f88 <_printf_i+0x58>
 8002f80:	232d      	movs	r3, #45	; 0x2d
 8002f82:	9a02      	ldr	r2, [sp, #8]
 8002f84:	4240      	negs	r0, r0
 8002f86:	7013      	strb	r3, [r2, #0]
 8002f88:	4e6b      	ldr	r6, [pc, #428]	; (8003138 <_printf_i+0x208>)
 8002f8a:	270a      	movs	r7, #10
 8002f8c:	e04f      	b.n	800302e <_printf_i+0xfe>
 8002f8e:	2a73      	cmp	r2, #115	; 0x73
 8002f90:	d074      	beq.n	800307c <_printf_i+0x14c>
 8002f92:	d808      	bhi.n	8002fa6 <_printf_i+0x76>
 8002f94:	2a6f      	cmp	r2, #111	; 0x6f
 8002f96:	d01f      	beq.n	8002fd8 <_printf_i+0xa8>
 8002f98:	2a70      	cmp	r2, #112	; 0x70
 8002f9a:	d1e0      	bne.n	8002f5e <_printf_i+0x2e>
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	6809      	ldr	r1, [r1, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	6022      	str	r2, [r4, #0]
 8002fa4:	e003      	b.n	8002fae <_printf_i+0x7e>
 8002fa6:	2a75      	cmp	r2, #117	; 0x75
 8002fa8:	d016      	beq.n	8002fd8 <_printf_i+0xa8>
 8002faa:	2a78      	cmp	r2, #120	; 0x78
 8002fac:	d1d7      	bne.n	8002f5e <_printf_i+0x2e>
 8002fae:	0022      	movs	r2, r4
 8002fb0:	2178      	movs	r1, #120	; 0x78
 8002fb2:	3245      	adds	r2, #69	; 0x45
 8002fb4:	7011      	strb	r1, [r2, #0]
 8002fb6:	4e61      	ldr	r6, [pc, #388]	; (800313c <_printf_i+0x20c>)
 8002fb8:	e022      	b.n	8003000 <_printf_i+0xd0>
 8002fba:	0025      	movs	r5, r4
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	3542      	adds	r5, #66	; 0x42
 8002fc0:	1d11      	adds	r1, r2, #4
 8002fc2:	6019      	str	r1, [r3, #0]
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	702b      	strb	r3, [r5, #0]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e065      	b.n	8003098 <_printf_i+0x168>
 8002fcc:	6808      	ldr	r0, [r1, #0]
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	0669      	lsls	r1, r5, #25
 8002fd2:	d5d3      	bpl.n	8002f7c <_printf_i+0x4c>
 8002fd4:	b200      	sxth	r0, r0
 8002fd6:	e7d1      	b.n	8002f7c <_printf_i+0x4c>
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	6825      	ldr	r5, [r4, #0]
 8002fdc:	1d08      	adds	r0, r1, #4
 8002fde:	6018      	str	r0, [r3, #0]
 8002fe0:	6808      	ldr	r0, [r1, #0]
 8002fe2:	062e      	lsls	r6, r5, #24
 8002fe4:	d505      	bpl.n	8002ff2 <_printf_i+0xc2>
 8002fe6:	4e54      	ldr	r6, [pc, #336]	; (8003138 <_printf_i+0x208>)
 8002fe8:	2708      	movs	r7, #8
 8002fea:	2a6f      	cmp	r2, #111	; 0x6f
 8002fec:	d01b      	beq.n	8003026 <_printf_i+0xf6>
 8002fee:	270a      	movs	r7, #10
 8002ff0:	e019      	b.n	8003026 <_printf_i+0xf6>
 8002ff2:	066d      	lsls	r5, r5, #25
 8002ff4:	d5f7      	bpl.n	8002fe6 <_printf_i+0xb6>
 8002ff6:	b280      	uxth	r0, r0
 8002ff8:	e7f5      	b.n	8002fe6 <_printf_i+0xb6>
 8002ffa:	3145      	adds	r1, #69	; 0x45
 8002ffc:	4e4e      	ldr	r6, [pc, #312]	; (8003138 <_printf_i+0x208>)
 8002ffe:	700a      	strb	r2, [r1, #0]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	1d01      	adds	r1, r0, #4
 8003006:	6800      	ldr	r0, [r0, #0]
 8003008:	6019      	str	r1, [r3, #0]
 800300a:	0615      	lsls	r5, r2, #24
 800300c:	d521      	bpl.n	8003052 <_printf_i+0x122>
 800300e:	07d3      	lsls	r3, r2, #31
 8003010:	d502      	bpl.n	8003018 <_printf_i+0xe8>
 8003012:	2320      	movs	r3, #32
 8003014:	431a      	orrs	r2, r3
 8003016:	6022      	str	r2, [r4, #0]
 8003018:	2710      	movs	r7, #16
 800301a:	2800      	cmp	r0, #0
 800301c:	d103      	bne.n	8003026 <_printf_i+0xf6>
 800301e:	2320      	movs	r3, #32
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	439a      	bics	r2, r3
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	0023      	movs	r3, r4
 8003028:	2200      	movs	r2, #0
 800302a:	3343      	adds	r3, #67	; 0x43
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	6863      	ldr	r3, [r4, #4]
 8003030:	60a3      	str	r3, [r4, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	db58      	blt.n	80030e8 <_printf_i+0x1b8>
 8003036:	2204      	movs	r2, #4
 8003038:	6821      	ldr	r1, [r4, #0]
 800303a:	4391      	bics	r1, r2
 800303c:	6021      	str	r1, [r4, #0]
 800303e:	2800      	cmp	r0, #0
 8003040:	d154      	bne.n	80030ec <_printf_i+0x1bc>
 8003042:	9d02      	ldr	r5, [sp, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05a      	beq.n	80030fe <_printf_i+0x1ce>
 8003048:	0025      	movs	r5, r4
 800304a:	7833      	ldrb	r3, [r6, #0]
 800304c:	3542      	adds	r5, #66	; 0x42
 800304e:	702b      	strb	r3, [r5, #0]
 8003050:	e055      	b.n	80030fe <_printf_i+0x1ce>
 8003052:	0655      	lsls	r5, r2, #25
 8003054:	d5db      	bpl.n	800300e <_printf_i+0xde>
 8003056:	b280      	uxth	r0, r0
 8003058:	e7d9      	b.n	800300e <_printf_i+0xde>
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	680d      	ldr	r5, [r1, #0]
 800305e:	1d10      	adds	r0, r2, #4
 8003060:	6949      	ldr	r1, [r1, #20]
 8003062:	6018      	str	r0, [r3, #0]
 8003064:	6813      	ldr	r3, [r2, #0]
 8003066:	062e      	lsls	r6, r5, #24
 8003068:	d501      	bpl.n	800306e <_printf_i+0x13e>
 800306a:	6019      	str	r1, [r3, #0]
 800306c:	e002      	b.n	8003074 <_printf_i+0x144>
 800306e:	066d      	lsls	r5, r5, #25
 8003070:	d5fb      	bpl.n	800306a <_printf_i+0x13a>
 8003072:	8019      	strh	r1, [r3, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	9d02      	ldr	r5, [sp, #8]
 8003078:	6123      	str	r3, [r4, #16]
 800307a:	e04f      	b.n	800311c <_printf_i+0x1ec>
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	1d11      	adds	r1, r2, #4
 8003080:	6019      	str	r1, [r3, #0]
 8003082:	6815      	ldr	r5, [r2, #0]
 8003084:	2100      	movs	r1, #0
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	0028      	movs	r0, r5
 800308a:	f000 f865 	bl	8003158 <memchr>
 800308e:	2800      	cmp	r0, #0
 8003090:	d001      	beq.n	8003096 <_printf_i+0x166>
 8003092:	1b40      	subs	r0, r0, r5
 8003094:	6060      	str	r0, [r4, #4]
 8003096:	6863      	ldr	r3, [r4, #4]
 8003098:	6123      	str	r3, [r4, #16]
 800309a:	2300      	movs	r3, #0
 800309c:	9a02      	ldr	r2, [sp, #8]
 800309e:	7013      	strb	r3, [r2, #0]
 80030a0:	e03c      	b.n	800311c <_printf_i+0x1ec>
 80030a2:	6923      	ldr	r3, [r4, #16]
 80030a4:	002a      	movs	r2, r5
 80030a6:	9904      	ldr	r1, [sp, #16]
 80030a8:	9803      	ldr	r0, [sp, #12]
 80030aa:	9d05      	ldr	r5, [sp, #20]
 80030ac:	47a8      	blx	r5
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d03e      	beq.n	8003130 <_printf_i+0x200>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	079b      	lsls	r3, r3, #30
 80030b6:	d415      	bmi.n	80030e4 <_printf_i+0x1b4>
 80030b8:	9b07      	ldr	r3, [sp, #28]
 80030ba:	68e0      	ldr	r0, [r4, #12]
 80030bc:	4298      	cmp	r0, r3
 80030be:	da39      	bge.n	8003134 <_printf_i+0x204>
 80030c0:	0018      	movs	r0, r3
 80030c2:	e037      	b.n	8003134 <_printf_i+0x204>
 80030c4:	0022      	movs	r2, r4
 80030c6:	2301      	movs	r3, #1
 80030c8:	3219      	adds	r2, #25
 80030ca:	9904      	ldr	r1, [sp, #16]
 80030cc:	9803      	ldr	r0, [sp, #12]
 80030ce:	9e05      	ldr	r6, [sp, #20]
 80030d0:	47b0      	blx	r6
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d02c      	beq.n	8003130 <_printf_i+0x200>
 80030d6:	3501      	adds	r5, #1
 80030d8:	68e3      	ldr	r3, [r4, #12]
 80030da:	9a07      	ldr	r2, [sp, #28]
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	42ab      	cmp	r3, r5
 80030e0:	dcf0      	bgt.n	80030c4 <_printf_i+0x194>
 80030e2:	e7e9      	b.n	80030b8 <_printf_i+0x188>
 80030e4:	2500      	movs	r5, #0
 80030e6:	e7f7      	b.n	80030d8 <_printf_i+0x1a8>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d0ad      	beq.n	8003048 <_printf_i+0x118>
 80030ec:	9d02      	ldr	r5, [sp, #8]
 80030ee:	0039      	movs	r1, r7
 80030f0:	f7fd f898 	bl	8000224 <__aeabi_uidivmod>
 80030f4:	5c73      	ldrb	r3, [r6, r1]
 80030f6:	3d01      	subs	r5, #1
 80030f8:	702b      	strb	r3, [r5, #0]
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d1f7      	bne.n	80030ee <_printf_i+0x1be>
 80030fe:	2f08      	cmp	r7, #8
 8003100:	d109      	bne.n	8003116 <_printf_i+0x1e6>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07db      	lsls	r3, r3, #31
 8003106:	d506      	bpl.n	8003116 <_printf_i+0x1e6>
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	6922      	ldr	r2, [r4, #16]
 800310c:	4293      	cmp	r3, r2
 800310e:	dc02      	bgt.n	8003116 <_printf_i+0x1e6>
 8003110:	2330      	movs	r3, #48	; 0x30
 8003112:	3d01      	subs	r5, #1
 8003114:	702b      	strb	r3, [r5, #0]
 8003116:	9b02      	ldr	r3, [sp, #8]
 8003118:	1b5b      	subs	r3, r3, r5
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	9b05      	ldr	r3, [sp, #20]
 800311e:	aa07      	add	r2, sp, #28
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	0021      	movs	r1, r4
 8003124:	9b04      	ldr	r3, [sp, #16]
 8003126:	9803      	ldr	r0, [sp, #12]
 8003128:	f7ff fe94 	bl	8002e54 <_printf_common>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d1b8      	bne.n	80030a2 <_printf_i+0x172>
 8003130:	2001      	movs	r0, #1
 8003132:	4240      	negs	r0, r0
 8003134:	b009      	add	sp, #36	; 0x24
 8003136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003138:	080033f7 	.word	0x080033f7
 800313c:	08003408 	.word	0x08003408

08003140 <__ascii_wctomb>:
 8003140:	1e0b      	subs	r3, r1, #0
 8003142:	d004      	beq.n	800314e <__ascii_wctomb+0xe>
 8003144:	2aff      	cmp	r2, #255	; 0xff
 8003146:	d904      	bls.n	8003152 <__ascii_wctomb+0x12>
 8003148:	238a      	movs	r3, #138	; 0x8a
 800314a:	6003      	str	r3, [r0, #0]
 800314c:	3b8b      	subs	r3, #139	; 0x8b
 800314e:	0018      	movs	r0, r3
 8003150:	4770      	bx	lr
 8003152:	700a      	strb	r2, [r1, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	e7fa      	b.n	800314e <__ascii_wctomb+0xe>

08003158 <memchr>:
 8003158:	b2c9      	uxtb	r1, r1
 800315a:	1882      	adds	r2, r0, r2
 800315c:	4290      	cmp	r0, r2
 800315e:	d101      	bne.n	8003164 <memchr+0xc>
 8003160:	2000      	movs	r0, #0
 8003162:	4770      	bx	lr
 8003164:	7803      	ldrb	r3, [r0, #0]
 8003166:	428b      	cmp	r3, r1
 8003168:	d0fb      	beq.n	8003162 <memchr+0xa>
 800316a:	3001      	adds	r0, #1
 800316c:	e7f6      	b.n	800315c <memchr+0x4>

0800316e <memcpy>:
 800316e:	2300      	movs	r3, #0
 8003170:	b510      	push	{r4, lr}
 8003172:	429a      	cmp	r2, r3
 8003174:	d100      	bne.n	8003178 <memcpy+0xa>
 8003176:	bd10      	pop	{r4, pc}
 8003178:	5ccc      	ldrb	r4, [r1, r3]
 800317a:	54c4      	strb	r4, [r0, r3]
 800317c:	3301      	adds	r3, #1
 800317e:	e7f8      	b.n	8003172 <memcpy+0x4>

08003180 <memmove>:
 8003180:	b510      	push	{r4, lr}
 8003182:	4288      	cmp	r0, r1
 8003184:	d902      	bls.n	800318c <memmove+0xc>
 8003186:	188b      	adds	r3, r1, r2
 8003188:	4298      	cmp	r0, r3
 800318a:	d303      	bcc.n	8003194 <memmove+0x14>
 800318c:	2300      	movs	r3, #0
 800318e:	e007      	b.n	80031a0 <memmove+0x20>
 8003190:	5c8b      	ldrb	r3, [r1, r2]
 8003192:	5483      	strb	r3, [r0, r2]
 8003194:	3a01      	subs	r2, #1
 8003196:	d2fb      	bcs.n	8003190 <memmove+0x10>
 8003198:	bd10      	pop	{r4, pc}
 800319a:	5ccc      	ldrb	r4, [r1, r3]
 800319c:	54c4      	strb	r4, [r0, r3]
 800319e:	3301      	adds	r3, #1
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1fa      	bne.n	800319a <memmove+0x1a>
 80031a4:	e7f8      	b.n	8003198 <memmove+0x18>
	...

080031a8 <_free_r>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	0005      	movs	r5, r0
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d010      	beq.n	80031d2 <_free_r+0x2a>
 80031b0:	1f0c      	subs	r4, r1, #4
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da00      	bge.n	80031ba <_free_r+0x12>
 80031b8:	18e4      	adds	r4, r4, r3
 80031ba:	0028      	movs	r0, r5
 80031bc:	f000 f8d4 	bl	8003368 <__malloc_lock>
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <_free_r+0x90>)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <_free_r+0x2c>
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	6014      	str	r4, [r2, #0]
 80031cc:	0028      	movs	r0, r5
 80031ce:	f000 f8cc 	bl	800336a <__malloc_unlock>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	42a3      	cmp	r3, r4
 80031d6:	d909      	bls.n	80031ec <_free_r+0x44>
 80031d8:	6821      	ldr	r1, [r4, #0]
 80031da:	1860      	adds	r0, r4, r1
 80031dc:	4283      	cmp	r3, r0
 80031de:	d1f3      	bne.n	80031c8 <_free_r+0x20>
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	1841      	adds	r1, r0, r1
 80031e6:	6021      	str	r1, [r4, #0]
 80031e8:	e7ee      	b.n	80031c8 <_free_r+0x20>
 80031ea:	0013      	movs	r3, r2
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	d001      	beq.n	80031f6 <_free_r+0x4e>
 80031f2:	42a2      	cmp	r2, r4
 80031f4:	d9f9      	bls.n	80031ea <_free_r+0x42>
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	1858      	adds	r0, r3, r1
 80031fa:	42a0      	cmp	r0, r4
 80031fc:	d10b      	bne.n	8003216 <_free_r+0x6e>
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	1809      	adds	r1, r1, r0
 8003202:	1858      	adds	r0, r3, r1
 8003204:	6019      	str	r1, [r3, #0]
 8003206:	4282      	cmp	r2, r0
 8003208:	d1e0      	bne.n	80031cc <_free_r+0x24>
 800320a:	6810      	ldr	r0, [r2, #0]
 800320c:	6852      	ldr	r2, [r2, #4]
 800320e:	1841      	adds	r1, r0, r1
 8003210:	6019      	str	r1, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	e7da      	b.n	80031cc <_free_r+0x24>
 8003216:	42a0      	cmp	r0, r4
 8003218:	d902      	bls.n	8003220 <_free_r+0x78>
 800321a:	230c      	movs	r3, #12
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	e7d5      	b.n	80031cc <_free_r+0x24>
 8003220:	6821      	ldr	r1, [r4, #0]
 8003222:	1860      	adds	r0, r4, r1
 8003224:	4282      	cmp	r2, r0
 8003226:	d103      	bne.n	8003230 <_free_r+0x88>
 8003228:	6810      	ldr	r0, [r2, #0]
 800322a:	6852      	ldr	r2, [r2, #4]
 800322c:	1841      	adds	r1, r0, r1
 800322e:	6021      	str	r1, [r4, #0]
 8003230:	6062      	str	r2, [r4, #4]
 8003232:	605c      	str	r4, [r3, #4]
 8003234:	e7ca      	b.n	80031cc <_free_r+0x24>
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	20000214 	.word	0x20000214

0800323c <_malloc_r>:
 800323c:	2303      	movs	r3, #3
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	1ccd      	adds	r5, r1, #3
 8003242:	439d      	bics	r5, r3
 8003244:	3508      	adds	r5, #8
 8003246:	0006      	movs	r6, r0
 8003248:	2d0c      	cmp	r5, #12
 800324a:	d21e      	bcs.n	800328a <_malloc_r+0x4e>
 800324c:	250c      	movs	r5, #12
 800324e:	42a9      	cmp	r1, r5
 8003250:	d81d      	bhi.n	800328e <_malloc_r+0x52>
 8003252:	0030      	movs	r0, r6
 8003254:	f000 f888 	bl	8003368 <__malloc_lock>
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <_malloc_r+0xb4>)
 800325a:	6814      	ldr	r4, [r2, #0]
 800325c:	0021      	movs	r1, r4
 800325e:	2900      	cmp	r1, #0
 8003260:	d119      	bne.n	8003296 <_malloc_r+0x5a>
 8003262:	4c24      	ldr	r4, [pc, #144]	; (80032f4 <_malloc_r+0xb8>)
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <_malloc_r+0x36>
 800326a:	0030      	movs	r0, r6
 800326c:	f000 f86a 	bl	8003344 <_sbrk_r>
 8003270:	6020      	str	r0, [r4, #0]
 8003272:	0029      	movs	r1, r5
 8003274:	0030      	movs	r0, r6
 8003276:	f000 f865 	bl	8003344 <_sbrk_r>
 800327a:	1c43      	adds	r3, r0, #1
 800327c:	d12b      	bne.n	80032d6 <_malloc_r+0x9a>
 800327e:	230c      	movs	r3, #12
 8003280:	0030      	movs	r0, r6
 8003282:	6033      	str	r3, [r6, #0]
 8003284:	f000 f871 	bl	800336a <__malloc_unlock>
 8003288:	e003      	b.n	8003292 <_malloc_r+0x56>
 800328a:	2d00      	cmp	r5, #0
 800328c:	dadf      	bge.n	800324e <_malloc_r+0x12>
 800328e:	230c      	movs	r3, #12
 8003290:	6033      	str	r3, [r6, #0]
 8003292:	2000      	movs	r0, #0
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	680b      	ldr	r3, [r1, #0]
 8003298:	1b5b      	subs	r3, r3, r5
 800329a:	d419      	bmi.n	80032d0 <_malloc_r+0x94>
 800329c:	2b0b      	cmp	r3, #11
 800329e:	d903      	bls.n	80032a8 <_malloc_r+0x6c>
 80032a0:	600b      	str	r3, [r1, #0]
 80032a2:	18cc      	adds	r4, r1, r3
 80032a4:	6025      	str	r5, [r4, #0]
 80032a6:	e003      	b.n	80032b0 <_malloc_r+0x74>
 80032a8:	684b      	ldr	r3, [r1, #4]
 80032aa:	428c      	cmp	r4, r1
 80032ac:	d10d      	bne.n	80032ca <_malloc_r+0x8e>
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	0030      	movs	r0, r6
 80032b2:	f000 f85a 	bl	800336a <__malloc_unlock>
 80032b6:	0020      	movs	r0, r4
 80032b8:	2207      	movs	r2, #7
 80032ba:	300b      	adds	r0, #11
 80032bc:	1d23      	adds	r3, r4, #4
 80032be:	4390      	bics	r0, r2
 80032c0:	1ac3      	subs	r3, r0, r3
 80032c2:	d0e7      	beq.n	8003294 <_malloc_r+0x58>
 80032c4:	425a      	negs	r2, r3
 80032c6:	50e2      	str	r2, [r4, r3]
 80032c8:	e7e4      	b.n	8003294 <_malloc_r+0x58>
 80032ca:	6063      	str	r3, [r4, #4]
 80032cc:	000c      	movs	r4, r1
 80032ce:	e7ef      	b.n	80032b0 <_malloc_r+0x74>
 80032d0:	000c      	movs	r4, r1
 80032d2:	6849      	ldr	r1, [r1, #4]
 80032d4:	e7c3      	b.n	800325e <_malloc_r+0x22>
 80032d6:	2303      	movs	r3, #3
 80032d8:	1cc4      	adds	r4, r0, #3
 80032da:	439c      	bics	r4, r3
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d0e1      	beq.n	80032a4 <_malloc_r+0x68>
 80032e0:	1a21      	subs	r1, r4, r0
 80032e2:	0030      	movs	r0, r6
 80032e4:	f000 f82e 	bl	8003344 <_sbrk_r>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d1db      	bne.n	80032a4 <_malloc_r+0x68>
 80032ec:	e7c7      	b.n	800327e <_malloc_r+0x42>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	20000214 	.word	0x20000214
 80032f4:	20000218 	.word	0x20000218

080032f8 <_realloc_r>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	0007      	movs	r7, r0
 80032fc:	000d      	movs	r5, r1
 80032fe:	0016      	movs	r6, r2
 8003300:	2900      	cmp	r1, #0
 8003302:	d105      	bne.n	8003310 <_realloc_r+0x18>
 8003304:	0011      	movs	r1, r2
 8003306:	f7ff ff99 	bl	800323c <_malloc_r>
 800330a:	0004      	movs	r4, r0
 800330c:	0020      	movs	r0, r4
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003310:	2a00      	cmp	r2, #0
 8003312:	d103      	bne.n	800331c <_realloc_r+0x24>
 8003314:	f7ff ff48 	bl	80031a8 <_free_r>
 8003318:	0034      	movs	r4, r6
 800331a:	e7f7      	b.n	800330c <_realloc_r+0x14>
 800331c:	f000 f826 	bl	800336c <_malloc_usable_size_r>
 8003320:	002c      	movs	r4, r5
 8003322:	42b0      	cmp	r0, r6
 8003324:	d2f2      	bcs.n	800330c <_realloc_r+0x14>
 8003326:	0031      	movs	r1, r6
 8003328:	0038      	movs	r0, r7
 800332a:	f7ff ff87 	bl	800323c <_malloc_r>
 800332e:	1e04      	subs	r4, r0, #0
 8003330:	d0ec      	beq.n	800330c <_realloc_r+0x14>
 8003332:	0029      	movs	r1, r5
 8003334:	0032      	movs	r2, r6
 8003336:	f7ff ff1a 	bl	800316e <memcpy>
 800333a:	0029      	movs	r1, r5
 800333c:	0038      	movs	r0, r7
 800333e:	f7ff ff33 	bl	80031a8 <_free_r>
 8003342:	e7e3      	b.n	800330c <_realloc_r+0x14>

08003344 <_sbrk_r>:
 8003344:	2300      	movs	r3, #0
 8003346:	b570      	push	{r4, r5, r6, lr}
 8003348:	4c06      	ldr	r4, [pc, #24]	; (8003364 <_sbrk_r+0x20>)
 800334a:	0005      	movs	r5, r0
 800334c:	0008      	movs	r0, r1
 800334e:	6023      	str	r3, [r4, #0]
 8003350:	f7fd fab4 	bl	80008bc <_sbrk>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d103      	bne.n	8003360 <_sbrk_r+0x1c>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d000      	beq.n	8003360 <_sbrk_r+0x1c>
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	20000338 	.word	0x20000338

08003368 <__malloc_lock>:
 8003368:	4770      	bx	lr

0800336a <__malloc_unlock>:
 800336a:	4770      	bx	lr

0800336c <_malloc_usable_size_r>:
 800336c:	1f0b      	subs	r3, r1, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1f18      	subs	r0, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	da01      	bge.n	800337a <_malloc_usable_size_r+0xe>
 8003376:	580b      	ldr	r3, [r1, r0]
 8003378:	18c0      	adds	r0, r0, r3
 800337a:	4770      	bx	lr

0800337c <_init>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr

08003388 <_fini>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr
